#line 112 "d:\devel\xharbour_bcc7\include\hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 43 "source\inspect.prg"
Static oCombo, oBrw1, oBrw2
Static aProp := {}, aMethods := {}
Static oTab , oMenuisnp

_HB_CLASS PBrowse ; UTILITY FUNCTION PBrowse(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "PBrowse" , {HBrowse():classh} ) ) ; ;



   _HB_MEMBER New( lType,oWndParent,nId,nStyle,nLeft,nTop,nWidth,nHeight,oFont,  bInit,bSize,bPaint,bEnter,bGfocus,bLfocus,lNoVScroll,      lNoBorder,lAppend,lAutoedit,bUpdate,bKeyDown); IIF( .F., s_oClass:ModMethod( "New", @PBrowse_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @PBrowse_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Edit(); IIF( .F., s_oClass:ModMethod( "Edit", @PBrowse_Edit(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Edit", @PBrowse_Edit(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER HeaderOut( hDC); IIF( .F., s_oClass:ModMethod( "HeaderOut", @PBrowse_HeaderOut(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "HeaderOut", @PBrowse_HeaderOut(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS PBrowse ;



UTILITY STATIC function PBrowse_New( lType,oWndParent,nId,nStyle,nLeft,nTop,nWidth,nHeight,oFont,  bInit,bSize,bPaint,bEnter,bGfocus,bLfocus,lNoVScroll,      lNoBorder,lAppend,lAutoedit,bUpdate,bKeyDown) ; local Self AS CLASS PBrowse := QSelf() AS CLASS PBrowse



   ::HBrowse:New( lType,oWndParent,nId,nStyle,nLeft,nTop,nWidth,nHeight,oFont,  bInit,bSize,bPaint,bEnter,bGfocus,bLfocus,lNoVScroll,        lNoBorder,lAppend,lAutoedit,bUpdate,bKeyDown )
Return Self

UTILITY STATIC function PBrowse_Edit( wParam,lParam) ; local Self AS CLASS PBrowse := QSelf() AS CLASS PBrowse
Memvar oDesigner
Local varbuf, x1, y1, nWidth, j, cName, aCtrlProp
Local aDataDef := oDesigner:aDataDef
Local lRes := .F., oColumn, nChoic, oGet, oBtn,aItems

Local aItemsaux, k, cAlias, i

Memvar Value, oCtrl
Private value, oCtrl := Iif( oCombo:value == 1, HFormGen():oDlgSelected, GetCtrlSelected( HFormGen():oDlgSelected ) )

   ( (wParam) := (wParam) )
   ( (lParam) := (lParam) )

   IF ::SetColumn() == 1 .AND. ::bEnter == Nil
      Return Nil
   ENDIF
   ::cargo := Eval( ::bRecno,Self )
   IF oTab:GetActivePage() == 2

      IF ( value := EditMethod( aMethods[::cargo,1],aMethods[::cargo,2] ) ) <> Nil  .AND. !( aMethods[::cargo,2] == value )
         aMethods[::cargo,2] := value
         IF oCombo:value == 1
            HFormGen():oDlgSelected:oParent:aMethods[::cargo,2] := value
         ELSE
            GetCtrlSelected( HFormGen():oDlgSelected ):aMethods[::cargo,2] := value
         ENDIF
         HFormGen():oDlgSelected:oParent:lChanged := .T.
         oBrw2:lUpdated := .T.
         oBrw2:Refresh()
      ENDIF
      Return Nil
   ENDIF
   IF oCombo:value == 1
      aCtrlProp := oCtrl:oParent:aProp
   ELSE
      aCtrlProp := oCtrl:aProp
   ENDIF
   oColumn := ::aColumns[2]
   cName := Lower( aProp[::cargo,1] )
   j := Ascan( aDataDef, {|a|a[1]==cName} )
   varbuf := Eval( oColumn:block,,Self,2 )

   IF ( j <> 0 .AND. aDataDef[ j,5 ] <> Nil ) .OR. aCtrlProp[ oBrw1:cargo,3 ] == "A"
      IF j <> 0 .AND. aDataDef[ j,5 ] <> Nil
         IF aDataDef[ j,5 ] == "color"
            varbuf := Hwg_ChooseColor( Val(varbuf),.F. )
            IF varbuf <> Nil
               varbuf := Ltrim( Str( varbuf ) )
               lRes := .T.
            ENDIF
         ELSEIF aDataDef[ j,5 ] == "font"
            varbuf := HFont():Select( varbuf )
            IF varbuf <> Nil
               lRes := .T.
            ENDIF
         ELSEIF aDataDef[ j,5 ] == "file"

            x1  := ::x1 + ::aColumns[1]:width - 2
               y1 := ::y1 + ( ::height+1 ) * ( ::rowPos - 1 )
            nWidth := Min( ::aColumns[2]:width, ::x2 - x1 - 1 )
            ReadExit( .T. )

           obrw1:bPosChanged:={|| VldBrwGet(oGet,oBtn)}




           oGet := HEdit():New( oBrw1,,varbuf, {|v|Iif(v==Nil,varbuf,varbuf:=v)}, 128,x1+14,y1-2,nWidth,::height+6,::oFont,,,, {||PostMessage( oBtn:handle,16,0,0 ),OgET:REFRESH()   ,.T.},,,,,, .F.,,.F.,,,,.F.,,.F.); oGet:name := "oGet"








           oBtn := HButton():New( oBrw1,,,x1,y1-2,13, ::height+6,"...",,,,,{|| (varbuf := IIF (aDataDef[ j,1 ] == "filename", SelectFile( "Animation Files( *.avi )", "*.avi"),IIF (aDataDef[ j,1 ] == "filedbf",  SelectFile( {"xBase Files( *.dbf)"," All Files( *.*)"},{ "*.dbf","*.*"}), SelectFile("Imagens Files( *.jpg;*.gif;*.bmp;*.ico )", "*.jpg;*.gif;*.bmp;*.ico")))),  IIF(!empty(varbuf),oGet:refresh(),nil)},,,,,.F. ); oBtn:name := "oBtn"




            SetFocus( obtn:handle )
            IF varbuf <> Nil
               lRes := .T.
            ENDIF
         ENDIF
      ELSE
         varbuf := EditArray( varbuf )
         IF varbuf <> Nil
            lRes := .T.
         ENDIF
      ENDIF

      IF lRes
         cName := Lower( aProp[ oBrw1:cargo,1 ] )
         j := Ascan( aDataDef, {|a|a[1]==cName} )
         value := aProp[ oBrw1:cargo,2 ] := varbuf
         aCtrlProp[ oBrw1:cargo,2 ] := value
         IF j <> 0 .AND. aDataDef[ j,3 ] <> Nil
            EvalCode( aDataDef[ j,3 ] )
            IF aDataDef[ j,4 ] <> Nil
               EvalCode( aDataDef[ j,4 ] )
            ENDIF
         ENDIF
         RedrawWindow( oCtrl:handle,5 )
         HFormGen():oDlgSelected:oParent:lChanged := .T.
         oBrw1:lUpdated := .T.
         oBrw1:Refresh()
      ENDIF
   ELSE
      x1  := ::x1 + ::aColumns[1]:width - 2
      y1 := ::y1 + ( ::height+1 ) * ( ::rowPos - 1 )
      nWidth := Min( ::aColumns[2]:width, ::x2 - x1 - 1 )

      ReadExit( .T. )
      IF ( j <> 0 .AND. aDataDef[ j,6 ] <> Nil ) .OR. aCtrlProp[ oBrw1:cargo,3 ] == "L"


         IF ( j <> 0 .AND. aDataDef[ j,6 ] <> Nil .AND.aDataDef[ j,6 ][1] = "@afields" )

            aItems := {" "}
            FOR i = 1 to 200
               cAlias := ALIAS(i)
               IF !EMPTY(ALIAS(i))
                  aItemsaux  := ARRAY(&(alias(i))->(FCOUNT()) )
                  &(alias(i))->(Afields(aItemsAux))
                  FOR k = 1 TO LEN(aItemsaux)
                     AADD(aitems,ALIAS(i) + "->" + aItemsAux[k])

                  NEXT
               ENDIF
            NEXT

         ELSEIF ( j <> 0 .AND. aDataDef[ j,6 ] <> Nil .AND.aDataDef[ j,6 ][1] = "@atags" )
               i := 1
                 aItems := {" "}
                 IF select(alias()) > 0
                    while !EMPTY(ORDNAME(i))
                        AADD(aItems,ORDNAME(i++))
                     ENDDO
                  ENDIF
             ELSE
             aItems := Iif( j <> 0 .AND. aDataDef[ j,6 ] <> Nil, aDataDef[ j,6 ], { "True","False" } )
         ENDIF
         varbuf := AllTrim(varbuf)
         nChoic := Ascan( aItems,varbuf )








         oGet := HComboBox():New( oBrw1,,nChoic,,2097152,x1,y1-2,nWidth, ::height + 6,aItems,::oFont,,,,,, .F.,.F.,,,, {||VldBrwGet(oGet)},,,,,,.F.); oGet:name := "oGet"
      ELSE




         oGet := HEdit():New( oBrw1,,varbuf, {|v|Iif(v==Nil,varbuf,varbuf:=v)}, 128,x1,y1-2,nWidth,::height+6,::oFont,,,,,{||VldBrwGet(oGet)},,,,, .F.,,.F.,,,,.F.,,.F.); oGet:name := "oGet"
      ENDIF
      SetFocus( oGet:handle )
   ENDIF
RETURN Nil

UTILITY STATIC function PBrowse_HeaderOut( hDC) ; local Self AS CLASS PBrowse := QSelf() AS CLASS PBrowse
Local i, x, fif, xSize
Local nRows := Min( ::nRecords,::rowCount ), oColumn
Local oPen := HPen():Add( 0,1,::sepColor )
Local oPenLight := HPen():Add( 0,1,GetSysColor(20) )
Local oPenGray  := HPen():Add( 0,1,GetSysColor(16) )

   x := ::x1
   fif := iif( ::freeze > 0, 1, ::nLeftCol )

   while x < ::x2 - 2
      oColumn := ::aColumns[fif]
      xSize := oColumn:width
      if fif == Len( ::aColumns )
         xSize := Max( ::x2 - x, xSize )
      endif
      if x > ::x1
         SelectObject( hDC, oPenLight:handle )
         DrawLine( hDC, x-1, ::y1+1, x-1, ::y1+(::height+1)*nRows )
         SelectObject( hDC, oPenGray:handle )
         DrawLine( hDC, x-2, ::y1+1, x-2, ::y1+(::height+1)*nRows )
      endif
      x += xSize
      fif := IIF( fif = ::freeze, ::nLeftCol, fif + 1 )
      if fif > Len( ::aColumns )
         exit
      endif
   enddo

   SelectObject( hDC, oPen:handle )
   FOR i := 1 to nRows
      DrawLine( hDC, ::x1, ::y1+(::height+1)*i, iif(::lAdjRight, ::x2, x), ::y1+(::height+1)*i )
   NEXT

   oPen:Release()

RETURN Nil




Static Function VldBrwGet( oGet ,oBtn)
Local vari, j, cName
Memvar Value, oCtrl, oDesigner
Private value, oCtrl := Iif( oCombo:value == 1, HFormGen():oDlgSelected, GetCtrlSelected( HFormGen():oDlgSelected ) )

   cName := Lower( aProp[ oBrw1:cargo,1 ] )

   j := Ascan( oDesigner:aDataDef, {|a|a[1]==cName} )

   IF oGet:Classname() == "HCOMBOBOX"
      vari := SendMessage( oGet:handle,327,0,0 ) + 1
      value := aProp[ oBrw1:cargo,2 ] := oGet:aItems[ vari ]
   ELSE
      vari := TRIM(oGet:GetText())
      value := aProp[ oBrw1:cargo,2 ] := vari
   ENDIF
   IF oCombo:value == 1
      oCtrl:oParent:aProp[ oBrw1:cargo,2 ] := value
   ELSE
      oCtrl:aProp[ oBrw1:cargo,2 ] := value
   ENDIF
   IF j <> 0 .AND. oDesigner:aDataDef[ j,3 ] <> Nil

      EvalCode( oDesigner:aDataDef[ j,3 ] )
      IF oDesigner:aDataDef[ j,4 ] <> Nil
         EvalCode( oDesigner:aDataDef[ j,4 ] )
      ENDIF
   ENDIF
   RedrawWindow( oCtrl:handle,5 )
   HFormGen():oDlgSelected:oParent:lChanged := .T.
   oBrw1:lUpdated := .T.
   oBrw1:aEvents := {}
   oBrw1:aNotify := {}
   oBrw1:aControls := {}
   PostMessage( oGet:handle,16,0,0 )

   IF VALTYPE(obtn) = "O"
     PostMessage( oBtn:handle,16,0,0 )
   ENDIF
   obrw1:bPosChanged:= nil




Return .T.

Function InspOpen(lShow)
Local nStilo := 0
Memvar oDesigner




   lShow := IIF(VALTYPE(lShow) <> "U",lShow, .T.)
   nStilo := 12582912+262144+128 + 268435456








   oDesigner:oDlgInsp := HDialog():New( Iif(.F.,10,11), nStilo,0,280,220,300,"Object Inspector",HFont():Add( "MS Sans Serif",0,-12,400,,,),{||IIF(!lshow,oDesigner:oDlgInsp:hide(),),MoveWindow(oDesigner:oDlgInsp:handle,0,134,280,410)},{||oDesigner:oDlgInsp:=Nil,CheckMenuItem(oDesigner:oMainWnd:handle,1010,.F.),.T.},,,{|o| o:show(),.T.},,{|o,m,wp,lp|MessagesOthers(o,m,wp,lp)},.F.,,,.F.,,,.F.,,, .F.,.F.)




   oCombo := HComboBox():New(,,,,2097152,0,0,220, 22,{},,,{|o,x|MoveWindow(o:handle,0,0,x,250)},,{||ComboOnChg()},, .F.,.F.,,,,,,,,,,.F.); oCombo:name := "oCombo"


   oTab := HTab():New(,,,0,28,220, 250,,,{|o,x,y|MoveWindow(o:handle,0,28,x,y-28)},,{},,, .F.,,,,,,.F. ) ; oTab:name := "oTab"

   oTab:StartPage( "Properties", ,! .F. ,,,,.F. )

      oBrw1 := PBrowse():New( Iif(.F.,2,Iif(.T.,1,0)),,,2097152,2,30,214,218,,,{|o,x,y|MoveWindow(o:handle,2,30,x-6,y-32)},,,,,.F.,.F., .F., .F.,, )
         setdlgkey(oDesigner:oDlgInsp,0,0x2E,{|| ResetToDefault(oBrw1)} )

      oBrw1:tColor := GetSysColor( 18 )
      oBrw1:tColorSel := 8404992
      oBrw1:bColor := oBrw1:bColorSel := GetSysColor( 15 )
      oBrw1:freeze := 1
      oBrw1:lDispHead := .F.
      oBrw1:lSep3d := .T.
      oBrw1:sepColor  := GetSysColor( 16 )
      oBrw1:aArray := aProp
      oBrw1:AddColumn( HColumn():New( ,{|v,o| ( (v) := (v) ),Iif(Empty(o:aArray[o:nCurrent,1]),"","  "+o:aArray[o:nCurrent,1])},"C",12,0,.T. ) )
      oBrw1:AddColumn( HColumn():New( ,ColumnArBlock(),"U",100,0,.T. ) )
   oTab:EndPage()

   oTab:StartPage( "Events", ,! .F. ,,,,.F. )

      oBrw2 := PBrowse():New( Iif(.F.,2,Iif(.T.,1,0)),,,2097152,2,30,214,218,,,{|o,x,y|MoveWindow(o:handle,2,30,x-6,y-32)},,,,,.F.,.F., .F., .F.,, )
      oBrw2:tColor := GetSysColor( 18 )
      oBrw2:tColorSel := 8404992
      oBrw2:bColor := oBrw2:bColorSel := GetSysColor( 15 )
      oBrw2:freeze := 1
      oBrw2:lDispHead := .F.
      oBrw2:lSep3d := .T.
      oBrw2:sepColor  := GetSysColor( 16 )
      oBrw2:aArray := aMethods
      oBrw2:AddColumn( HColumn():New( ,{|v,o|( (v) := (v) ),Iif(Empty(o:aArray[o:nCurrent,1]),"","  "+o:aArray[o:nCurrent,1])},"C",12,0,.T. ) )
      oBrw2:AddColumn( HColumn():New( ,{|v,o|( (v) := (v) ),Iif(Empty(o:aArray[o:nCurrent,2]),"",":"+o:aArray[o:nCurrent,1])},"C",100,0,.T. ) )
   oTab:EndPage()




   HButton():New(,,,190,25,50, 23,"Close",,,{|o,x|o:Move(x-52,,,)},,{|| oDesigner:oDlgInsp:close()},,,,,.F. );


   oMenuisnp := Hwg_ContextMenu()
      Hwg_DefineMenuItem( "AlwaysOnTop",, {|| ActiveTopMost( oDesigner:oDlgInsp:Handle, .T. )}, .F.,,,, .F., .F.,.F. )

      Hwg_DefineMenuItem( "Normal",, {|| ActiveTopMost( oDesigner:oDlgInsp:Handle, .F. )}, .F.,,,, .F., .F.,.F. )

      Hwg_DefineMenuItem( "Hide",, {|| oDesigner:oDlgInsp:close()}, .F.,,,, .F., .F.,.F. )
    Hwg_EndMenu()

   oDesigner:oDlgInsp:Activate(.T.,,,.F. )
   CheckMenuItem(oDesigner:oMainWnd:handle,1010,.T.)

   InspSetCombo()

   oDesigner:oDlgInsp:AddEvent( 0,1,{||DlgOk()} )
   oDesigner:oDlgInsp:AddEvent( 0,2,{||DlgCancel()} )

Return Nil


Static Function DlgOk()

   IF !Empty( oBrw1:aControls )
      VldBrwGet( oBrw1:aControls[1] )
   ENDIF
Return Nil

Static Function DlgCancel()

   IF !Empty( oBrw1:aControls )
      oBrw1:aEvents := {}
      oBrw1:aNotify := {}
      PostMessage( oBrw1:aControls[1]:handle,16,0,0 )
      oBrw1:aControls := {}


   ENDIF
Return Nil

Function InspSetCombo()
Local i, aControls, oCtrl, n := -1, oDlg := HFormGen():oDlgSelected
Memvar oDesigner

   oCombo:aItems := {}
   IF oDlg <> Nil
      n := 0
      Aadd( oCombo:aItems, "Form." + oDlg:title )
      oCtrl := GetCtrlSelected( oDlg )

      aControls := Iif( oDesigner:lReport, oDlg:aControls[1]:aControls[1]:aControls,  oDlg:aControls )
      FOR i := 1 TO Len( aControls )
        if ( oDesigner:lReport )
            Aadd( oCombo:aItems, aControls[i]:cClass + "." + Iif(aControls[i]:title<>Nil,Left(aControls[i]:title,15),Ltrim(str(aControls[i]:id)) ) )
        else
            Aadd( oCombo:aItems, aControls[i]:cClass + "." + aControls[i]:GetProp("Name",2) )
        endif
        IF oCtrl <> Nil .AND. oCtrl:handle == aControls[i]:handle
            n := i
        ENDIF
      NEXT
   ENDIF
   oCombo:Requery()
   oCombo:SetItem(n + 1)




   InspSetBrowse()
Return Nil

Function InspUpdCombo( n )
Local aControls, i
Memvar oDesigner

   IF n > 0


      aControls := Iif( oDesigner:lReport,  HFormGen():oDlgSelected:aControls[1]:aControls[1]:aControls,  HFormGen():oDlgSelected:aControls )
      i := Len( aControls )
      IF i >= Len( oCombo:aItems )
   if ( oDesigner:lReport )
      Aadd( oCombo:aItems, aControls[i]:cClass + "." + Iif(aControls[i]:title<>Nil,Left(aControls[i]:title,15),Ltrim(str(aControls[i]:id)) ) )
   else
      Aadd( oCombo:aItems, aControls[i]:cClass + "." + aControls[i]:GetProp("Name",2) )
   endif

      ELSEIF i + 1 < Len( oCombo:aItems )
         Return InspSetCombo()
      ENDIF
   ENDIF
   oCombo:Requery()
   oCombo:SetItem(n + 1)




   InspSetBrowse()
Return Nil

Static Function ComboOnChg()
Memvar oDesigner
Local oDlg := HFormGen():oDlgSelected, oCtrl, n
Local aControls := Iif( oDesigner:lReport,oDlg:aControls[1]:aControls[1]:aControls,oDlg:aControls )

   oCombo:value := SendMessage( oCombo:handle,327,0,0 ) + 1
   IF oDlg <> Nil
      n := oCombo:value - 1
      oCtrl := GetCtrlSelected( oDlg )
      IF n == 0
         IF oCtrl <> Nil
            SetCtrlSelected( oDlg )
         ENDIF
      ELSEIF n > 0
         IF oCtrl == Nil .OR. oCtrl:handle <> aControls[n]:handle
            SetCtrlSelected( oDlg,aControls[n],n )
         ENDIF
      ENDIF
   ENDIF
Return .T.

Static Function InspSetBrowse()
Local i, o, nRow:=1

   IF oBrw1 <> Nil
          nRow:=oBrw1:rowPos
    ENDIF
   aProp := {}
   aMethods := {}

   IF oCombo:value > 0
      o := Iif( oCombo:value == 1, HFormGen():oDlgSelected:oParent, GetCtrlSelected( HFormGen():oDlgSelected ) )
      FOR i := 1 TO Len( o:aProp )
         IF Len( o:aProp[i] ) == 3
            Aadd( aProp, { o:aProp[i,1], o:aProp[i,2] } )
         ENDIF
      NEXT
      FOR i := 1 TO Len( o:aMethods )
         Aadd( aMethods, { o:aMethods[i,1], o:aMethods[i,2] } )
      NEXT
   ENDIF

   oBrw1:aArray := aProp
   oBrw2:aArray := aMethods

   Eval( oBrw1:bGoTop,oBrw1 )
   Eval( oBrw2:bGoTop,oBrw2 )
   oBrw1:rowPos := 1
   oBrw2:rowPos := 1
   oBrw1:Refresh()
   oBrw2:Refresh()

Return Nil

Function InspUpdBrowse()
Local i, lChg := .F.
Memvar value, oCtrl, oDesigner
Private value, oCtrl

   IF oCombo == Nil
      Return Nil
   ENDIF

   oCtrl := Iif( oCombo:value == 1, HFormGen():oDlgSelected, GetCtrlSelected( HFormGen():oDlgSelected ) )
   IF oDesigner:oDlgInsp <> Nil
      FOR i := 1 TO Len( aProp )
         value := Iif( oCombo:value == 1,oCtrl:oParent:aProp[ i,2 ],oCtrl:aProp[ i,2 ] )

         IF Valtype(aProp[ i,2 ]) <> "O" .AND. Valtype(aProp[ i,2 ]) <> "A"  .AND. ( aProp[ i,2 ] == Nil .OR. !( aProp[ i,2 ] == value ) )
            aProp[ i,2 ] := value
            lChg := .T.
         ENDIF
      NEXT
      IF lChg .AND. !oBrw1:lHide
         oBrw1:Refresh()


         statusbarmsg(,"x: "+ltrim(str(oCtrl:nLeft))+"  y: "+ltrim(str(oCtrl:nTop)), "w: "+ltrim(str(oCtrl:nWidth))+" h: "+ltrim(str(oCtrl:nHeight)))

      ENDIF
   ENDIF

Return Nil

Function InspUpdProp( cName, xValue )
Local i

   cName := Lower( cName )
   IF ( i := Ascan( aProp, {|a|Lower(a[1])==Lower(cName)} ) ) > 0
      aProp[ i,2 ] := xValue
      oBrw1:Refresh()
   ENDIF

Return Nil

Static Function EditArray( arr )
Local oDlg, oBrw, nRec := Eval( oBrw1:bRecno,oBrw1 ),arrold:={}
Memvar oDesigner

   IF arr == Nil
      arr := {}
   ENDIF
   IF Empty( arr )
      Aadd( arr,"....." )
   ENDIF
   arrold := arr

   oDlg := HDialog():New( Iif(.F.,10,11),,300,280,400,300,"Edit "+aProp[nRec,1]+" array",oDesigner:oMainWnd:oFont,,,,,,,,.F.,,,.F.,,,.F.,,, .F.,.F.)


   oBrw := HBrowse():New( Iif(.F.,2,Iif(.T.,1,0)),,,,0,0,400,255,,,{|o,x,y|o:Move(,,x,y-45)},,,,,.F.,.F., .F., .F.,,,, .F., .F.,,,,,,,,,,, .F. ); oBrw:name := "oBrw"
    oBrw:acolumns:={}
   oBrw:bcolor := 15132390
   oBrw:bcolorSel := VColor( "008000" )
   oBrw:lAppable := .T.
   oBrw:aArray := arr
   oBrw:AddColumn( HColumn():New( ,{|v,o|Iif(v<>Nil,o:aArray[o:nCurrent]:=v,o:aArray[o:nCurrent])},"C",100,0,.T. ) )



   HButton():New(,,,21,265,110, 26,"Delete Item",,,{|o,x,y|( (x) := (x) ),o:Move(,y-30,,)},,{|| onclick_deleteItem(oBrw)},,,,,.F. );


   HButton():New(,,,151,265,110, 26,"Ok",,,{|o,x,y|( (x) := (x) ),o:Move(,y-30,,)},,{||oDlg:lResult:=.T.,EndDialog()},,,,,.F. );

   HButton():New(,2,,276,265,110, 26,"Cancel",,,{|o,x,y|( (x) := (x) ),o:Move(,y-30,,)},,,,,,,.F. );

   oDlg:Activate(.F.,,,.F. )

   IF oDlg:lResult
      IF Len( arr ) == 1 .AND. arr[1] == "....."
         arr := Nil
      ENDIF
      Return arr
   ENDIF

Return Nil


STATIC FUNCTION onclick_deleteitem(oBrw)
  IF oBrw:nCurrent = 1 .AND. oBrw:aArray[oBrw:nCurrent] = ".."
    RETURN nil
  ENDIF
  IF len(obrw:aArray) > 0 .AND. msgyesno("Confirm item deleted : [ "+oBrw:aArray[oBrw:nCurrent]+" ] ?","Items")
     oBrw:aArray := ADEL(obrw:aArray,oBrw:nCurrent)
     obrw:aArray := ASIZE(obrw:aArray,len(obrw:aArray)-1)
     obrw:refresh()
  ENDIF
RETURN nil

Function ObjInspector(oObject )

   Local opForm, oBrw, oBrw2
   Local nLeft:=0, nTop, nLin, oPage1,i
   Local oBtn1, cType
    Local aClassMsgMtdo, aClassMsgProp

   IF oObject = Nil
      oObject := HFormGen():oDlgSelected
   ENDIF

   aClassMsgMtdo := __objGetMethodList(oObject)



   aClassMsgProp := __ObjGetValueDiff( oObject)

   For i = 1 to len(aClassMsgProp)
     ctype := VALTYPE(aClassMsgProp[i,2])
     do case
       CASE ctype="C"
       CASE ctype="N"
       aClassMsgProp[i,2] := str(aClassMsgProp[i,2])
       CASE ctype="L"
       aClassMsgProp[i,2] := iif(aClassMsgProp[i,2],"True","False")
       otherwise
       aClassMsgProp[i,2] := ctype
     endcase
   Next







   opForm := HDialog():New( Iif(.F.,10,11), 4194304 + 524288 + 2048,0,0,600,400,"Methods and Properties",HFont():Add( "Arial", 0, -11 ),,,,,,,,.F.,,,.T.,,,.F.,,, .F.,.F.)

    nTop = 4
   nLeft += 15



   oBtn1 := HButton():New(,,,nLeft,nTop,80, 25,"&Exit",,,,,{ || EndDialog() },,,,,.F. ); oBtn1:name := "oBtn1"

  HStatic():New(,,,nLeft + 150,ntop+2,200, 24,"Object: " + "oObject",,,,,,,,.F.,,,,.F. );
   nLin = nTop + 30

  oPage1 := HTab():New(,,,6,nlin-5,580, 360,,,,,{},,, .F.,,,,,,.F. ) ; oPage1:name := "oPage1"
  oPage1:StartPage( " Properties ", ,! .F. ,,,,.F. )


   oBrw := HBrowse():New( Iif(.F.,2,Iif(.T.,1,0)),,,2097152 + 1048576,010,nLin,570,300,,,,,,,,.F.,.F., .F., .F.,,,, .F., .F.,,,,,,,,,,, .F. ); oBrw:name := "oBrw"

   CreateArList( oBrw, aClassMsgProp )

   oBrw:aColumns[ 1 ]:length = 30
   oBrw:aColumns[ 1 ]:heading = " Property "
   oBrw:aColumns[ 2 ]:length = 10
   oBrw:aColumns[ 2 ]:heading = " Value "

   oPage1:EndPage()

   oPage1:StartPage( " Methods ", ,! .F. ,,,,.F. )


      oBrw2 := HBrowse():New( Iif(.F.,2,Iif(.T.,1,0)),,,2097152 + 1048576,010,nLin,570,300,,,,,,,,.F.,.F., .F., .F.,,,, .F., .F.,,,,,,,,,,, .F. ); oBrw2:name := "oBrw2"

   CreateArList( oBrw2, aClassMsgMtdo )

   oBrw2:aColumns[ 1 ]:length = 10
   oBrw2:aColumns[ 1 ]:heading = "Methods"

    oPage1:EndPage()

   opForm:Activate()

   RETURN NIL


STATIC Function MessagesOthers( oDlg, msg, wParam, lParam )
Memvar oDesigner

( (lParam) := (lParam) )


   IF msg == 512

      Return 1
   ELSEIF msg == 513

      Return 1
   ELSEIF msg == 514

      Return 1
   ELSEIF msg == 517

        oMenuisnp:Show( oDlg,oDlg:nTop+5,oDlg:nLeft+15,.T. )
      Return 1
   ELSEIF msg == 515
      oDlg:hide()

      Return 1
   ELSEIF msg == 3
   ELSEIF msg == 256
      IF wParam == 46
         DeleteCtrl()
      ENDIF
   ELSEIF msg == 257
   ENDIF

Return -1

FUNCTION ActiveTopMost( nHandle, lActive )
Local lSucess
  nHandle:=GetActiveWindow()

  IF lActive
       lSucess := SetTopMost(nHandle)
  ELSE
       lSucess := RemoveTopMost(nHandle)
  ENDIF

RETURN lSucess

STATIC Function resettodefault(oBrw1)
Local j, cName
Memvar oDesigner, value, oCtrl
Private value,oCtrl := Iif( oCombo:value == 1, HFormGen():oDlgSelected, GetCtrlSelected( HFormGen():oDlgSelected ) )


     cName := Lower(aProp[ oBrw1:nCurrent,1 ] )
     j := Ascan( oDesigner:aDataDef, {|a|a[1]==cName} )
     IF j = 0 .OR. aProp[ oBrw1:nCurrent,2 ] = Nil
       return Nil
     ENDIF
     IF ltrim(oBrw1:aArray[oBrw1:nCurrent,1]) = "Font"
        value := aProp[ oBrw1:nCurrent,2 ]
        value:name := ""
     ELSE
        value := aProp[ oBrw1:nCurrent,2 ]

     ENDIF
     IF j <> 0 .AND. oDesigner:aDataDef[ j,3 ] <> Nil
        EvalCode( oDesigner:aDataDef[ j,3 ] )
        IF oDesigner:aDataDef[ j,4 ] <> Nil
           EvalCode( oDesigner:aDataDef[ j,4 ] )
        ENDIF
     ENDIF
     RedrawWindow( oCtrl:handle,5 )
     HFormGen():oDlgSelected:oParent:lChanged := .T.
     oBrw1:lUpdated := .T.
     oBrw1:Refresh()

 return nil

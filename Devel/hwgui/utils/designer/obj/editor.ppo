#line 112 "d:\devel\xharbour_bcc7\include\hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 19 "source\editor.prg"
Static oDlg, oEdit, cIniName
Static nTextLength

_HB_CLASS HDTheme ; UTILITY FUNCTION HDTheme(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HDTheme" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { aThemes} ; IIF( !.F., s_oClass:AddMultiClsData(, {}, nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "aThemes" }, .F. ), )
   _HB_MEMBER { nSelected} ; IIF( !.F., s_oClass:AddMultiClsData(,, nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "nSelected" }, .F. ), )
   _HB_MEMBER { oFont} ; IIF( !.F., s_oClass:AddMultiClsData(,, nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "oFont" }, .F. ), )
   _HB_MEMBER { lChanged} ; IIF( !.F., s_oClass:AddMultiClsData(, .F., nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "lChanged" }, .F. ), )
   _HB_MEMBER { aKeyWords} ; IIF( !.F., s_oClass:AddMultiClsData(,, nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "aKeyWords" }, .F. ), )
   _HB_MEMBER { name} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "name" }, .F., .F. ), )
   _HB_MEMBER { normal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "normal" }, .F., .F. ), )
   _HB_MEMBER { command} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "command" }, .F., .F. ), )
   _HB_MEMBER { comment} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "comment" }, .F., .F. ), )
   _HB_MEMBER { quote} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "quote" }, .F., .F. ), )
   _HB_MEMBER { number} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "number" }, .F., .F. ), )

   _HB_MEMBER New(name); IIF( .F., s_oClass:ModInline( "New", {|Self,name | Self, ( ::name:=name, Self ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "New", {|Self,name | Self, ( ::name:=name, Self ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Add(name); IIF( .F., s_oClass:ModInline( "Add", {|Self,name | Self, ( ::name:=name,Aadd(::aThemes,Self),Self ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Add", {|Self,name | Self, ( ::name:=name,Aadd(::aThemes,Self),Self ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HDTheme ;

Function LoadEdOptions( cFileName )
Local oIni := HXMLDoc():Read( cFileName )
Local i, j, j1, cTheme, oTheme, oThemeXML, arr, oOptDesc

   cIniName := cFileName
   oOptDesc := oIni:aItems[1]
   FOR i := 1 TO Len( oOptDesc:aItems )
      IF oOptDesc:aItems[i]:title == "font"
         HDTheme():oFont := hfrm_FontFromxml( oOptDesc:aItems[i] )
      ELSEIF oOptDesc:aItems[i]:title == "keywords"
         HDTheme():aKeyWords := hfrm_Str2Arr( oOptDesc:aItems[i]:aItems[1] )
      ELSEIF oOptDesc:aItems[i]:title == "themes"
         cTheme := oOptDesc:aItems[i]:GetAttribute( "selected" )
         FOR j := 1 TO Len( oOptDesc:aItems[i]:aItems )
            oThemeXML := oOptDesc:aItems[i]:aItems[j]
            oTheme := HDTheme():Add( oThemeXML:GetAttribute( "name" ) )
            IF oTheme:name == cTheme
               HDTheme():nSelected := j
            ENDIF
            FOR j1 := 1 TO Len( oThemeXML:aItems )



               arr := { oThemeXML:aItems[j1]:GetAttribute("tcolor"),  oThemeXML:aItems[j1]:GetAttribute("bcolor"),  oThemeXML:aItems[j1]:GetAttribute("bold"),    oThemeXML:aItems[j1]:GetAttribute("italic") }
               IF arr[1] <> Nil
                  arr[1] := Val( arr[1] )
               ENDIF
               IF arr[2] <> Nil
                  arr[2] := Val( arr[2] )
               ENDIF
               arr[3] := ( arr[3] <> Nil )
               arr[4] := ( arr[4] <> Nil )
               IF oThemeXML:aItems[j1]:title == "normal"
                  oTheme:normal := arr
               ELSEIF oThemeXML:aItems[j1]:title == "command"
                  oTheme:command := arr
               ELSEIF oThemeXML:aItems[j1]:title == "comment"
                  oTheme:comment := arr
               ELSEIF oThemeXML:aItems[j1]:title == "quote"
                  oTheme:quote := arr
               ELSEIF oThemeXML:aItems[j1]:title == "number"
                  oTheme:number := arr
               ENDIF
            NEXT
         NEXT
      ENDIF
   NEXT
Return Nil

Function SaveEdOptions( oOptDesc )
Local oIni := HXMLDoc():Read( m->cCurDir+cIniName )
Local i, oNode, nStart, oThemeDesc, aAttr

( (oOptDesc) := (oOptDesc) )

   oNode := oIni:aItems[1]
   nStart := 1
   IF oNode:Find( "font",@nStart ) == Nil
      oNode:Add( Font2XML( HDTheme():oFont ) )
   ELSE
      oNode:aItems[nStart] := Font2XML( HDTheme():oFont )
   ENDIF
   IF oNode:Find( "themes",@nStart ) <> Nil
      oNode := oNode:aItems[nStart]
      oNode:SetAttribute( "selected", HDTheme():aThemes[HDTheme():nSelected]:name )
      oNode:aItems := {}
      FOR i := 1 TO Len( HDTheme():aThemes )
         oThemeDesc := oNode:Add( HXMLNode():New( "theme",,{ {"name",HDTheme():aThemes[i]:name} } ) )

         aAttr := { {"tcolor",Ltrim(Str(HDTheme():aThemes[i]:normal[1]))},  {"bcolor",Ltrim(Str(HDTheme():aThemes[i]:normal[2]))} }
         IF HDTheme():aThemes[i]:normal[3]
            Aadd( aAttr, { "bold","True" } )
         ENDIF
         IF HDTheme():aThemes[i]:normal[4]
            Aadd( aAttr, { "italic","True" } )
         ENDIF
         oThemeDesc:Add( HXMLNode():New( "normal",1,aAttr ) )

         aAttr := { {"tcolor",Ltrim(Str(HDTheme():aThemes[i]:command[1]))} }
         IF HDTheme():aThemes[i]:command[3]
            Aadd( aAttr, { "bold","True" } )
         ENDIF
         IF HDTheme():aThemes[i]:command[4]
            Aadd( aAttr, { "italic","True" } )
         ENDIF
         oThemeDesc:Add( HXMLNode():New( "command",1,aAttr ) )

         aAttr := { {"tcolor",Ltrim(Str(HDTheme():aThemes[i]:comment[1]))} }
         IF HDTheme():aThemes[i]:comment[3]
            Aadd( aAttr, { "bold","True" } )
         ENDIF
         IF HDTheme():aThemes[i]:comment[4]
            Aadd( aAttr, { "italic","True" } )
         ENDIF
         oThemeDesc:Add( HXMLNode():New( "comment",1,aAttr ) )

         aAttr := { {"tcolor",Ltrim(Str(HDTheme():aThemes[i]:quote[1]))} }
         IF HDTheme():aThemes[i]:quote[3]
            Aadd( aAttr, { "bold","True" } )
         ENDIF
         IF HDTheme():aThemes[i]:quote[4]
            Aadd( aAttr, { "italic","True" } )
         ENDIF
         oThemeDesc:Add( HXMLNode():New( "quote",1,aAttr ) )

         aAttr := { {"tcolor",Ltrim(Str(HDTheme():aThemes[i]:number[1]))} }
         IF HDTheme():aThemes[i]:number[3]
            Aadd( aAttr, { "bold","True" } )
         ENDIF
         IF HDTheme():aThemes[i]:number[4]
            Aadd( aAttr, { "italic","True" } )
         ENDIF
         oThemeDesc:Add( HXMLNode():New( "number",1,aAttr ) )

      NEXT
   ENDIF
   oIni:Save( m->cCurDir+cIniName )

Return Nil

Function EditMethod( cMethName, cMethod )
 Local i, lRes := .F., dummy
 Local oFont := HDTheme():oFont
 Local cParamString
 Memvar oDesigner

   i := Ascan( oDesigner:aMethDef, {|a|a[1]==Lower(cMethName)} )
   cParamString := Iif( i == 0, "", oDesigner:aMethDef[i,2] )





   oDlg := HDialog():New( Iif(.F.,10,11), 2147483648+268435456+12582912+524288+65536+262144,100,240,600,300,"Edit '"+cMethName+"' method",oDesigner:oMainWnd:oFont,{||MoveWindow(oDlg:handle,100,240,600,310)},{|| dummy := Iif(lRes:=(oEdit:lChanged.AND.MsgYesNo("Code was changed! Save it?", "Designer")),cMethod:=oEdit:GetText(),.F.),.T.},,,,,,.F.,,,.F.,,,.F.,,, .F.,.F.)

   Hwg_BeginMenu( oDlg,,,,,,.F. )
      Hwg_BeginMenu(,, "&Options",,,,.F. )
         Hwg_DefineMenuItem( "&Font",, {|| editChgFont()}, .F.,,,, .F., .F.,.F. )
         Hwg_BeginMenu(,, "&Select theme",,,,.F. )
            FOR i := 1 TO Len( HDTheme():aThemes )
               Hwg_DefineMenuItem( HDTheme():aThemes[i]:name, 1020+i, &( "{||ChangeTheme("+LTrim(Str(i,2))+"),HDTheme():lChanged:=.T.}" ) )
            NEXT
         Hwg_EndMenu()
         Hwg_DefineMenuItem( "&Configure",, {|| EditColors()}, .F.,,,, .F., .F.,.F. )
      Hwg_EndMenu()

      Hwg_DefineMenuItem( "&Parameters",, {|| Iif(!Empty(cParamString).AND.Upper(Left(oEdit:Gettext(),10))<>"PARAMETERS",(editShow("Parameters "+cParamString+Chr(10)+oEdit:Gettext()),oEdit:lChanged:=.T.),.F.)}, .F.,,,, .F., .F.,.F. )

      Hwg_BeginMenu(,, "&Templates "+cMethName,,,,.F. )

         Hwg_DefineMenuItem( "&Insert Field",, {|| InsertField(1)}, .F.,,,, .F., .F.,.F. )
         Hwg_DefineMenuItem( "&Field:=xVarField",, {|| InsertField(0)}, .F.,,,, .F., .F.,.F. )

      Hwg_EndMenu()

      Hwg_DefineMenuItem( "&Exit",, {|| oDlg:Close()}, .F.,,,, .F., .F.,.F. )
   Hwg_EndMenu()






   oEdit := HRichEdit():New(,,cMethod,1048576+2097152+0+4+4096,0,0,400, oDlg:nHeight,oFont,{||ChangeTheme( HDTheme():nSelected )},{|o,x,y|o:Move(,,x,y)},,{||Iif(oEdit:cargo,(SendMessage(oEdit:handle,177,0,0),oEdit:cargo:=.F.),.F.)},,,,,, .F.,,.F. ); oEdit:name := "oEdit"

   oEdit:cargo := .T.






   oDlg:Activate(.F.,,,.F. )

   IF lRes
      Return cMethod
   ENDIF
Return Nil

Function ChangeTheme( nTheme )

   IF HDTheme():nSelected <> Nil
      CheckMenuItem( oDlg:handle,1020+HDTheme():nSelected, .F. )
   ENDIF
   CheckMenuItem( oDlg:handle,1020+nTheme, .T. )
   HDTheme():nSelected := nTheme
   editShow( ,.T. )
Return Nil

Static Function editChgFont()
Local oFont

   IF ( oFont := HFont():Select( oEdit:oFont ) ) <> Nil
       oEdit:oFont := oFont
       SetWindowFont( oEdit:handle,oFont:handle )
       editShow( ,.T. )

       HDTheme():oFont := oFont
       HDTheme():lChanged := .T.
   ENDIF
Return Nil




Static Function editShow( cText,lRedraw )
Local arrHi, oTheme := HDTheme():aThemes[HDTheme():nSelected]

   IF lRedraw <> Nil .AND. lRedraw

      nTextLength := SendMessage( oEdit:handle, 14, 0, 0 ) + 1
      cText := re_GetTextRange( oEdit:handle,1,nTextLength )
   ELSE
      IF cText == Nil
         cText := oEdit:title
      ENDIF
      nTextLength := Len( cText )
   ENDIF
   SendMessage( oEdit:handle, 1093, 0, 0 )
   re_SetDefault( oEdit:handle,oTheme:normal[1],oEdit:oFont:name,,oTheme:normal[3],oTheme:normal[4],,oEdit:oFont:charset )
   SendMessage( oEdit:handle,1091,0,oTheme:normal[2] )
   oEdit:SetText( cText )
   cText := re_GetTextRange( oEdit:handle,1,nTextLength )
   IF !Empty( arrHi := CreateHiLight( cText ) )
      re_SetCharFormat( oEdit:handle,arrHi )
   ENDIF
   SendMessage( oEdit:handle, 1093, 0, 1 + 524288 )
   oEdit:oParent:AddEvent( 768,oEdit:id,{||EnChange(2)} )

Return Nil

Static Function EnChange( nEvent )
Local pos := SendMessage( oEdit:handle, 176, 0, 0 )
Local nLength, pos1 := Loword(pos)+1, pos2 := Hiword(pos)+1
Local cBuffer, nLine, arr := {}, nLinePos
Local oTheme := HDTheme():aThemes[HDTheme():nSelected]
Local  nEditPos1, nEditPos2

   IF nEvent == 1
      nEditPos1 := pos1
      nEditPos2 := pos2
   ELSE
      SendMessage( oEdit:handle, 1093, 0, 0 )
      nLength := SendMessage( oEdit:handle, 14, 0, 0 )
      IF nLength - nTextLength > 2

      ELSE
         nLine := SendMessage( oEdit:handle, 201, -1, 0 )
         cBuffer := re_getline( oEdit:handle,nLine )

         nLinePos := SendMessage( oEdit:handle, 187, nLine, 0 ) + 1

         Aadd( arr, { nLinePos,nLinePos+Len(cBuffer),  oTheme:normal[1],,,oTheme:normal[3],oTheme:normal[4], } )
         HiLightString( cBuffer, arr, nLinePos )
         IF !Empty( arr )
            re_SetCharFormat( oEdit:handle,arr )
         ENDIF
      ENDIF
      IF nTextLength <> nLength
         oEdit:lChanged := .T.
      ENDIF
      nTextLength := nLength
      SendMessage( oEdit:handle, 1093, 0, 1 + 524288 )
   ENDIF

Return Nil

Static Function CreateHilight( cText,oTheme )
Local arr := {}, nPos, nLinePos := 1

   while .T.

      IF ( nPos := At( Chr(10), cText, nLinePos ) ) <> 0 .OR. ( nPos := At( Chr(13), cText, nLinePos ) ) <> 0



         HiLightString( SubStr( cText,nLinePos,nPos-nLinePos ), arr, nLinePos,oTheme )
         nLinePos := nPos + 1
      ELSE
         HiLightString( SubStr( cText,nLinePos ), arr, nLinePos,oTheme )
         EXIT
      ENDIF
   ENDDO
Return arr

Static Function HiLightString( stroka, arr, nLinePos, oTheme )
Local nStart, nPos := 1, sLen := Len( stroka ), cWord

   IF oTheme == Nil
      oTheme := HDTheme():aThemes[HDTheme():nSelected]
   ENDIF

   IF Left( Ltrim( stroka ), 2 ) == "//"

      Aadd( arr, { nLinePos,nLinePos+Len(stroka),  oTheme:comment[1],,,oTheme:comment[3],oTheme:comment[4], } )
      Return arr
   ENDIF
   Set( 1, "ON" )
   while nPos < sLen
      cWord := NextWord( stroka,@nPos,@nStart )

      IF !Empty( cWord )
         IF Left( cWord,1 ) == '"' .OR. Left( cWord,1 ) == "'"

            Aadd( arr, { nLinePos+nStart-1,nLinePos+nPos-1,  oTheme:quote[1],,,oTheme:quote[3],oTheme:quote[4], } )
         ELSEIF Ascan( HDTheme():aKeyWords,Upper(cWord) ) <> 0

            Aadd( arr, { nLinePos+nStart-1,nLinePos+nPos-1,  oTheme:command[1],,,oTheme:command[3],oTheme:command[4], } )
         ELSEIF IsDigit( cWord )

            Aadd( arr, { nLinePos+nStart-1,nLinePos+nPos-1,  oTheme:number[1],,,oTheme:number[3],oTheme:number[4], } )
         ENDIF
      ENDIF
   ENDDO
   Set( 1, "OFF" )

Return arr

Static Function EditColors()
Local oDlg, i, j, temp, oBtn2




Local cText := "// The code sample" + Chr(10) +  "do while ++nItem < 120"+ Chr(10) +  "  if aItems[ nItem ] == 'scheme'"+ Chr(10) +  "    nFactor := 22.5"+ Chr(10) +  "  endif"

Memvar oBrw, oEditC, oSayT, oCheckB, oCheckI, oSayB, aSchemes
Memvar nScheme, nType, oTheme, cScheme, oDesigner

Private oBrw, oEditC, oSayT, oCheckB, oCheckI, oSayB, aSchemes := Array( Len( HDTheme():aThemes ) )
Private nScheme, nType := 2, oTheme := HDTheme():New(), cScheme := ""

   FOR i := 1 TO Len( aSchemes )


      aSchemes[i] := { HDTheme():aThemes[i]:name, HDTheme():aThemes[i]:normal,  HDTheme():aThemes[i]:command, HDTheme():aThemes[i]:comment,           HDTheme():aThemes[i]:quote, HDTheme():aThemes[i]:number }
   NEXT



   oDlg := HDialog():New( Iif(.F.,10,11),,200,140,440,355,"Color schemes",oDesigner:oMainWnd:oFont,{||UpdSample()},,,,,,,.F.,,,.F.,,,.F.,,, .F.,.F.)

   HButton():New(,,,10,10,110, 30,"Delete scheme",,,,,{||UpdSample(1)},,,,,.F. );

   oBrw := HBrowse():New( Iif(.F.,2,Iif(.T.,1,0)),,,,140,10,130,80,,,,,,,,.F.,.F., .F., .F.,,,, .F., .F.,,,,,,,,,,, .F. ); oBrw:name := "oBrw"
   oBrw:bPosChanged := {||nScheme:=oBrw:nCurrent,UpdSample()}
   oBrw:aArray := aSchemes
   oBrw:AddColumn( HColumn():New( ,{|v,o|( (v) := (v) ),o:aArray[o:nCurrent,1]},"C",15,0,.T. ) )
   oBrw:lDispHead := .F.
   nScheme := oBrw:nCurrent := oBrw:rowPos := HDTheme():nSelected

   HEdit():New(,,cScheme, {|v|Iif(v==Nil,cScheme,cScheme:=v)},,290,10,110,26,,,,,,,,,,, .F.,,.F.,,,,.F.,,.F.);
   HButton():New(,,,290,40,110, 30,"Add scheme",,,,,{||UpdSample(2)},,,,,.F. );

   HGroup():New(,,,10,120,140, 140,"",,,,,,,.F.,,.F.);
   HRadioGroup():New()
   HRadioButton():New(,,,20,130, 120,24,"Normal",,,,,{||nType:=2,UpdSample(),oBtn2:Show()},,,,,.F.,.F. );
   HRadioButton():New(,,,20,154, 120,24,"Keyword",,,,,{||nType:=3,UpdSample(),oBtn2:Hide()},,,,,.F.,.F. );
   HRadioButton():New(,,,20,178, 120,24,"Comment",,,,,{||nType:=4,UpdSample(),oBtn2:Hide()},,,,,.F.,.F. );
   HRadioButton():New(,,,20,202, 120,24,"Quote",,,,,{||nType:=5,UpdSample(),oBtn2:Hide()},,,,,.F.,.F. );
   HRadioButton():New(,,,20,226, 120,24,"Number",,,,,{||nType:=6,UpdSample(),oBtn2:Hide()},,,,,.F.,.F. );
   HRadioGroup():EndGroup( 1 )

   HGroup():New(,,,170,110,250, 75,"",,,,,,,.F.,,.F.);
   HStatic():New(,,,180,127,100, 24,"Text color",,,,,,,,.F.,,,,.F. );
   oSayT := HStatic():New(,,,280,125,24, 24,"",,,,,,,,.F.,,,,.F. ); oSayT:name := "oSayT"
   HButton():New(,,,305,127,20, 20,"...",,,,,{||Iif((temp:=Hwg_ChooseColor(aSchemes[nScheme,nType][1],.F.))<>Nil,(aSchemes[nScheme,nType][1]:=temp,UpdSample()),.F.)},,,,,.F. );
   HStatic():New(,,,180,152,100, 24,"Background",,,,,,,,.F.,,,,.F. );
   oSayB := HStatic():New(,,,280,150,24, 24,"",,,,,,,,.F.,,,,.F. ); oSayB:name := "oSayB"
   oBtn2 := HButton():New(,,,305,152,20, 20,"...",,,,,{||Iif((temp:=Hwg_ChooseColor(aSchemes[nScheme,nType][2],.F.))<>Nil,(aSchemes[nScheme,nType][2]:=temp,UpdSample()),.F.)},,,,,.F. ); oBtn2:name := "oBtn2"
   oCheckB := HCheckButton():New(,,,,,350,125, 60,24,"Bold",,,,,{||aSchemes[nScheme,nType][3]:=IsDlgButtonChecked(oCheckB:oParent:handle,oCheckB:id),UpdSample(),.T.},,,,,.F.,.F.,.F. ); oCheckB:name := "oCheckB"
   oCheckI := HCheckButton():New(,,,,,350,150, 60,24,"Italic",,,,,{||aSchemes[nScheme,nType][4]:=IsDlgButtonChecked(oCheckI:oParent:handle,oCheckI:id),UpdSample(),.T.},,,,,.F.,.F.,.F. ); oCheckI:name := "oCheckI"

   oEditC := HRichEdit():New(,,cText,4,170,190,250, 100,,,,,,,,,,, .F.,,.F. ); oEditC:name := "oEditC"

   HButton():New(,,,60,310,100, 32,"Ok",,,,,{||oDlg:lResult:=.T.,EndDialog()},,,,,.F. );
   HButton():New(,2,,200,310,100, 32,"Cancel",,,,,,,,,,.F. );

   oDlg:Activate()

   IF oDlg:lResult
      FOR i := 1 TO Len( HDTheme():aThemes )
         IF Ascan( aSchemes,{|a|Lower(a[1])==Lower(HDTheme():aThemes[i]:name)} ) == 0
            Adel( HDTheme():aThemes,i )
            Asize( HDTheme():aThemes,Len(HDTheme():aThemes)-1 )
         ENDIF
      NEXT
      FOR i := 1 TO Len( aSchemes )
         j := Ascan( HDTheme():aThemes,{|o|Lower(o:name)==Lower(aSchemes[i,1])} )
         IF j == 0
            HDTheme():Add( aSchemes[i,1] )
            j := Len( HDTheme():aThemes )
         ENDIF
         HDTheme():aThemes[j]:normal  := aSchemes[i,2]
         HDTheme():aThemes[j]:command := aSchemes[i,3]
         HDTheme():aThemes[j]:comment := aSchemes[i,4]
         HDTheme():aThemes[j]:quote   := aSchemes[i,5]
         HDTheme():aThemes[j]:number  := aSchemes[i,6]
      NEXT
      HDTheme():lChanged := .T.
   ENDIF

Return Nil

Static Function UpdSample( nAction )
Memvar aSchemes, nScheme, oBRW, cScheme, oSayT, nType, oSayB
Memvar oTheme, oCheckB, oCheckI, oEditC

   IF nAction <> Nil
      IF nAction == 1
         IF Len( aSchemes ) == 1
            MsgStop( "Can't delete the only theme !", "Designer" )
            Return Nil
         ENDIF
         IF MsgYesNo( "Really delete the '" + aSchemes[nScheme,1] + "' theme ?", "Designer" )
            Adel( aSchemes,nScheme )
            Asize( aSchemes,Len(aSchemes)-1 )
            nScheme := oBrw:nCurrent := oBrw:rowPos := 1
            oBrw:Refresh()
         ELSE
            Return Nil
         ENDIF
      ELSEIF nAction == 2
         IF Empty( cScheme )
            MsgStop( "You must specify the theme name !", "Designer" )
            Return Nil
         ENDIF
         IF Ascan( aSchemes,{|a|Lower(a[1])==Lower(cScheme)} ) == 0


            Aadd( aSchemes,{ cScheme, AClone(aSchemes[nScheme,2]),  AClone(aSchemes[nScheme,3]), AClone(aSchemes[nScheme,4]),  AClone(aSchemes[nScheme,5]), AClone(aSchemes[nScheme,6]) } )
            oBrw:Refresh()
         ELSE
            MsgStop( "The " + cScheme + " theme exists already !", "Designer" )
            Return Nil
         ENDIF
      ENDIF
   ENDIF

   oSayT:SetColor( ,aSchemes[nScheme,nType][1],.T. )
   oSayB:SetColor( ,aSchemes[nScheme,nType][2],.T. )
   CheckDlgButton( oCheckB:oParent:handle,oCheckB:id,aSchemes[nScheme,nType][3] )
   CheckDlgButton( oCheckI:oParent:handle,oCheckI:id,aSchemes[nScheme,nType][4] )

   oTheme:normal  := aSchemes[nScheme,2]
   oTheme:command := aSchemes[nScheme,3]
   oTheme:comment := aSchemes[nScheme,4]
   oTheme:quote   := aSchemes[nScheme,5]
   oTheme:number  := aSchemes[nScheme,6]
   re_SetDefault( oEditC:handle,oTheme:normal[1],,,oTheme:normal[3],oTheme:normal[4] )
   SendMessage( oEditC:handle,1091,0,oTheme:normal[2] )
   re_SetCharFormat( oEditC:handle,CreateHiLight(oEditC:GetText(),oTheme) )
Return Nil


static function InsertField(nModus)

  LOCAL cDBF:=MsgGet("DBF Name","input table name")

( (nModus) := (nModus) )

  IF FILE(cDBF)

   MSGINFO("later..")


  ELSE
        MSGINFO(cDBF+chr(13)+"Not Found")
  ENDIF

  return (Nil)


#pragma BEGINDUMP

   #include "hbapi.h"
   #include <windows.h>
   #include <string.h>

int At_Any( char* cFind, char* cStr, int* nPos)
{
   char c;
   int i;
   int iLen = strlen( cFind );

   while( ( c = *( cStr+(*nPos) ) ) != 0 )
   {
      for( i = 0; i < iLen; i ++ )
         if( c == *( cFind+i ) )
            break;
      if( i < iLen )
         break;
      (*nPos) ++;
   }

   return ( (c)? 1:0 );
}

HB_FUNC( NEXTWORD )
{
   char *cSep = " \t,.()[]+-/%";
   char * cStr  = (char*) hb_parc( 1 );
   char * ptr, * ptr1;
   int nPos = hb_parni( 2 ) - 1;

   ptr = cStr + nPos;
   while( *ptr && strchr( cSep,*ptr ) )
   {
      ptr++;
      nPos++;
   }
   if( *ptr == '\'' || *ptr == '\"' )
   {
      ptr1 = strchr( ptr+1,*ptr );
      if( ptr1 )
      {
         nPos = ptr1 - cStr + 1;
         hb_retclen( ptr,ptr1-ptr+1 );
      }
      else
      {
         nPos = strlen( cStr );
         hb_retc( ptr );
      }
   }
   else if( At_Any( cSep,cStr,&nPos ) )
      hb_retclen( ptr,nPos-(ptr-cStr) );
   else
      hb_retc( ptr );
   hb_storni( nPos+1,2 );
   hb_storni( ptr-cStr+1,3 );
}

#pragma ENDDUMP

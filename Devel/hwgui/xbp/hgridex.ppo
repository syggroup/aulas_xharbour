#line 112 "d:\devel\xharbour_bcc7\include\hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 31 "source\hgridex.prg"
_HB_CLASS HGridEX ; UTILITY FUNCTION HGridEX(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HGridEX" , {HControl():classh} ) ) ; ;

_HB_MEMBER { winclass} ; IIF( !.F., s_oClass:AddMultiClsData(, "SYSLISTVIEW32", nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "winclass" }, .F. ), )
   _HB_MEMBER { aBitMaps} ; IIF( !.F., s_oClass:AddMultiData(, { }, nScope + IIF( .F., 32, 0 ), { "aBitMaps" }, .F., .F. ), )
   _HB_MEMBER { aItems} ; IIF( !.F., s_oClass:AddMultiData(, { }, nScope + IIF( .F., 32, 0 ), { "aItems" }, .F., .F. ), )
   _HB_MEMBER { ItemCount} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "ItemCount" }, .F., .F. ), )
   _HB_MEMBER { color} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "color" }, .F., .F. ), )
   _HB_MEMBER { bFlag} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "bFlag" }, .F., .F. ), )
   _HB_MEMBER { bkcolor} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bkcolor" }, .F., .F. ), )
   _HB_MEMBER { aColumns} ; IIF( !.F., s_oClass:AddMultiData(, { }, nScope + IIF( .F., 32, 0 ), { "aColumns" }, .F., .F. ), )
   _HB_MEMBER { nRow} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nRow" }, .F., .F. ), )
   _HB_MEMBER { nCol} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nCol" }, .F., .F. ), )
   _HB_MEMBER { aColors} ; IIF( !.F., s_oClass:AddMultiData(, { }, nScope + IIF( .F., 32, 0 ), { "aColors" }, .F., .F. ), )
   _HB_MEMBER { hSort} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hSort" }, .F., .F. ), )
   _HB_MEMBER { oMenu} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMenu" }, .F., .F. ), )

   _HB_MEMBER { lNoScroll} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lNoScroll" }, .F., .F. ), )
   _HB_MEMBER { lNoBorder} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lNoBorder" }, .F., .F. ), )
   _HB_MEMBER { lNoLines} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lNoLines" }, .F., .F. ), )
   _HB_MEMBER { lNoHeader} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lNoHeader" }, .F., .F. ), )

   _HB_MEMBER { bEnter} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bEnter" }, .F., .F. ), )
   _HB_MEMBER { bKeyDown} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bKeyDown" }, .F., .F. ), )
   _HB_MEMBER { bPosChg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bPosChg" }, .F., .F. ), )
   _HB_MEMBER { bDispInfo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bDispInfo" }, .F., .F. ), )
   _HB_MEMBER { him} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "him" }, .F., .F. ), )
   _HB_MEMBER { bGfocus} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bGfocus" }, .F., .F. ), )
   _HB_MEMBER { bLfocus} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bLfocus" }, .F., .F. ), )
   _HB_MEMBER { aRow} ; IIF( !.F., s_oClass:AddMultiData(, { }, nScope + IIF( .F., 32, 0 ), { "aRow" }, .F., .F. ), )
   _HB_MEMBER { aRowBitMap} ; IIF( !.F., s_oClass:AddMultiData(, { }, nScope + IIF( .F., 32, 0 ), { "aRowBitMap" }, .F., .F. ), )
   _HB_MEMBER { aRowStyle} ; IIF( !.F., s_oClass:AddMultiData(, { }, nScope + IIF( .F., 32, 0 ), { "aRowStyle" }, .F., .F. ), )
   _HB_MEMBER { iRowSelect} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "iRowSelect" }, .F., .F. ), )



   _HB_MEMBER New( oWnd, nId, nStyle, x, y, width, height, oFont, bInit, bSize, bPaint, bEnter,  bGfocus, bLfocus, lNoScroll, lNoBord, bKeyDown, bPosChg, bDispInfo,  nItemCount, lNoLines, color, bkcolor, lNoHeader, aBit, aItems); IIF( .F., s_oClass:ModMethod( "New", @HGridEX_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HGridEX_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Activate(); IIF( .F., s_oClass:ModMethod( "Activate", @HGridEX_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @HGridEX_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Init(); IIF( .F., s_oClass:ModMethod( "Init", @HGridEX_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Init", @HGridEX_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddColumn(cHeader, nWidth, nJusHead, nBit); IIF( .F., s_oClass:ModInline( "AddColumn", {|Self,cHeader, nWidth, nJusHead, nBit | Self, AAdd( ::aColumns, { cHeader, nWidth, nJusHead, nBit } ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "AddColumn", {|Self,cHeader, nWidth, nJusHead, nBit | Self, AAdd( ::aColumns, { cHeader, nWidth, nJusHead, nBit } ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Refresh(); IIF( .F., s_oClass:ModMethod( "Refresh", @HGridEX_Refresh(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Refresh", @HGridEX_Refresh(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER RefreshLine(); IIF( .F., s_oClass:ModInline( "RefreshLine", {|Self | Self, Listview_update( ::handle, Listview_getfirstitem( ::handle ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "RefreshLine", {|Self | Self, Listview_update( ::handle, Listview_getfirstitem( ::handle ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER SetItemCount(nItem); IIF( .F., s_oClass:ModInline( "SetItemCount", {|Self,nItem | Self, Listview_setitemcount( ::handle, nItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetItemCount", {|Self,nItem | Self, Listview_setitemcount( ::handle, nItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Row(); IIF( .F., s_oClass:ModInline( "Row", {|Self | Self, Listview_getfirstitem( ::handle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Row", {|Self | Self, Listview_getfirstitem( ::handle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER AddRow( a, bUpdate); IIF( .F., s_oClass:ModMethod( "AddRow", @HGridEX_AddRow(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddRow", @HGridEX_AddRow(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Notify( lParam); IIF( .F., s_oClass:ModMethod( "Notify", @HGridEX_Notify(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Notify", @HGridEX_Notify(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DELETEROW(); IIF( .F., s_oClass:ModInline( "DELETEROW", {|Self | Self, IF( ::bFlag , ( SendMessage( ::HANDLE, (0x1000 + 8), ::iRowSelect , 0 ), ::bFlag := .F. ), .T. ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "DELETEROW", {|Self | Self, IF( ::bFlag , ( SendMessage( ::HANDLE, (0x1000 + 8), ::iRowSelect , 0 ), ::bFlag := .F. ), .T. ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER DELETEALLROW(); IIF( .F., s_oClass:ModInline( "DELETEALLROW", {|Self | Self, ::aItems := NIL, ::aColors := { }, SendMessage( ::Handle, (0x1000 + 9), 0, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "DELETEALLROW", {|Self | Self, ::aItems := NIL, ::aColors := { }, SendMessage( ::Handle, (0x1000 + 9), 0, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER SELECTALL(); IIF( .F., s_oClass:ModInline( "SELECTALL", {|Self | Self, ListViewSelectAll( ::Handle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SELECTALL", {|Self | Self, ListViewSelectAll( ::Handle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER SELECTLAST(); IIF( .F., s_oClass:ModInline( "SELECTLAST", {|Self | Self, ListViewSelectLastItem( ::handle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SELECTLAST", {|Self | Self, ListViewSelectLastItem( ::handle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Redefine( oWndParent, nId, cCaption, oFont, bInit, bSize, bPaint, ctooltip, tcolor, bcolor, lTransp, aItem); IIF( .F., s_oClass:ModMethod( "Redefine", @HGridEX_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Redefine", @HGridEX_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER UpdateData(); IIF( .F., s_oClass:ModMethod( "UpdateData", @HGridEX_UpdateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "UpdateData", @HGridEX_UpdateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SETVIEW(style); IIF( .F., s_oClass:ModInline( "SETVIEW", {|Self,style | Self, LISTVIEW_SETVIEW( ::handle, style ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SETVIEW", {|Self,style | Self, LISTVIEW_SETVIEW( ::handle, style ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HGridEX ;




UTILITY STATIC function HGridEX_New( oWnd, nId, nStyle, x, y, width, height, oFont, bInit, bSize, bPaint, bEnter,  bGfocus, bLfocus, lNoScroll, lNoBord, bKeyDown, bPosChg, bDispInfo,  nItemCount, lNoLines, color, bkcolor, lNoHeader, aBit, aItems) ; local Self AS CLASS HGridEX := QSelf() AS CLASS HGridEX

   ( (nItemCount) := (nItemCount) )


   nStyle := Hwg_BitOr( IIf( nStyle == Nil, 0, nStyle ), 65536 + 8388608   )

   ::HControl:New( oWnd, nId, nStyle, x, y, width, height, oFont, bInit,  bSize, bPaint )
   IF aBit == NIL ; aBit := { } ; END
   ::aItems := aItems
   ::ItemCount := Len( aItems )
   ::aBitMaps := aBit
   ::bGfocus := bGfocus
   ::bLfocus := bLfocus

   ::color   := color
   ::bkcolor := bkcolor

   ::lNoScroll := lNoScroll
   ::lNoBorder := lNoBord
   ::lNoLines  := lNoLines
   ::lNoHeader := lNoHeader

   ::bEnter    := bEnter
   ::bKeyDown  := bKeyDown
   ::bPosChg   := bPosChg
   ::bDispInfo := bDispInfo


   HWG_InitCommonControlsEx()

   ::Activate()


   RETURN Self

UTILITY STATIC function HGridEX_Activate() ; local Self AS CLASS HGridEX := QSelf() AS CLASS HGridEX
   IF ! Empty( ::oParent:handle )
      ::Style :=  ::Style - 8388608
      ::handle := ListView_Create ( ::oParent:handle, ::id, ::nLeft, ::nTop, ::nWidth, ::nHeight, ::style, ::lNoHeader, ::lNoScroll )
      ::Init()
   ENDIF
   RETURN Nil

UTILITY STATIC function HGridEX_Init() ; local Self AS CLASS HGridEX := QSelf() AS CLASS HGridEX
   LOCAL i, nPos
   LOCAL aButton := { }
   LOCAL aBmpSize
   LOCAL n
   LOCAL n1
   LOCAL aTemp, aTemp1, nmax

   IF ! ::lInit
      ::HControl:Init()
      ::nHolder := 1

      FOR n := 1 TO Len( ::aBitmaps )
         AAdd( aButton, LoadImage( , ::aBitmaps[ n ] , 0, 0, 0, 64 + 8192 ) )
      NEXT

      IF Len( aButton ) > 0

         aBmpSize := GetBitmapSize( aButton[ 1 ] )
         nmax := aBmpSize[ 3 ]
         FOR n := 2 TO Len( aButton )
            aBmpSize := GetBitmapSize( aButton[ n ] )
            nmax := Max( nmax, aBmpSize[ 3 ] )
         NEXT


         IF nmax == 4
            ::hIm := CreateImageList( { } , aBmpSize[ 1 ], aBmpSize[ 2 ], 1, 0x0004 + 0x0001 )
         ELSEIF nmax == 8
            ::hIm := CreateImageList( { } , aBmpSize[ 1 ], aBmpSize[ 2 ], 1, 0x0008 + 0x0001 )
         ELSEIF nmax == 24
            ::hIm := CreateImageList( { } , aBmpSize[ 1 ], aBmpSize[ 2 ], 1, 0x00FE + 0x0001 )
         ENDIF

         FOR nPos := 1 TO Len( aButton )

            aBmpSize := GetBitmapSize( aButton[ nPos ] )

            IF aBmpSize[ 3 ] == 24
               Imagelist_Add( ::hIm, aButton[ nPos ] )
            ELSE
               Imagelist_Add( ::hIm, aButton[ nPos ] )
            ENDIF

         NEXT

         Listview_setimagelist( ::handle, ::him )

      ENDIF

      Listview_Init( ::handle, ::ItemCount, ::lNoLines )

      FOR i := 1 TO Len( ::aColumns )
         Listview_addcolumnEX( ::handle, i, ::aColumns[ i, 1 ], ::aColumns[ i , 2 ], ::aColumns[ i, 3 ], IF( ::aColumns[ i, 4 ] <> NIL, ::aColumns[ i, 4 ]  , - 1 ) )

      NEXT
      IF Len( ::aRow ) > 0
         FOR n := 1 TO Len( ::aRow )
            aTemp := ::aRow[ n ]
            aTemp1 := ::aRowBitMap[ n ]
            FOR n1 := 1 TO Len( aTemp )
               LISTVIEW_INSERTITEMEX( ::handle, n, n1, aTemp[ n1 ], aTemp1[ n1 ] )
            NEXT
         NEXT

      ENDIF
      IF ::color <> nil
         ListView_SetTextColor( ::handle, ::color )

      ENDIF

      IF ::bkcolor <> nil
         Listview_setbkcolor( ::handle, ::bkcolor )
         Listview_settextbkcolor( ::handle, ::bkcolor )
      ENDIF
   ENDIF
   RETURN Nil

UTILITY STATIC function HGridEX_Refresh() ; local Self AS CLASS HGridEX := QSelf() AS CLASS HGridEX
   LOCAL iFirst, iLast

   iFirst := ListView_GetTopIndex( ::handle )

   iLast := iFirst + ListView_GetCountPerPage( ::handle )

   ListView_RedrawItems( ::handle , iFirst, iLast )
   RETURN Nil


UTILITY STATIC function HGridEX_AddRow( a , bupdate) ; local Self AS CLASS HGridEX := QSelf() AS CLASS HGridEX
   LOCAL nLen := Len( a )
   LOCAL n
   LOCAL aTmp := { }
   LOCAL aTmp1 := { }
   LOCAL aTmp2 := { }


   IF bupdate == NIL ; bupdate := .F. ; END
   FOR n := 1 TO nLen STEP 4
      AAdd( aTmp1, a[ n ] )
      AAdd( aTmp,  IF( ValType( a[ n + 1 ] ) == "N", a[ n + 1 ], - 1 ) )

      AAdd( aTmp2,  IF( ValType( a[ n + 2  ] ) == "N", a[ n + 2 ], RGB( 12, 15, 46 ) ) )


      AAdd( aTmp2,  IF( ValType( a[ n + 3  ] ) == "N", a[ n + 3 ], RGB( 192, 192, 192 ) ) )

      AAdd( ::aColors, aTmp2 )
      aTmp2 := { }
   NEXT

   AAdd( ::aRowBitMap, aTmp )
   AAdd( ::aRow,    aTmp1 )
   IF bupdate
      ::updatedata()
   ENDIF

   RETURN nil

UTILITY STATIC function HGridEX_Notify( lParam) ; local Self AS CLASS HGridEX := QSelf() AS CLASS HGridEX
   LOCAL nCode := GetNotifyCode( lParam )
   LOCAL Res, iSelect, oParent := ::GetParentForm()

   IF nCode == (0-12) .AND. GETNOTIFYCODEFROM( lParam ) == ::Handle
      Res := PROCESSCUSTU( ::handle, lParam, ::aColors )
      Hwg_SetDlgResult( oParent:Handle, Res )
      RETURN Res
   ENDIF

   IF nCode == (0-2)
      iSelect = SendMessage( ::handle, (0x1000 + 12), - 1, 0x0001 )

      IF( iSelect == - 1 )
         RETURN 0
      ENDIF

      ::iRowSelect := iSelect
      ::bFlag := .T.
      RETURN 1
   ENDIF

   IF nCode == (-100-8)
      IF Empty( ::hsort )
         ::hSort := LISTVIEWSORTINFONEW( lParam, nil )
      ENDIF
      LISTVIEWSORT( ::handle, lParam, ::hSort )
      RETURN  0
   ENDIF
   IF nCode == - 7
   ELSEIF nCode == - 8
   ENDIF
   IF nCode == - 4
   ENDIF
   IF nCode == - 155
   ENDIF

   Res := ListViewNotify( Self, lParam )
   IF ValType( Res ) == "N"
      Hwg_SetDlgResult( oParent:Handle, Res )

   ENDIF
   RETURN Res


UTILITY STATIC function HGridEX_Redefine( oWndParent, nId, cCaption, oFont, bInit,  bSize, bPaint, ctooltip, tcolor, bcolor, lTransp, aItem) ; local Self AS CLASS HGridEX := QSelf() AS CLASS HGridEX

   ( (cCaption) := (cCaption) )
   ( (lTransp) := (lTransp) )

   IF aItem == NIL ; aItem := { } ; END

   ::HControl:New( oWndParent, nId, 0, 0, 0, 0, 0, oFont, bInit,  bSize, bPaint, ctooltip, tcolor, bcolor )
   HWG_InitCommonControlsEx()
   ::arow := aItem

   ::style   := ::nLeft := ::nTop := ::nWidth := ::nHeight := 0

   RETURN Self

UTILITY STATIC function HGridEX_UpdateData() ; local Self AS CLASS HGridEX := QSelf() AS CLASS HGridEX
   LOCAL n := Len( ::aRow ), n1
   LOCAL aTemp, atemp1

   aTemp := ::aRow[ n ]
   atemp1 := ::aRowBitMap[ n ]

   FOR n1 := 1 TO Len( aTemp )

      LISTVIEW_INSERTITEMEX( ::handle, n, n1, aTemp[ n1 ], atemp1[ n1 ] )
   NEXT

   RETURN .T.

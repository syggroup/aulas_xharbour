#line 112 "d:\devel\xharbour_bcc73\include\hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 18 "source\hownbtn.prg"
_HB_CLASS HOwnButton ; UTILITY FUNCTION HOwnButton(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HOwnButton" , {HControl():classh} ) ) ; ;

_HB_MEMBER { cPath} ; IIF( !.F., s_oClass:AddMultiClsData(,, nScope + IIF( .F., 32, 0 ) + IIF( .T., 64, 0 ), { "cPath" }, .F. ), )
   _HB_MEMBER { winclass} ; IIF( !.F., s_oClass:AddMultiData(, "OWNBTN", nScope + IIF( .F., 32, 0 ), { "winclass" }, .F., .F. ), )
   _HB_MEMBER { lFlat} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lFlat" }, .F., .F. ), )
   _HB_MEMBER { state} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "state" }, .F., .F. ), )
   _HB_MEMBER { bClick} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bClick" }, .F., .F. ), )
   _HB_MEMBER { lPress} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lPress" }, .F., .F. ), )
   _HB_MEMBER { lCheck} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lCheck" }, .F., .F. ), )
   _HB_MEMBER { xt, yt, widtht, heightt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "xt" , "yt" , "widtht" , "heightt" }, .F., .F. ), )
   _HB_MEMBER { oBitmap, xb, yb, widthb, heightb, lTransp, trColor} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBitmap" , "xb" , "yb" , "widthb" , "heightb" , "lTransp" , "trColor" }, .F., .F. ), )
   _HB_MEMBER { lEnabled} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lEnabled" }, .F., .F. ), )
   _HB_MEMBER { nOrder} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nOrder" }, .F., .F. ), )

   _HB_MEMBER { m_bFirstTime} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "m_bFirstTime" }, .F., .F. ), )
   _HB_MEMBER { hTheme} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hTheme" }, .F., .F. ), )
   _HB_MEMBER { Themed} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "Themed" }, .F., .F. ), )
   _HB_MEMBER { lNAOTraduz} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lNAOTraduz" }, .F., .F. ), )





   _HB_MEMBER New( oWndParent, nId, nStyle, nLeft, nTop, nWidth, nHeight,    bInit, bSize, bPaint, bClick, lflat,              cText, color, oFont, xt, yt, widtht, heightt,        bmp, lResour, xb, yb, widthb, heightb, lTr, trColor,  cTooltip, lEnabled, lCheck, bColor,bGfocus, bLfocus, themed, lNAOTraduz); IIF( .F., s_oClass:ModMethod( "New", @HOwnButton_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HOwnButton_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Activate(); IIF( .F., s_oClass:ModMethod( "Activate", @HOwnButton_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @HOwnButton_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER onEvent( msg, wParam, lParam); IIF( .F., s_oClass:ModMethod( "onEvent", @HOwnButton_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onEvent", @HOwnButton_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Init(); IIF( .F., s_oClass:ModMethod( "Init", @HOwnButton_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Init", @HOwnButton_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));



   _HB_MEMBER Redefine( oWndParent, nId, bInit, bSize, bPaint, bClick, lflat,  cText, color, font, xt, yt, widtht, heightt,      bmp, lResour, xb, yb, widthb, heightb, lTr,       cTooltip, lEnabled, lCheck, lNAOTraduz); IIF( .F., s_oClass:ModMethod( "Redefine", @HOwnButton_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Redefine", @HOwnButton_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Paint(); IIF( .F., s_oClass:ModMethod( "Paint", @HOwnButton_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Paint", @HOwnButton_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER DrawItems( hDC); IIF( .F., s_oClass:ModMethod( "DrawItems", @HOwnButton_DrawItems(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DrawItems", @HOwnButton_DrawItems(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER MouseMove( wParam, lParam); IIF( .F., s_oClass:ModMethod( "MouseMove", @HOwnButton_MouseMove(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "MouseMove", @HOwnButton_MouseMove(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER MDown(); IIF( .F., s_oClass:ModMethod( "MDown", @HOwnButton_MDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "MDown", @HOwnButton_MDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER MUp(); IIF( .F., s_oClass:ModMethod( "MUp", @HOwnButton_MUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "MUp", @HOwnButton_MUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Press(); IIF( .F., s_oClass:ModInline( "Press", {|Self | Self, ( ::lPress := .T., ::MDown() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Press", {|Self | Self, ( ::lPress := .T., ::MDown() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Release(); IIF( .F., s_oClass:ModMethod( "Release", @HOwnButton_Release(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Release", @HOwnButton_Release(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER END(); IIF( .F., s_oClass:ModMethod( "END", @HOwnButton_END(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "END", @HOwnButton_END(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Enable(); IIF( .F., s_oClass:ModMethod( "Enable", @HOwnButton_Enable(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Enable", @HOwnButton_Enable(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Disable(); IIF( .F., s_oClass:ModMethod( "Disable", @HOwnButton_Disable(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Disable", @HOwnButton_Disable(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER onClick(); IIF( .F., s_oClass:ModMethod( "onClick", @HOwnButton_onClick(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onClick", @HOwnButton_onClick(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER onGetFocus(); IIF( .F., s_oClass:ModMethod( "onGetFocus", @HOwnButton_onGetFocus(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onGetFocus", @HOwnButton_onGetFocus(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER onLostFocus(); IIF( .F., s_oClass:ModMethod( "onLostFocus", @HOwnButton_onLostFocus(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onLostFocus", @HOwnButton_onLostFocus(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Refresh(); IIF( .F., s_oClass:ModMethod( "Refresh", @HOwnButton_Refresh(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Refresh", @HOwnButton_Refresh(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetText(cCaption); IIF( .F., s_oClass:ModInline( "SetText", {|Self,cCaption | Self, ::title := cCaption,  RedrawWindow( ::oParent:Handle, 4 + 1 , ::nLeft, ::nTop, ::nWidth, ::nHeight ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetText", {|Self,cCaption | Self, ::title := cCaption,  RedrawWindow( ::oParent:Handle, 4 + 1 , ::nLeft, ::nTop, ::nWidth, ::nHeight ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )


; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HOwnButton ;





UTILITY STATIC function HOwnButton_New( oWndParent, nId, nStyle, nLeft, nTop, nWidth, nHeight,    bInit, bSize, bPaint, bClick, lflat,              cText, color, oFont, xt, yt, widtht, heightt,        bmp, lResour, xb, yb, widthb, heightb, lTr, trColor,  cTooltip, lEnabled, lCheck, bColor,bGfocus, bLfocus, themed, lNAOTraduz) ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton

   ::lNAOTraduz     := IIf( lNAOTraduz  == Nil, .F., lNAOTraduz  )


   IF ::lNAOTraduz
      ::title   := cText
      ctooltip  := ctooltip
   Else
      ::title   := HWG_TRANSLATOR( cText, "OWNERBUTTON" )
      ctooltip  := HWG_TRANSLATOR( ctooltip, "OWNERBUTTON / TOOLTIP" )
   Endif


   ::HControl:New( oWndParent, nId, nStyle, nLeft, nTop, nWidth, nHeight, oFont, bInit,  bSize, bPaint, cTooltip )




   IF oFont == Nil
      ::oFont := ::oParent:oFont
   ENDIF
   ::lflat   := IIf( lflat == Nil, .F., lflat )
   ::bClick  := bClick
   ::bGetFocus := bGFocus
   ::bLostFocus := bLfocus

   ::state   := 0
   ::nOrder  := IIf( oWndParent == nil, 0, Len( oWndParent:aControls ) )


   ::tcolor  := IIf( color == Nil, GetSysColor( 18 ), color )
   IF bColor <> Nil
      ::bcolor  := bcolor
      ::brush := HBrush():Add( bcolor )
   ENDIF

   ::xt      := IIf( xt == Nil, 0, xt )
   ::yt      := IIf( yt == Nil, 0, yt )
   ::widtht  := IIf( widtht == Nil, 0, widtht )
   ::heightt := IIf( heightt == Nil, 0, heightt )

   IF lEnabled <> Nil
      ::lEnabled := lEnabled
   ENDIF

   IF nStyle=134217728
      ::lEnabled := .F.
   ENDIF

   IF lCheck <> Nil
      ::lCheck := lCheck
   ENDIF
   ::themed := IIF( themed = Nil, .F., themed )
   IF bmp <> Nil
      IF ValType( bmp ) == "O"
         ::oBitmap := bmp
      ELSE


         ::oBitmap := IIf( ( lResour <> Nil.AND.lResour ) .OR.Valtype( bmp ) == "N",  HBitmap():AddResource( bmp ),  HBitmap():AddFile( IIf( ::cPath <> Nil, ::cPath + bmp, bmp ) ) )
      ENDIF
   ENDIF
   ::xb      := xb
   ::yb      := yb
   ::widthb  := IIf( widthb == Nil, 0, widthb )
   ::heightb := IIf( heightb == Nil, 0, heightb )
   ::lTransp := IIf( lTr <> Nil, lTr, .F. )
   ::trColor := trColor
   IF bClick <> Nil
      ::oParent:AddEvent( 0, Self, { || ::onClick() },, )
   ENDIF
   hwg_RegOwnBtn()
   ::Activate()

   RETURN Self

UTILITY STATIC function HOwnButton_Activate() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton
   IF ! Empty( ::oParent:handle )

      ::handle := CreateOwnBtn( ::oParent:handle, ::id,  ::nLeft, ::nTop, ::nWidth, ::nHeight )
      ::Init()
      IF ! ::lEnabled
         EnableWindow( ::handle, .F. )
         ::Disable()
      ENDIF
   ENDIF
   RETURN Nil

UTILITY STATIC function HOwnButton_onEvent( msg, wParam, lParam) ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton

   IF msg == 0x031A
      IF ::Themed
         IF ValType( ::hTheme ) == "P"
            HB_CLOSETHEMEDATA( ::htheme )
            ::hTheme := nil
         ENDIF
         ::Themed := .F.
      ENDIF
      ::m_bFirstTime := .T.
      RedrawWindow( ::handle, 4 + 1 )
      RETURN 0

   ELSEIF msg == 20
      RETURN 0
   ELSEIF msg == 15
      IF ::bPaint <> Nil
         Eval( ::bPaint, Self )
      ELSE
         ::Paint()
      ENDIF
   ELSEIF msg == 512
      ::MouseMove( wParam, lParam )
   ELSEIF msg == 513
      ::MDown()
   ELSEIF msg == 514
      ::MUp()
   ELSEIF msg == 2
      ::END()
   ELSEIF msg == 7





      ::onGetFocus()
   ELSEIF msg == 8





      IF ! ::lCheck
         ::release()
      ENDIF
      ::onLostFocus()
   ELSEIF msg = 258  .OR. msg = 256 .OR. msg = 257
      IF wParam = 0x20
            ::Press()
         ::onClick()
         ::Release()
      ENDIF
   ELSE
      IF ! Empty( ::bOther )
         Eval( ::bOther, Self, msg, wParam, lParam )
      ENDIF
   ENDIF

   RETURN - 1

UTILITY STATIC function HOwnButton_Init() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton

   IF ! ::lInit
      ::nHolder := 1
      SetWindowObject( ::handle, Self )
      ::HControl:Init()
   ENDIF

   RETURN Nil




UTILITY STATIC function HOwnButton_Redefine( oWndParent, nId, bInit, bSize, bPaint, bClick, lflat,  cText, color, font, xt, yt, widtht, heightt,      bmp, lResour, xb, yb, widthb, heightb, lTr,       cTooltip, lEnabled, lCheck, lNAOTraduz) ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton

   ::lNAOTraduz     := IIf( lNAOTraduz  == Nil, .F., lNAOTraduz  )


   IF ::lNAOTraduz
      ::title   := cText
      cTooltip  := cTooltip
   Else
      ::title   := HWG_TRANSLATOR( cText, "OWNERBUTTON" )
      cTooltip  := HWG_TRANSLATOR( cTooltip, "OWNERBUTTON / TOOLTIP" )
   Endif

   ::HControl:New( oWndParent, nId, 0, 0, 0, 0, 0,, bInit, bSize, bPaint, cTooltip )

   ::lflat   := IIf( lflat == Nil, .F., lflat )
   ::bClick  := bClick
   ::state   := 0


   ::tcolor  := IIf( color == Nil, GetSysColor( 18 ), color )
   ::ofont   := font
   ::xt      := IIf( xt == Nil, 0, xt )
   ::yt      := IIf( yt == Nil, 0, yt )
   ::widtht  := IIf( widtht == Nil, 0, widtht )
   ::heightt := IIf( heightt == Nil, 0, heightt )

   IF lEnabled <> Nil
      ::lEnabled := lEnabled
   ENDIF
   IF lEnabled <> Nil
      ::lEnabled := lEnabled
   ENDIF
   IF lCheck <> Nil
      ::lCheck := lCheck
   ENDIF

   IF bmp <> Nil
      IF ValType( bmp ) == "O"
         ::oBitmap := bmp
      ELSE

         ::oBitmap := IIf( lResour, HBitmap():AddResource( bmp ),  HBitmap():AddFile( bmp ) )
      ENDIF
   ENDIF
   ::xb      := xb
   ::yb      := yb
   ::widthb  := IIf( widthb == Nil, 0, widthb )
   ::heightb := IIf( heightb == Nil, 0, heightb )
   ::lTransp := IIf( lTr <> Nil, lTr, .F. )
   hwg_RegOwnBtn()

   RETURN Self

UTILITY STATIC function HOwnButton_Paint() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton
   LOCAL pps, hDC
   LOCAL aCoors, state

   pps := DefinePaintStru()

   hDC := BeginPaint( ::handle, pps )

   aCoors := GetClientRect( ::handle )

   IF ::state == 0
      ::state := 1
   ENDIF
   IF ::nWidth <> aCoors[ 3 ] .OR. ::nHeight <> aCoors[ 4 ]
      ::nWidth  := aCoors[ 3 ]
      ::nHeight := aCoors[ 4 ]
   ENDIF
   IF ::Themed .AND. ::m_bFirstTime
      ::m_bFirstTime := .F.
      IF ( ISTHEMEDLOAD() )
         IF ValType( ::hTheme ) == "P"
            HB_CLOSETHEMEDATA( ::htheme )
         ENDIF
         IF ::WindowsManifest
            ::hTheme := hb_OpenThemeData( ::handle, "BUTTON" )
         ENDIF
         ::hTheme := IIF( EMPTY( ::hTheme  ), Nil, ::hTheme )
      ENDIF
      IF  Empty( ::hTheme )
         ::Themed := .F.
      ENDIF
   ENDIF
   IF ::Themed
      IF ! ::lEnabled
         state :=  4
      ELSE
         state := IIF( ::state == 3, 3, 1 )
      ENDIF
      IF ::lCheck
         state := 3
      ENDIF
   ENDIF

   IF ::lFlat
      IF ::Themed

         IF ::handle = getfocus() .AND. ::lCheck
            hb_DrawThemeBackground( ::hTheme, hdc, 1, 3, aCoors, Nil )
         ELSEIF ::state <> 1
             hb_DrawThemeBackground( ::hTheme, hdc, 1, state, aCoors, Nil )
         ELSE

            DrawButton( hDC, 0, 0, aCoors[ 3 ], aCoors[ 4 ], 0 )
         ENDIF
      ELSE
         IF ::state == 1
            IF ! SelfFocus( ::handle, GetFocus() )

               DrawButton( hDC, 0, 0, aCoors[ 3 ], aCoors[ 4 ], 0 )
            ELSE
               DrawButton( hDC, 0, 0, aCoors[ 3 ], aCoors[ 4 ], 1 )
            ENDIF
         ELSEIF ::state == 2
            DrawButton( hDC, 0, 0, aCoors[ 3 ], aCoors[ 4 ], 1 )
         ELSEIF ::state == 3
            DrawButton( hDC, 0, 0, aCoors[ 3 ], aCoors[ 4 ], 2 )
         ENDIF
      ENDIF
   ELSE
      IF ::Themed

         IF  SelfFocus( ::handle, GetFocus() ) .AND. ::lCheck
            hb_DrawThemeBackground( ::hTheme, hdc, 1, 3, aCoors, Nil )
         ELSE
            hb_DrawThemeBackground( ::hTheme, hdc, 1, state, aCoors, Nil )


         ENDIF
      ELSE
         IF ::state == 1
            DrawButton( hDC, 0, 0, aCoors[ 3 ], aCoors[ 4 ], 5 )
         ELSEIF ::state == 3
            DrawButton( hDC, 0, 0, aCoors[ 3 ], aCoors[ 4 ], 6 )
         ENDIF
      ENDIF
   ENDIF

   ::DrawItems( hDC )

   EndPaint( ::handle, pps )
   RETURN Nil

UTILITY STATIC function HOwnButton_DrawItems( hDC) ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton
   LOCAL x1, y1, x2, y2,  aCoors

   aCoors := GetClientRect( ::handle )
   IF ! EMPTY( ::brush )
      FillRect( hDC, aCoors[ 1 ] + 2, aCoors[ 2 ] + 2, aCoors[ 3 ] - 2, aCoors[ 4 ] - 2, ::Brush:handle )
   ENDIF

   IF ::oBitmap <> Nil
      IF ::widthb == 0
         ::widthb := ::oBitmap:nWidth
         ::heightb := ::oBitmap:nHeight
      ENDIF

      x1 := IIf( ::xb <> Nil .AND. ::xb <> 0, ::xb,  Round( ( ::nWidth - ::widthb ) / 2, 0 ) )

      y1 := IIf( ::yb <> Nil .AND. ::yb <> 0, ::yb,  Round( ( ::nHeight - ::heightb ) / 2, 0 ) )
      IF ::lEnabled
         IF ::oBitmap:ClassName() == "HICON"
            DrawIcon( hDC, ::oBitmap:handle, x1, y1 )
         ELSE
            IF ::lTransp
               DrawTransparentBitmap( hDC, ::oBitmap:handle, x1, y1, ::trColor )
            ELSE
               DrawBitmap( hDC, ::oBitmap:handle,, x1, y1, ::widthb, ::heightb )
            ENDIF
         ENDIF
      ELSE
         DrawGrayBitmap( hDC, ::oBitmap:handle, x1, y1 )
      ENDIF
   ENDIF

   IF ::title <> Nil
      IF ::oFont <> Nil
         SelectObject( hDC, ::oFont:handle )
      ENDIF
      IF ::lEnabled
         SetTextColor( hDC, ::tcolor )
      ELSE

         SetTextColor( hDC, GETSYSCOLOR( 3 ) )
      ENDIF
      x1 := IIf( ::xt <> 0, ::xt, 4 )
      y1 := IIf( ::yt <> 0, ::yt, 4 )
      x2 := ::nWidth - 4
      y2 := ::nHeight - 4
      SetTransparentMode( hDC, .T. )

      DrawText( hDC, ::title, x1, y1, x2, y2,  IIf( ::xt <> 0, 0, 1 ) + IIf( ::yt <> 0, 0, 4 + 32 ) )
      SetTransparentMode( hDC, .F. )
   ENDIF

   RETURN Nil

UTILITY STATIC function HOwnButton_MouseMove( wParam, lParam) ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton
   LOCAL xPos, yPos
   LOCAL res := .F.

   ( (wParam) := (wParam) )

   IF ::state <> 0
      xPos := LOWORD( lParam )
      yPos := HIWORD( lParam )
      IF xPos > ::nWidth .OR. yPos > ::nHeight
         ReleaseCapture()
         res := .T.
      ENDIF

      IF res .AND. ! ::lPress
         ::state := 1
         InvalidateRect( ::handle, 0 )
         RedrawWindow( ::handle, 4 + 1 )

      ENDIF
      IF ::state == 1 .AND. ! res
         ::state := 2
         InvalidateRect( ::handle, 0 )

         RedrawWindow( ::handle, 4 + 1 )
         SetCapture( ::handle )
      ENDIF
   ENDIF
   RETURN Nil

UTILITY STATIC function HOwnButton_MDown() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton
   IF ::state <> 3
      ::state := 3

      ::SetFocus()
      SendMessage( ::Handle, 7, 0, 0 )
      InvalidateRect( ::handle, 0 )
      RedrawWindow( ::handle, 4 + 1 )
   ELSEIF  ::lCheck
      ::state := 1
      InvalidateRect( ::handle, 0 )
      PostMessage( ::handle, 15, 0, 0 )
   ENDIF
   RETURN Nil

UTILITY STATIC function HOwnButton_MUp() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton

      IF ! ::lPress

         ::state := IIF( ::lFlat, 2, 1 )
      ENDIF
      IF ::lCheck
         IF ::lPress
            ::Release()
         ELSE
            ::Press()
         ENDIF
      ENDIF
      IF ::bClick <> Nil
         ReleaseCapture()
         Eval( ::bClick, ::oParent, ::id )
         __MVXRelease( "()" )
      ENDIF
      RedrawWindow( ::handle, 4 + 1 + 1024 + 2 + 256  )

   RETURN Nil

UTILITY STATIC function HOwnButton_Refresh() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton
   InvalidateRect( ::handle, 0 )
   RedrawWindow( ::handle, 4 + 1 + 1024 + 2 + 256  )
   RETURN Nil


UTILITY STATIC function HOwnButton_Release() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton
   ::lPress := .F.
   ::state := 1
   InvalidateRect( ::handle, 0 )
   RedrawWindow( ::handle, 1024 + 2 + 256 + 1 )

   RETURN Nil


UTILITY STATIC function HOwnButton_onGetFocus() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton
   LOCAL res := .T., nSkip

   IF ::bGetFocus == Nil .OR. !CheckFocus(Self, .F.)
      RETURN .T.
   ENDIF
   nSkip := iif( GetKeyState( 0x26 ) < 0 .OR. (GetKeyState( 0x09 ) < 0 .AND. GetKeyState(0x10) < 0 ), -1, 1 )
   IF ::bGetFocus <> Nil
      ::oparent:lSuspendMsgsHandling := .T.
      res := Eval( ::bGetFocus, ::title, Self )
      IF res <> Nil .AND. EMPTY( res )
         WhenSetFocus( Self,nSkip )
      ENDIF
   ENDIF
   ::oparent:lSuspendMsgsHandling := .F.
   RETURN res

UTILITY STATIC function HOwnButton_onLostFocus() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton

    IF ::bLostFocus <> Nil .AND. !CheckFocus(Self, .T.)
       RETURN .T.
   ENDIF
    IF ::bLostFocus <> Nil
      ::oparent:lSuspendMsgsHandling := .T.
      Eval( ::bLostFocus, ::title, Self )
      ::oparent:lSuspendMsgsHandling := .F.
   ENDIF
    RETURN Nil

UTILITY STATIC function HOwnButton_onClick() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton
   IF ::bClick <> Nil

      Eval( ::bClick, Self, ::id )
      ::oParent:lSuspendMsgsHandling := .F.
   ENDIF
   RETURN Nil


UTILITY STATIC function HOwnButton_END() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton

   ::HControl:END()
   ::oFont := Nil
   IF ::oBitmap <> Nil
      ::oBitmap:Release()
      ::oBitmap := Nil
   ENDIF
   PostMessage( ::handle, 16, 0, 0 )
   RETURN Nil

UTILITY STATIC function HOwnButton_Enable() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton

   EnableWindow( ::handle, .T. )
   ::lEnabled := .T.
   InvalidateRect( ::handle, 0 )
   RedrawWindow( ::handle, 4 + 1 )


   RETURN Nil

UTILITY STATIC function HOwnButton_Disable() ; local Self AS CLASS HOwnButton := QSelf() AS CLASS HOwnButton

   ::state   := 0
   ::lEnabled := .F.
   InvalidateRect( ::handle, 0 )
   RedrawWindow( ::handle, 4 + 1 )
   EnableWindow( ::handle, .F. )

   RETURN Nil

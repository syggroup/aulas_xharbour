#line 26 "source\guimain.prg"
FUNCTION InitObjects( oWnd )
   LOCAL i, pArray := oWnd:aObjects
   LOCAL LoadArray := HObject():aObjects

   IF !EMPTY( LoadArray )
      FOR i := 1 TO Len( LoadArray )
         IF ! EMPTY( oWnd:Handle )
            IF __ObjHasMsg( LoadArray[ i ],"INIT")
               LoadArray[ i ]:Init( oWnd )
               LoadArray[ i ]:lInit := .T.
            ENDIF
         ENDIF
      NEXT
   ENDIF
   IF pArray <> Nil
      FOR i := 1 TO Len( pArray )
         IF __ObjHasMsg( pArray[ i ], "INIT" )
            pArray[ i ]:Init( oWnd )
         ENDIF
      NEXT
   ENDIF
   HObject():aObjects := {}
   RETURN .T.

FUNCTION InitControls( oWnd, lNoActivate )
   LOCAL i, pArray := oWnd:aControls, lInit

   lNoActivate := IIf( lNoActivate == Nil, .F., lNoActivate )

   IF pArray <> Nil
      FOR i := 1 TO Len( pArray )

         IF Empty( pArray[ i ]:handle ) .AND. ! lNoActivate

            lInit := pArray[ i ]:lInit
            pArray[ i ]:lInit := .T.
            pArray[ i ]:Activate()
            pArray[ i ]:lInit := lInit
         ELSEIF  ! lNoActivate
            pArray[ i ]:lInit := .T.
         ENDIF

         IF IF( ValType( pArray[ i ]:handle ) == "P", ptrtoulong( pArray[ i ]:handle ), pArray[ i ]:handle ) <= 0
            pArray[ i ]:handle := GetDlgItem( oWnd:handle, pArray[ i ]:id )


         ENDIF
         IF ! Empty( pArray[ i ]:aControls )
            InitControls( pArray[ i ] )
         ENDIF
         pArray[ i ]:Init()

         IF ! pArray[i]:lInit
            pArray[i]:Super:Init()
         ENDIF
      NEXT
   ENDIF

   RETURN .T.

FUNCTION FindParent( hCtrl, nLevel )
   LOCAL i, oParent, hParent := GetParent( hCtrl )
   IF hParent > 0
      IF ( i := AScan( HDialog():aModalDialogs, { | o | o:handle == hParent } ) ) <> 0
         RETURN HDialog():aModalDialogs[ i ]
      ELSEIF ( oParent := HDialog():FindDialog( hParent ) ) <> Nil
         RETURN oParent
      ELSEIF ( oParent := HWindow():FindWindow( hParent ) ) <> Nil
         RETURN oParent
      ENDIF
   ENDIF
   IF nLevel == Nil ; nLevel := 0 ; ENDIF
   IF nLevel < 2
      IF ( oParent := FindParent( hParent, nLevel + 1 ) ) <> Nil
         RETURN oParent:FindControl( , hParent )
      ENDIF
   ENDIF
   RETURN Nil

FUNCTION FindSelf( hCtrl )
   LOCAL oParent
   oParent := FindParent( hCtrl )
   IF oParent == Nil
      oParent := GetAncestor( hCtrl, 1 )
   ENDIF
   IF oParent <> Nil  .AND. VALTYPE( oParent ) <> "N"
      RETURN oParent:FindControl( , hCtrl )
   ENDIF
   RETURN Nil

FUNCTION WriteStatus( oWnd, nPart, cText, lRedraw )
   LOCAL aControls, i
   aControls := oWnd:aControls
   IF ( i := AScan( aControls, { | o | o:ClassName() == "HSTATUS" } ) ) > 0







      WriteStatusWindow( aControls[ i ]:handle, nPart - 1, cText )
      IF lRedraw <> Nil .AND. lRedraw
         RedrawWindow( aControls[ i ]:handle, 4 + 1 )
      ENDIF
   ENDIF
   RETURN Nil

FUNCTION ReadStatus( oWnd, nPart )
   LOCAL aControls, i, ntxtLen, cText := ""
   aControls := oWnd:aControls
   IF ( i := AScan( aControls, { | o | o:ClassName() == "HSTATUS" } ) ) > 0
      ntxtLen := SendMessage( aControls[ i ]:handle, (1024+3), nPart - 1, 0 )
      cText := Replicate( Chr( 0 ), ntxtLen )
      SendMessage( aControls[ i ]:handle, (1024+2), nPart - 1, @cText )
   ENDIF
   RETURN cText

FUNCTION VColor( cColor )
   LOCAL i, res := 0, n := 1, iValue
   cColor := Trim( cColor )
   FOR i := 1 TO Len( cColor )
      iValue := Asc( SubStr( cColor, Len( cColor ) - i + 1, 1 ) )
      IF iValue < 58 .AND. iValue > 47
         iValue -= 48
      ELSEIF iValue >= 65 .AND. iValue <= 70
         iValue -= 55
      ELSEIF iValue >= 97 .AND. iValue <= 102
         iValue -= 87
      ELSE
         RETURN 0
      ENDIF
      res += iValue * n
      n *= 16
   NEXT
   RETURN res

FUNCTION MsgGet( cTitle, cText, nStyle, x, y, nDlgStyle, cResIni )
   LOCAL oModDlg, oFont := HFont():Add( "MS Sans Serif", 0, - 13 )
   LOCAL cRes := IIf( cResIni <> Nil, Trim( cResIni ), "" )





   nStyle := IIf( nStyle == Nil, 0, nStyle )
   x := IIf( x == Nil, 210, x )
   y := IIf( y == Nil, 10, y )
   nDlgStyle := IIf( nDlgStyle == Nil, 0, nDlgStyle )



   oModDlg := HDialog():New( Iif(.F.,10,11), 2147483648 + 268435456 + 12582912 + 524288 + 262144 + nDlgStyle,x,y,300,140,cTitle,oFont,,,,,,,,.T.,,,.F.,,,.F.,,, .F.,.F.)

   HStatic():New(,,,20,10,260, 22,cText,,,,,,,,.F.,,,,.F. );
   HEdit():New(,,cRes, {|v|Iif(v==Nil,cRes,cRes:=v)}, 65536 + 128 + nStyle,20,35,260,26,,,,,,,"Informe",,,, .F.,,.F.,,,,.F.,,.F.);
   oModDlg:aControls[ 2 ]:Anchor := 11
   HButton():New(,1,,20,95,100, 32,"Ok",,,,,,,,,,.F. );
   HButton():New(,2,,180,95,100, 32,"Cancel",,,,,,,,,,.F. );
   oModDlg:aControls[ 4 ]:Anchor := 9

   oModDlg:Activate(.F., { || IIF( ! EMPTY( cRes ), KEYB_EVENT( 0x23 ), .T. ) },,.F. )

   oFont:Release()
   IF oModDlg:lResult
      RETURN Trim( cRes )
   ELSE
      cRes := ""
   ENDIF

   RETURN cRes

FUNCTION WAITRUN( cRun )

Local hIn, hOut, nRet, hProc

   hProc := hb_openProcess(cRun , @hIn, @hOut, @hOut)



   nRet := HB_ProcessValue( hProc )

   FClose( hProc )
   FClose( hIn )
   FClose( hOut )

   Return nRet





FUNCTION WChoice( arr, cTitle, nLeft, nTop, oFont, clrT, clrB, clrTSel, clrBSel, cOk, cCancel )
   LOCAL oDlg, oBrw, nChoice := 0, lArray := .T., nField, lNewFont := .F.
   LOCAL i, aLen, nLen := 0, addX := 20, addY := 20, minWidth := 0, x1
   LOCAL hDC, aMetr, width, height, aArea, aRect
   LOCAL nStyle := 2147483648 + 268435456 + 12582912 + 524288 + 262144

   IF cTitle == Nil ; cTitle := "" ; ENDIF
   IF nLeft == Nil .AND. nTop == Nil ; nStyle += 2048 ; ENDIF
   IF nLeft == Nil ; nLeft := 0 ; ENDIF
   IF nTop == Nil ; nTop := 0 ; ENDIF
   IF oFont == Nil
      oFont := HFont():Add( "MS Sans Serif", 0, - 13 )
      lNewFont := .T.
   ENDIF
   IF cOk <> Nil
      minWidth += 120
      IF cCancel <> Nil
         minWidth += 100
      ENDIF
      addY += 30
   ENDIF

   IF ValType( arr ) == "C"
      lArray := .F.
      aLen := RecCount()
      IF ( nField := FieldPos( arr ) ) == 0
         RETURN 0
      ENDIF
      nLen := dbFieldInfo( 3, nField )
   ELSE
      aLen := Len( arr )
      IF ValType( arr[ 1 ] ) == "A"
         FOR i := 1 TO aLen
            nLen := Max( nLen, Len( arr[ i, 1 ] ) )
         NEXT
      ELSE
         FOR i := 1 TO aLen
            nLen := Max( nLen, Len( arr[ i ] ) )
         NEXT
      ENDIF
   ENDIF

   hDC := GetDC( GetActiveWindow() )
   SelectObject( hDC, oFont:handle )
   aMetr := GetTextMetric( hDC )
   aArea := GetDeviceArea( hDC )
   aRect := GetWindowRect( GetActiveWindow() )
   ReleaseDC( GetActiveWindow(), hDC )
   height := ( aMetr[ 1 ] + 1 ) * aLen + 4 + addY + 8
   IF height > aArea[ 2 ] - aRect[ 2 ] - nTop - 60
      height := aArea[ 2 ] - aRect[ 2 ] - nTop - 60
   ENDIF
   width := Max( aMetr[ 2 ] * 2 * nLen + addX, minWidth )






   oDlg := HDialog():New( Iif(.F.,10,11), nStyle,nLeft,nTop,width,height,cTitle,oFont,{ | o | ResetWindowPos( o:handle ), o:nInitFocus := oBrw },,,,,,,.F.,,,.F.,,,.F.,,, .F.,.F.)

   IF lArray
      oBrw := HBrowse():New( Iif(.F.,2,Iif(.T.,1,0)),,,,0,0,,,,,,,,,,.F.,.F., .F., .F.,,,, .F., .F.,,,,,,,,,,, .F. ); oBrw:name := "oBrw"
      oBrw:aArray := arr
      IF ValType( arr[ 1 ] ) == "A"
         oBrw:AddColumn( HColumn():New( , { | value, o | ( (value) := (value) ), o:aArray[ o:nCurrent, 1 ] }, "C", nLen ) )
      ELSE
         oBrw:AddColumn( HColumn():New( , { | value, o | ( (value) := (value) ), o:aArray[ o:nCurrent ] }, "C", nLen ) )
      ENDIF
   ELSE
      oBrw := HBrowse():New( Iif(.T.,2,Iif(.F.,1,0)),,,,0,0,,,,,,,,,,.F.,.F., .F., .F.,,,, .F., .F.,,,,,,,,,,, .F. ); oBrw:name := "oBrw"
      oBrw:AddColumn( HColumn():New( , { | value, o | ( (value) := (value) ), ( o:Alias ) ->( FieldGet( nField ) ) }, "C", nLen ) )
   ENDIF

   oBrw:oFont  := oFont
   oBrw:bSize  := { | o, x, y | MoveWindow( o:handle, addX / 2, 10, x - addX, y - addY ) }
   oBrw:bEnter := { | o | nChoice := o:nCurrent, EndDialog( o:oParent:handle ) }
   oBrw:bKeyDown := {|o,key|( (o) := (o) ),Iif(key==27,(EndDialog(oDlg:handle),.F.),.T.)}

   oBrw:lDispHead := .F.
   IF clrT <> Nil
      oBrw:tcolor := clrT
   ENDIF
   IF clrB <> Nil
      oBrw:bcolor := clrB
   ENDIF
   IF clrTSel <> Nil
      oBrw:tcolorSel := clrTSel
   ENDIF
   IF clrBSel <> Nil
      oBrw:bcolorSel := clrBSel
   ENDIF

   IF cOk <> Nil
      x1 := Int( width / 2 ) - IIf( cCancel <> Nil, 90, 40 )
      HButton():New(,,,x1,height - 36,80, 30,cOk,,,,,{ || nChoice := oBrw:nCurrent, EndDialog( oDlg:handle ) },,,,,.F. );
      IF cCancel <> Nil
         HButton():New(,,,x1 + 100,height - 36,80, 30,cCancel,,,,,{ || nChoice := 0, EndDialog( oDlg:handle ) },,,,,.F. );
      ENDIF
   ENDIF

   oDlg:Activate()
   IF lNewFont
      oFont:Release()
   ENDIF

   RETURN nChoice

FUNCTION ShowProgress( nStep, maxPos, nRange, cTitle, oWnd, x1, y1, width, height )
   LOCAL nStyle := 2147483648 + 268435456 + 12582912 + 524288 + 262144
   STATIC oDlg, hPBar, iCou, nLimit

   IF nStep == 0
      nLimit := IIf( nRange <> Nil, Int( nRange / maxPos ), 1 )
      iCou := 0
      x1 := IIf( x1 == Nil, 0, x1 )
      y1 := IIf( x1 == Nil, 0, y1 )
      width := IIf( width == Nil, 220, width )
      height := IIf( height == Nil, 55, height )
      IF x1 == 0
         nStyle += 2048
      ENDIF
      IF oWnd <> Nil
         oDlg := Nil
         hPBar := CreateProgressBar( oWnd:handle, maxPos, 20, 25, width - 40, 20 )
      ELSE



         oDlg := HDialog():New( Iif(.F.,10,11), nStyle,x1,y1,width,height,cTitle,,{ | o | hPBar := CreateProgressBar( o:handle, maxPos, 20, 25, width - 40, 20 ) },,,,,,,.F.,,,.F.,,,.F.,,, .F.,.F.)
         oDlg:Activate(.T.,,,.F. )
      ENDIF
   ELSEIF nStep == 1
      iCou ++
      IF iCou == nLimit
         iCou := 0
         UpdateProgressBar( hPBar )
      ENDIF
   ELSEIF nStep == 2
      UpdateProgressBar( hPBar )
   ELSEIF nStep == 3
      SetWindowText( oDlg:handle, cTitle )
      IF maxPos <> Nil
         SetProgressBar( hPBar, maxPos )
      ENDIF
   ELSE
      DestroyWindow( hPBar )
      IF oDlg <> Nil
         EndDialog( oDlg:handle )
      ENDIF
   ENDIF

   RETURN Nil

FUNCTION EndWindow()
   IF HWindow():GetMain() <> Nil
      SendMessage( HWindow():aWindows[ 1 ]:handle, 274, 61536, 0 )
   ENDIF
   RETURN Nil

FUNCTION HdSerial( cDrive )

   LOCAL n       :=  HDGETSERIAL( cDrive )
   LOCAL cHex    :=  NumToHex(n)
   LOCAL cResult
   cResult := SubStr( cHex, 1, 4 ) + "-" + SubStr( cHex, 5, 4 )

   RETURN cResult

FUNCTION Hwg_GetIni( cSection, cEntry, cDefault, cFile )
   RETURN GetPrivateProfileString( cSection, cEntry, cDefault, cFile )

FUNCTION Hwg_WriteIni( cSection, cEntry, cValue, cFile )
   RETURN( WritePrivateProfileString( cSection, cEntry, cValue, cFile ) )

FUNCTION SetHelpFileName ( cNewName )
   STATIC cName := ""
   LOCAL cOldName := cName
   IF cNewName <> Nil
      cName := cNewName
   ENDIF
   RETURN cOldName

FUNCTION RefreshAllGets( oDlg )

   AEval( oDlg:GetList, { | o | o:Refresh() } )
   RETURN Nil










FUNCTION HWG_SelectMultipleFiles( cDescr, cTip, cIniDir, cTitle )

   LOCAL aFiles, cPath, cFile, cFilter, nAt
   LOCAL hWnd := 0
   LOCAL nFlags := NIL
   LOCAL nIndex := 1

   cFilter := cDescr + Chr( 0 ) + cTip + Chr( 0 )




   cFile := repl( chr( 0 ), 32000 )
   aFiles := {}

   cPath := _GetOpenFileName( hWnd, @cFile, cTitle, cFilter, nFlags, cIniDir, Nil, @nIndex )

   nAt := At( Chr( 0 ) + Chr( 0 ), cFile )
   IF nAt <> 0
      cFile := Left( cFile, nAt - 1 )
      nAt := At( Chr( 0 ), cFile )
      IF nAt <> 0

         cFile := SubStr( cFile, nAt + 1 )

         WHILE ! cFile == ""
            nAt := At( Chr( 0 ), cFile )
            IF nAt <> 0

               AAdd( aFiles, cPath + hb_osPathSeparator() +  Left( cFile, nAt - 1 ) )
               cFile := SubStr( cFile, nAt + 1 )
            ELSE
               AAdd( aFiles, cPath + hb_osPathSeparator() + cFile )
               EXIT
            ENDIF
         ENDDO
      ELSE

         AAdd( aFiles, cPath )
      ENDIF
   ENDIF
   RETURN aFiles

FUNCTION HWG_Version( oTip )
   LOCAL oVersion
   IF oTip == 1
      oVersion := "HwGUI " + "2.17" + " " + Version()
   ELSE
      oVersion := "HwGUI " + "2.17"
   ENDIF
   RETURN oVersion

FUNCTION TxtRect( cTxt, oWin, oFont )

   LOCAL hDC
   LOCAL ASize
   LOCAL hFont

   oFont := IIF( oFont <> Nil, oFont, oWin:oFont )

   hDC       := GetDC( oWin:handle )
   IF oFont == Nil .AND. oWin:oParent <> Nil
      oFont := oWin:oParent:oFont
   ENDIF
   IF oFont <> Nil
      hFont := SelectObject( hDC, oFont:handle )
   ENDIF
   ASize     := GetTextSize( hDC, cTxt )
   IF oFont <> Nil
      SelectObject( hDC, hFont )
   ENDIF
   ReleaseDC( oWin:handle, hDC )
   RETURN ASize

FUNCTION SELECTFILE(aP1,aP2,cP3,cP4)
Local cRET:=""
cRET := HWG_SelectFile( aP1, aP2 ,cP3 ,cP4 )
RETURN(cRET)

FUNCTION SELECTFOLDER(cTITDIALOG,cLOCALOPEN)
Local cRET:="", cSALVA_PATH := CAMINHO_EXE()

cRET:=HWG_SELECTFOLDER(cTITDIALOG,cLOCALOPEN)
Dirchange(cSALVA_PATH)

RETURN(cRET)

FUNCTION SELECTMULTIPLEFILES(cDescr, cTip, cIniDir, cTitle)
Local aRET, cSALVA_PATH := CAMINHO_EXE()

aRET:=HWG_SELECTMULTIPLEFILES(cDescr, cTip, cIniDir, cTitle)
Dirchange(cSALVA_PATH)

RETURN(aRET)

FUNCTION SAVEFILE(cP1,cP2,cP3,cP4)
Local cRET

cRET:=HWG_SAVEFILE(cP1,cP2,cP3,cP4)
RETURN(cRET)

STATIC FUNCTION NOMEEXECUTAVEL(lPath)
LOCAL nPos, cRet
If Empty(lpath)
   nPos:= RAT("\", hb_argv(0))
   cRet:= substr(hb_argv(0), nPos+1)
else
   cRet:= hb_argv(0)
endif
Return cRet


STATIC FUNCTION CAMINHO_EXE
Return(Substr(Nomeexecutavel(.T.),1,(len(Nomeexecutavel(.T.))- len(Nomeexecutavel()))-1 ))



FUNCTION HWG_DEBUG(cLOG)

LOCAL nHandle_TXT, cFILELOG:=CAMINHO_EXE()+"\DEBUG_HWGUI.TXT"

IF EMPTY(cLOG)
   cLOG:= ""
ENDIF

IF FILE(cFILELOG)
   nHandle_TXT := FOpen( cFILELOG,2)

   FSEEK( nHandle_TXT, 0, 2 )

   IF nHandle_TXT<>NIL
      FWRITE(nHandle_TXT, TRANSFORM(DTOC(DATE()),"@D")+"|"+time()+"|"+ALLTRIM(cLOG)+ Chr(13)+Chr(10) )
   ENDIF
   FCLOSE(nHandle_TXT)
ENDIF

RETURN(.T.)

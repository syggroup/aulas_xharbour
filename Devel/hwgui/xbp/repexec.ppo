#line 19 "source\repexec.prg"
STATIC aPaintRep := Nil

EXTERNAL DBUseArea
EXTERNAL RecNo
EXTERNAL DBSkip
EXTERNAL DBGoTop
EXTERNAL DBCloseArea

FUNCTION ClonePaintRep( ar )
   aPaintRep := AClone( ar )
   RETURN Nil

FUNCTION SetPaintRep( ar )
   aPaintRep := ar
   RETURN Nil

FUNCTION OpenReport( fname, repName )
   LOCAL strbuf := Space( 512 ), poz := 513, stroka, nMode := 0
   LOCAL han
   LOCAL itemName, aItem, res := .T.
   LOCAL nFormWidth

   IF aPaintRep <> Nil .AND. fname == aPaintRep[ 7 ] .AND. repName == aPaintRep[ 8 ]
      RETURN res
   ENDIF
   han := FOpen( fname, 0 + 64 )
   IF han <> - 1
      while .T.
         stroka := RDSTR( han, @strbuf, @poz, 512 )
         IF Len( stroka ) = 0
            EXIT
         ENDIF
         IF Left( stroka, 1 ) == ";"
            LOOP
         ENDIF
         IF nMode == 0
            IF Left( stroka, 1 ) == "#"
               IF Upper( SubStr( stroka, 2, 6 ) ) == "REPORT"
                  stroka := LTrim( SubStr( stroka, 9 ) )
                  IF Upper( stroka ) == Upper( repName )
                     nMode := 1
                     aPaintRep := { 0, 0, 0, 0, 0, { }, fname, repName, .F., 0, Nil }
                  ENDIF
               ENDIF
            ENDIF
         ELSEIF nMode == 1
            IF Left( stroka, 1 ) == "#"
               IF Upper( SubStr( stroka, 2, 6 ) ) == "ENDREP"
                  EXIT
               ELSEIF Upper( SubStr( stroka, 2, 6 ) ) == "SCRIPT"
                  nMode := 2
                  IF aItem <> Nil
                     aItem[ 12 ] := ""
                  ELSE
                     aPaintRep[ 11 ] := ""
                  ENDIF
               ENDIF
            ELSE
               IF ( itemName := NextItem( stroka, .T. ) ) == "FORM"
                  aPaintRep[ 1 ] := Val( NextItem( stroka ) )
                  aPaintRep[ 2 ] := Val( NextItem( stroka ) )
                  nFormWidth := Val( NextItem( stroka ) )
                  aPaintRep[ 3 ] := nFormWidth / aPaintRep[ 1 ]
               ELSEIF itemName == "TEXT"



                  AAdd( aPaintRep[ 6 ], { 1, NextItem( stroka ), Val( NextItem( stroka ) ),  Val( NextItem( stroka ) ), Val( NextItem( stroka ) ),  Val( NextItem( stroka ) ), Val( NextItem( stroka ) ), 0, NextItem( stroka ),  Val( NextItem( stroka ) ), 0, Nil, 0 } )
                  aItem := ATail( aPaintRep[ 6 ] )




                  aItem[ 9 ] := HFont():Add( NextItem( aItem[ 9 ], .T., "," ),  Val( NextItem( aItem[ 9 ],, "," ) ), Val( NextItem( aItem[ 9 ],, "," ) ),  Val( NextItem( aItem[ 9 ],, "," ) ), Val( NextItem( aItem[ 9 ],, "," ) ),  Val( NextItem( aItem[ 9 ],, "," ) ), Val( NextItem( aItem[ 9 ],, "," ) ),  Val( NextItem( aItem[ 9 ],, "," ) ) )



                  IF aItem[ 3 ] == Nil .OR. aItem[ 3 ] == 0 .OR.  aItem[ 4 ] == Nil .OR. aItem[ 4 ] == 0 .OR.  aItem[ 5 ] == Nil .OR. aItem[ 5 ] == 0 .OR.  aItem[ 6 ] == Nil .OR. aItem[ 6 ] == 0
                  MsgStop( "Error: " + stroka )
                  res := .F.
                  EXIT
               ENDIF
            ELSEIF itemName == "HLINE" .OR. itemName == "VLINE" .OR. itemName == "BOX"



               AAdd( aPaintRep[ 6 ], { IIf( itemName == "HLINE", 2, IIf( itemName == "VLINE", 3, 4 ) ),  "", Val( NextItem( stroka ) ),  Val( NextItem( stroka ) ), Val( NextItem( stroka ) ),  Val( NextItem( stroka ) ), 0, NextItem( stroka ), 0, 0, 0, Nil, 0 } )
               aItem := ATail( aPaintRep[ 6 ] )

               aItem[ 8 ] := HPen():Add( Val( NextItem( aItem[ 8 ], .T., "," ) ),  Val( NextItem( aItem[ 8 ],, "," ) ), Val( NextItem( aItem[ 8 ],, "," ) ) )



               IF aItem[ 3 ] == Nil .OR. aItem[ 3 ] == 0 .OR.  aItem[ 4 ] == Nil .OR. aItem[ 4 ] == 0 .OR.  aItem[ 5 ] == Nil .OR. aItem[ 5 ] == 0 .OR.  aItem[ 6 ] == Nil .OR. aItem[ 6 ] == 0
               MsgStop( "Error: " + stroka )
               res := .F.
               EXIT
            ENDIF
         ELSEIF itemName == "BITMAP"



            AAdd( aPaintRep[ 6 ], { 5, NextItem( stroka ),  Val( NextItem( stroka ) ),  Val( NextItem( stroka ) ), Val( NextItem( stroka ) ),  Val( NextItem( stroka ) ), 0, 0, 0, 0, 0, Nil, 0 } )
            aItem := ATail( aPaintRep[ 6 ] )



            IF aItem[ 3 ] == Nil .OR. aItem[ 3 ] == 0 .OR.  aItem[ 4 ] == Nil .OR. aItem[ 4 ] == 0 .OR.  aItem[ 5 ] == Nil .OR. aItem[ 5 ] == 0 .OR.  aItem[ 6 ] == Nil .OR. aItem[ 6 ] == 0
               MsgStop( "Error: " + stroka )
               res := .F.
               EXIT
            ENDIF
         ELSEIF itemName == "MARKER"



            AAdd( aPaintRep[ 6 ], { 6, NextItem( stroka ), Val( NextItem( stroka ) ),  Val( NextItem( stroka ) ), Val( NextItem( stroka ) ),  Val( NextItem( stroka ) ), Val( NextItem( stroka ) ),  0, 0, 0, 0, Nil, 0 } )
            aItem := ATail( aPaintRep[ 6 ] )
         ENDIF
      ENDIF
   ELSEIF nMode == 2
      IF Left( stroka, 1 ) == "#" .AND. Upper( SubStr( stroka, 2, 6 ) ) == "ENDSCR"
         nMode := 1
      ELSE
         IF aItem <> Nil
            aItem[ 12 ] += stroka + Chr( 13 ) + Chr( 10 )
         ELSE
            aPaintRep[ 11 ] += stroka + Chr( 13 ) + Chr( 10 )
         ENDIF
      ENDIF
   ENDIF
ENDDO
FClose( han )
ELSE
   MsgStop( "Can't open " + fname )
   RETURN .F.
ENDIF
IF Empty( aPaintRep[ 6 ] )
   MsgStop( repName + " not found or empty!" )
   res := .F.
ELSE
   aPaintRep[ 6 ] := ASort( aPaintRep[ 6 ],,, { | z, y | z[ 4 ] < y[ 4 ] .OR.( z[ 4 ] == y[ 4 ] .AND.z[ 3 ] < y[ 3 ] ) .OR.( z[ 4 ] == y[ 4 ] .AND.z[ 3 ] == y[ 3 ] .AND.( z[ 5 ] < y[ 5 ] .OR.z[ 6 ] < y[ 6 ] ) ) } )
ENDIF
RETURN res

FUNCTION RecalcForm( aPaintRep, nFormWidth )
   LOCAL hDC, aMetr, aItem, i
   hDC := GetDC( GetActiveWindow() )
   aMetr := GetDeviceArea( hDC )
   aPaintRep[ 3 ] := ( aMetr[ 1 ] - 65 ) / aPaintRep[ 1 ]
   ReleaseDC( GetActiveWindow(), hDC )

   IF nFormWidth <> aMetr[ 1 ] - 65
      FOR i := 1 TO Len( aPaintRep[ 6 ] )
         aItem := aPaintRep[ 6, i ]
         aItem[ 3 ] := Round( aItem[ 3 ] * ( aMetr[ 1 ] - 65 ) / nFormWidth, 0 )
         aItem[ 4 ] := Round( aItem[ 4 ] * ( aMetr[ 1 ] - 65 ) / nFormWidth, 0 )
         aItem[ 5 ] := Round( aItem[ 5 ] * ( aMetr[ 1 ] - 65 ) / nFormWidth, 0 )
         aItem[ 6 ] := Round( aItem[ 6 ] * ( aMetr[ 1 ] - 65 ) / nFormWidth, 0 )
      NEXT
   ENDIF
   RETURN Nil

FUNCTION PrintReport( printerName, oPrn, lPreview )
   LOCAL oPrinter := IIf( oPrn <> Nil, oPrn, HPrinter():New( printerName ) )
   LOCAL aPrnCoors, prnXCoef, prnYCoef
   LOCAL iItem, aItem, nLineStartY := 0, nLineHeight := 0, nPHStart := 0
   LOCAL iPH := 0, iSL := 0, iEL := 0, iPF := 0, iEPF := 0, iDF := 0
   LOCAL poz := 0, stroka, varName, varValue, i
   LOCAL oFont
   LOCAL lAddMode := .F., nYadd := 0, nEndList := 0

   MEMVAR lFirst, lFinish, lLastCycle, oFontStandard
   PRIVATE lFirst := .T., lFinish := .T., lLastCycle := .F.

   IF oPrinter:hDCPrn == Nil .OR. oPrinter:hDCPrn == 0
      RETURN .F.
   ENDIF

   aPrnCoors := GetDeviceArea( oPrinter:hDCPrn )
   prnXCoef := ( aPrnCoors[ 1 ] / aPaintRep[ 1 ] ) / aPaintRep[ 3 ]
   prnYCoef := ( aPrnCoors[ 2 ] / aPaintRep[ 2 ] ) / aPaintRep[ 3 ]


   IF Type( "oFontStandard" ) = "U"
      PRIVATE oFontStandard := HFont():Add( "Arial", 0, - 13, 400, 204 )
   ENDIF

   FOR i := 1 TO Len( aPaintRep[ 6 ] )
      IF aPaintRep[ 6, i, 1 ] == 1
         oFont := aPaintRep[ 6, i, 9 ]


         aPaintRep[ 6, i, 13 ] := HFont():Add( oFont:name,  oFont:width, Round( oFont:height * prnYCoef, 0 ), oFont:weight,  oFont:charset, oFont:italic )
      ENDIF
   NEXT

   IF ValType( aPaintRep[ 11 ] ) == "C"
      while .T.
         stroka := RDSTR( , aPaintRep[ 11 ], @poz )
         IF Len( stroka ) = 0
            EXIT
         ENDIF
         while ! Empty( varName := getNextVar( @stroka, @varValue ) )
            PRIVATE &varName
            IF varValue <> Nil
               &varName := &varValue
            ENDIF
         ENDDO
      ENDDO
   ENDIF

   FOR iItem := 1 TO Len( aPaintRep[ 6 ] )
      aItem := aPaintRep[ 6, iItem ]
      IF aItem[ 1 ] == 6
         aItem[ 13 ] := 0
         IF aItem[ 2 ] == "SL"
            nLineStartY := aItem[ 4 ]
            aItem[ 13 ] := 0
            iSL := iItem
         ELSEIF aItem[ 2 ] == "EL"
            nLineHeight := aItem[ 4 ] - nLineStartY
            iEL := iItem
         ELSEIF aItem[ 2 ] == "PF"
            nEndList := aItem[ 4 ]
            iPF := iItem
         ELSEIF aItem[ 2 ] == "EPF"
            iEPF := iItem
         ELSEIF  aItem[ 2 ] == "DF"
            iDF := iItem
            IF iPF == 0
               nEndList := aItem[ 4 ]
            ENDIF
         ELSEIF aItem[ 2 ] == "PH"
            iPH := iItem
            nPHStart := aItem[ 4 ]
         ENDIF
      ENDIF
   NEXT
   IF iPH > 0 .AND. iSL == 0
      MsgStop( "'Start Line' marker is absent" )
      oPrinter:END()
      RETURN .F.
   ELSEIF iSL > 0 .AND. iEL == 0
      MsgStop( "'End Line' marker is absent" )
      oPrinter:END()
      RETURN .F.
   ELSEIF iPF > 0 .AND. iEPF == 0
      MsgStop( "'End of Page Footer' marker is absent" )
      oPrinter:END()
      RETURN .F.
   ELSEIF iSL > 0 .AND. iPF == 0 .AND. iDF == 0
      MsgStop( "'Page Footer' and 'Document Footer' markers are absent" )
      oPrinter:END()
      RETURN .F.
   ENDIF






      oPrinter:StartDoc( lPreview )
      oPrinter:StartPage()


   while .T.
      iItem := 1
      while iItem <= Len( aPaintRep[ 6 ] )
         aItem := aPaintRep[ 6, iItem ]

         IF aItem[ 1 ] == 6
            IF aItem[ 2 ] == "PH"
               IF aItem[ 13 ] == 0
                  aItem[ 13 ] := 1
                  FOR i := 1 TO iPH - 1
                     IF aPaintRep[ 6, i, 1 ] == 5
                        PrintItem( oPrinter, aPaintRep, aPaintRep[ 6, i ], prnXCoef, prnYCoef, IIf( lAddMode, nYadd, 0 ), .T. )
                     ENDIF
                  NEXT
               ENDIF
            ELSEIF aItem[ 2 ] == "SL"
               IF aItem[ 13 ] == 0

                  FOR i := 1 TO iSL - 1
                     IF aPaintRep[ 6, i, 1 ] == 5
                        PrintItem( oPrinter, aPaintRep, aPaintRep[ 6, i ], prnXCoef, prnYCoef, IIf( lAddMode, nYadd, 0 ), .T. )
                     ENDIF
                  NEXT

                  aItem[ 13 ] := 1
                  IF ! ScriptExecute( aItem )




                        oPrinter:EndPage()
                        oPrinter:EndDoc()
                        oPrinter:END()

                     RETURN .F.
                  ENDIF
                  IF lLastCycle
                     iItem := iEL + 1
                     LOOP
                  ENDIF
               ENDIF
               lAddMode := .T.
            ELSEIF aItem[ 2 ] == "EL"
               FOR i := iSL + 1 TO iEL - 1
                  IF aPaintRep[ 6, i, 1 ] == 5
                     PrintItem( oPrinter, aPaintRep, aPaintRep[ 6, i ], prnXCoef, prnYCoef, IIf( lAddMode, nYadd, 0 ), .T. )
                  ENDIF
               NEXT
               IF ! ScriptExecute( aItem )




                     oPrinter:EndPage()
                     oPrinter:EndDoc()
                     oPrinter:END()

                  RETURN .F.
               ENDIF
               IF ! lLastCycle
                  nYadd += nLineHeight

                  IF nLineStartY + nYadd + nLineHeight >= nEndList

                     IF iPF == 0




                           oPrinter:EndPage()
                           oPrinter:StartPage()

                        nYadd := 10 - IIf( nPHStart > 0, nPHStart, nLineStartY )
                        lAddMode := .T.
                        IF iPH == 0
                           iItem := iSL
                        ELSE
                           iItem := iPH
                        ENDIF
                     ELSE
                        lAddMode := .F.
                     ENDIF
                  ELSE
                     iItem := iSL
                  ENDIF
               ELSE
                  lAddMode := .F.
               ENDIF
            ELSEIF aItem[ 2 ] == "EPF"
               FOR i := iPF + 1 TO iEPF - 1
                  IF aPaintRep[ 6, i, 1 ] == 5
                     PrintItem( oPrinter, aPaintRep, aPaintRep[ 6, i ], prnXCoef, prnYCoef, IIf( lAddMode, nYadd, 0 ), .T. )
                  ENDIF
               NEXT
               IF ! lLastCycle




                     oPrinter:EndPage()
                     oPrinter:StartPage()

                  nYadd := 10 - IIf( nPHStart > 0, nPHStart, nLineStartY )
                  lAddMode := .T.
                  IF iPH == 0
                     iItem := iSL
                  ELSE
                     iItem := iPH
                  ENDIF
               ENDIF
            ELSEIF aItem[ 2 ] == "DF"
               lAddMode := .F.
               IF aItem[ 7 ] == 1
               ENDIF
            ENDIF
         ELSE
            IF aItem[ 1 ] == 1
               IF ! ScriptExecute( aItem )




                     oPrinter:EndPage()
                     oPrinter:EndDoc()

                  oPrinter:END()
                  RETURN .F.
               ENDIF
            ENDIF
            IF aItem[ 1 ] <> 5
               PrintItem( oPrinter, aPaintRep, aItem, prnXCoef, prnYCoef, IIf( lAddMode, nYadd, 0 ), .T. )
            ENDIF
         ENDIF
         iItem ++
      ENDDO
      FOR i := IIf( iSL == 0, 1, IIf( iDF > 0, iDF + 1, IIf( iPF > 0, iEPF + 1, iEL + 1 ) ) ) TO Len( aPaintRep[ 6 ] )
         IF aPaintRep[ 6, i, 1 ] == 5
            PrintItem( oPrinter, aPaintRep, aPaintRep[ 6, i ], prnXCoef, prnYCoef, IIf( lAddMode, nYadd, 0 ), .T. )
         ENDIF
      NEXT
      IF lFinish
         EXIT
      ENDIF
   ENDDO





      oPrinter:EndPage()
      oPrinter:EndDoc()
      IF lPreview <> Nil .AND. lPreview
         oPrinter:Preview()
      ENDIF

   oPrinter:END()

   FOR i := 1 TO Len( aPaintRep[ 6 ] )
      IF aPaintRep[ 6, i, 1 ] == 1
         aPaintRep[ 6, i, 13 ]:Release()
         aPaintRep[ 6, i, 13 ] := Nil
      ENDIF
   NEXT

   RETURN .T.

FUNCTION PrintItem( oPrinter, aPaintRep, aItem, prnXCoef, prnYCoef, nYadd, lCalc )
   LOCAL x1 := aItem[ 3 ], y1 := aItem[ 4 ] + nYadd, x2, y2
   LOCAL hBitmap, stroka

   ( (aPaintRep) := (aPaintRep) )

   x2 := x1 + aItem[ 5 ] - 1
   y2 := y1 + aItem[ 6 ] - 1

   x1 := Round( x1 * prnXCoef, 0 )
   y1 := Round( y1 * prnYCoef, 0 )
   x2 := Round( x2 * prnXCoef, 0 )
   y2 := Round( y2 * prnYCoef, 0 )






      IF aItem[ 1 ] == 1
         IF aItem[ 10 ] > 0
            stroka := IIf( lCalc, &( aItem[ 2 ] ), "" )
         ELSE
            stroka := aItem[ 2 ]
         ENDIF
         IF ! Empty( aItem[ 2 ] )


            oPrinter:Say( stroka, x1, y1, x2, y2,  IIf( aItem[ 7 ] == 0, 0, IIf( aItem[ 7 ] == 1, 2, 1 ) ),  aItem[ 13 ] )
         ENDIF
      ELSEIF aItem[ 1 ] == 2
         oPrinter:Line( x1, Round( ( y1 + y2 ) / 2, 0 ), x2, Round( ( y1 + y2 ) / 2, 0 ), aItem[ 8 ] )
      ELSEIF aItem[ 1 ] == 3
         oPrinter:Line( Round( ( x1 + x2 ) / 2, 0 ), y1, Round( ( x1 + x2 ) / 2, 0 ), y2, aItem[ 8 ] )
      ELSEIF aItem[ 1 ] == 4
         oPrinter:Box( x1, y1, x2, y2, aItem[ 8 ] )
      ELSEIF aItem[ 1 ] == 5
         hBitmap := OpenBitmap( aItem[ 2 ], oPrinter:hDC )

         oPrinter:Bitmap( x1, y1, x2, y2,, hBitmap )
         DeleteObject( hBitmap )

      ENDIF

   RETURN Nil

STATIC FUNCTION ScriptExecute( aItem )
   LOCAL nError, nLineEr
   IF aItem[ 12 ] <> Nil .AND. ! Empty( aItem[ 12 ] )
      IF ValType( aItem[ 12 ] ) == "C"
         IF ( aItem[ 12 ] := RdScript( , aItem[ 12 ] ) ) == Nil
            nError := CompileErr( @nLineEr )
            MsgStop( "Script error (" + LTrim( Str( nError ) ) + "), line " + LTrim( Str( nLineEr ) ) )
            RETURN .F.
         ENDIF
      ENDIF
      DoScript( aItem[ 12 ] )
      RETURN .T.
   ENDIF
   RETURN .T.

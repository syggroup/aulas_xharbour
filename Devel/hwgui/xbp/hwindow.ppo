#line 112 "d:\devel\xharbour_bcc73\include\hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 21 "source\hwindow.prg"
STATIC FUNCTION onSize( oWnd, wParam, lParam )
   LOCAL aCoors := GetWindowRect( oWnd:handle )

   IF oWnd:oEmbedded <> Nil
      oWnd:oEmbedded:Resize( LOWORD( lParam ), HIWORD( lParam ) )
   ENDIF

   oWnd:Super:onEvent( 5, wParam, lParam )

   oWnd:nWidth  := aCoors[ 3 ] - aCoors[ 1 ]
   oWnd:nHeight := aCoors[ 4 ] - aCoors[ 2 ]

   IF ( Valtype(oWnd:bSize) == "B" )
      Eval( oWnd:bSize, oWnd, LOWORD( lParam ), HIWORD( lParam ) )
   ENDIF
   IF oWnd:Type == 2 .AND. Len( HWindow():aWindows ) > 1
      aCoors := GetClientRect( oWnd:handle )


      SetWindowPos( HWindow():aWindows[ 2 ]:handle, Nil, oWnd:aOffset[ 1 ], oWnd:aOffset[ 2 ], aCoors[ 3 ] - oWnd:aOffset[ 1 ] - oWnd:aOffset[ 3 ], aCoors[ 4 ] - oWnd:aOffset[ 2 ] - oWnd:aOffset[ 4 ] , 0x0004 + 0x0010 + 0x0400 )
      aCoors := GetWindowRect( HWindow():aWindows[ 2 ]:handle )
      HWindow():aWindows[ 2 ]:nWidth  := aCoors[ 3 ] - aCoors[ 1 ]
      HWindow():aWindows[ 2 ]:nHeight := aCoors[ 4 ] - aCoors[ 2 ]

      IF !Empty( oWnd:Screen )
          oWnd:Screen:nWidth  := aCoors[ 3 ] - aCoors[ 1 ]
          oWnd:Screen:nHeight := aCoors[ 4 ] - aCoors[ 2 ]

          SetWindowPos( oWnd:screen:handle, Nil, 0, 0, oWnd:Screen:nWidth, oWnd:Screen:nHeight, 0x0010 + 0x0400 + 0x0004 )
          InvalidateRect( oWnd:Screen:handle, 1 )
      ENDIF

      IF ! Empty( oWnd := oWnd:GetMdiActive() ) .AND.oWnd:type = 3 .AND. oWnd:lMaximized .AND. ( oWnd:lModal .OR. oWnd:lChild )
         oWnd:lMaximized := .F.

      ENDIF

      RETURN 0
   ENDIF

   RETURN - 1

STATIC FUNCTION onDestroy( oWnd )

   IF oWnd:oEmbedded <> Nil
      oWnd:oEmbedded:END()
   ENDIF
   oWnd:Super:onEvent( 2 )
   HWindow():DelItem( oWnd )

   RETURN 0

_HB_CLASS HWindow ; UTILITY FUNCTION HWindow(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HWindow" , {HCustomWindow():classh} ) ) ; ;

_HB_MEMBER { aWindows} ; IIF( !.F., s_oClass:AddMultiClsData(, { }, nScope + IIF( .F., 32, 0 ) + IIF( .T., 64, 0 ), { "aWindows" }, .F. ), )
_HB_MEMBER { szAppName} ; IIF( !.F., s_oClass:AddMultiClsData(, "Sygecom", nScope + IIF( .F., 32, 0 ) + IIF( .T., 64, 0 ), { "szAppName" }, .F. ), )

   _HB_MEMBER { Screen} ; IIF( !.F., s_oClass:AddMultiClsData(,, nScope + IIF( .F., 32, 0 ) + IIF( .T., 64, 0 ), { "Screen" }, .F. ), )

   _HB_MEMBER { menu, oPopup, hAccel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "menu" , "oPopup" , "hAccel" }, .F., .F. ), )
   _HB_MEMBER { oIcon, oBmp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oIcon" , "oBmp" }, .F., .F. ), )
   _HB_MEMBER { lBmpCenter} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lBmpCenter" }, .F., .F. ), )
   _HB_MEMBER { nBmpClr} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nBmpClr" }, .F., .F. ), )
   _HB_MEMBER { lUpdated} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lUpdated" }, .F., .F. ), )
   _HB_MEMBER { lClipper} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lClipper" }, .F., .F. ), )
   _HB_MEMBER { GetList} ; IIF( !.F., s_oClass:AddMultiData(, { }, nScope + IIF( .F., 32, 0 ), { "GetList" }, .F., .F. ), )
   _HB_MEMBER { KeyList} ; IIF( !.F., s_oClass:AddMultiData(, { }, nScope + IIF( .F., 32, 0 ), { "KeyList" }, .F., .F. ), )
   _HB_MEMBER { nLastKey} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nLastKey" }, .F., .F. ), )
   _HB_MEMBER { lExitOnEnter} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lExitOnEnter" }, .F., .F. ), )
   _HB_MEMBER { lExitOnEsc} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lExitOnEsc" }, .F., .F. ), )
   _HB_MEMBER { lGetSkiponEsc} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lGetSkiponEsc" }, .F., .F. ), )
   _HB_MEMBER { bCloseQuery} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bCloseQuery" }, .F., .F. ), )
   _HB_MEMBER { nFocus} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nFocus" }, .F., .F. ), )
   _HB_MEMBER { WindowState} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "WindowState" }, .F., .F. ), )
   _HB_MEMBER { oClient} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oClient" }, .F., .F. ), )
   _HB_MEMBER { lChild} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lChild" }, .F., .F. ), )
   _HB_MEMBER { lDisableCtrlTab} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lDisableCtrlTab" }, .F., .F. ), )
   _HB_MEMBER { lModal} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lModal" }, .F., .F. ), )
   _HB_MEMBER { aOffset} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aOffset" }, .F., .F. ), )
   _HB_MEMBER { oEmbedded} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oEmbedded" }, .F., .F. ), )
   _HB_MEMBER { bScroll} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bScroll" }, .F., .F. ), )
   _HB_MEMBER { bSetForm} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bSetForm" }, .F., .F. ), )
   _HB_MEMBER { lNAOTraduz} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lNAOTraduz" }, .F., .F. ), )



   _HB_MEMBER New( oIcon, clr, nStyle, x, y, width, height, cTitle, cMenu, oFont,  bInit, bExit, bSize, bPaint, bGfocus, bLfocus, bOther,  cAppName, oBmp, cHelp, nHelpId, bCloseQuery, bRefresh, lChild, lClipper, lNoClosable, bSetForm, lNAOTraduz); IIF( .F., s_oClass:ModMethod( "New", @HWindow_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HWindow_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddItem( oWnd); IIF( .F., s_oClass:ModMethod( "AddItem", @HWindow_AddItem(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddItem", @HWindow_AddItem(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER DelItem( oWnd); IIF( .F., s_oClass:ModMethod( "DelItem", @HWindow_DelItem(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DelItem", @HWindow_DelItem(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER FindWindow( hWndTitle); IIF( .F., s_oClass:ModMethod( "FindWindow", @HWindow_FindWindow(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "FindWindow", @HWindow_FindWindow(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER GetMain(); IIF( .F., s_oClass:ModMethod( "GetMain", @HWindow_GetMain(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetMain", @HWindow_GetMain(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER GetMdiMain(); IIF( .F., s_oClass:ModInline( "GetMdiMain", {|Self | Self, IIF( ::GetMain() <> Nil, ::aWindows[ 1 ] , Nil ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetMdiMain", {|Self | Self, IIF( ::GetMain() <> Nil, ::aWindows[ 1 ] , Nil ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Center(); IIF( .F., s_oClass:ModInline( "Center", {|Self | Self, Hwg_CenterWindow( ::handle, ::Type ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Center", {|Self | Self, Hwg_CenterWindow( ::handle, ::Type ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Restore(); IIF( .F., s_oClass:ModInline( "Restore", {|Self | Self, SendMessage( ::handle,  274, 61728, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Restore", {|Self | Self, SendMessage( ::handle,  274, 61728, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Maximize(); IIF( .F., s_oClass:ModInline( "Maximize", {|Self | Self, SendMessage( ::handle,  274, 61488, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Maximize", {|Self | Self, SendMessage( ::handle,  274, 61488, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Minimize(); IIF( .F., s_oClass:ModInline( "Minimize", {|Self | Self, SendMessage( ::handle,  274, 61472, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Minimize", {|Self | Self, SendMessage( ::handle,  274, 61472, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Close(); IIF( .F., s_oClass:ModInline( "Close", {|Self | Self, SendMessage( ::handle, 274, 61536, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Close", {|Self | Self, SendMessage( ::handle, 274, 61536, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Release(); IIF( .F., s_oClass:ModInline( "Release", {|Self | Self, ::Close( ), ::HCustomWindow:Release(), Self := Nil }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Release", {|Self | Self, ::Close( ), ::HCustomWindow:Release(), Self := Nil }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER isMaximized(); IIF( .F., s_oClass:ModInline( "isMaximized", {|Self | Self, GetWindowPlacement( ::handle ) == 3 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "isMaximized", {|Self | Self, GetWindowPlacement( ::handle ) == 3 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER isMinimized(); IIF( .F., s_oClass:ModInline( "isMinimized", {|Self | Self, GetWindowPlacement( ::handle ) == 2 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "isMinimized", {|Self | Self, GetWindowPlacement( ::handle ) == 2 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER isNormal(); IIF( .F., s_oClass:ModInline( "isNormal", {|Self | Self, GetWindowPlacement( ::handle ) == 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "isNormal", {|Self | Self, GetWindowPlacement( ::handle ) == 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )


; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HWindow ;



UTILITY STATIC function HWindow_New( oIcon, clr, nStyle, x, y, width, height, cTitle, cMenu, oFont,  bInit, bExit, bSize, bPaint, bGfocus, bLfocus, bOther,  cAppName, oBmp, cHelp, nHelpId, bCloseQuery, bRefresh, lChild, lClipper, lNoClosable, bSetForm, lNAOTraduz) ; local Self AS CLASS HWindow := QSelf() AS CLASS HWindow

   ( (clr) := (clr) )
   ( (cMenu) := (cMenu) )
   ( (cHelp) := (cHelp) )

   ::oDefaultParent := Self
   ::title    := cTitle
   ::style    := IIf( nStyle == Nil, 0, nStyle )
   ::oIcon    := oIcon
   ::oBmp     := oBmp
   ::nTop     := IIf( y == Nil, 0, y )
   ::nLeft    := IIf( x == Nil, 0, x )
   ::nWidth   := IIf( width == Nil, 0, width )
   ::nHeight  := IIf( height == Nil, 0, height )
   ::oFont    := oFont
   ::bInit    := bInit
   ::bDestroy := bExit
   ::bSize    := bSize
   ::bPaint   := bPaint
   ::bGetFocus  := bGfocus
   ::bLostFocus := bLfocus
   ::bOther     := bOther
   ::bCloseQuery := bCloseQuery
   ::bRefresh   := bRefresh
   ::lChild    := IIF( EMPTY( lChild ), ::lChild,  lChild  )
   ::lClipper  := IIF( EMPTY( lClipper ), ::lClipper ,  lClipper )
   ::lClosable := Iif( EMPTY( lnoClosable ), .T., ! lnoClosable )
   ::lNAOTraduz     := IIf( lNAOTraduz  == Nil, .F., lNAOTraduz  )


   If VALTYPE( cTitle ) = "C"
      If ::lNAOTraduz
         ::title   := cTitle
      Else
         ::title   := HWG_TRANSLATOR( cTitle, "INIT WINDOW")
      Endif
   Endif

   IF !EMPTY(::title_all_windows)
      ::title:=::title + " - "+::title_all_windows
   ENDIF







   ::SetColor( , clr )

   IF cAppName <> Nil
      ::szAppName := cAppName
   ENDIF

   IF nHelpId <> nil
      ::HelpId := nHelpId
   END

   ::aOffset := Array( 4 )
   AFill( ::aOffset, 0 )

   IF VALTYPE( cTitle ) <> "N"
      ::AddItem( Self )
   ENDIF
   IF Hwg_Bitand( nStyle,1048576 ) > 0
      ::nScrollBars ++
   ENDIF
   IF  Hwg_Bitand( nStyle,2097152 ) > 0
      ::nScrollBars += 2
   ENDIF
   ::bSetForm := bSetForm

   RETURN Self

UTILITY STATIC function HWindow_AddItem( oWnd) ; local Self AS CLASS HWindow := QSelf() AS CLASS HWindow
   AAdd( ::aWindows, oWnd )
   RETURN Nil

UTILITY STATIC function HWindow_DelItem( oWnd) ; local Self AS CLASS HWindow := QSelf() AS CLASS HWindow
   LOCAL i, h := oWnd:handle
   IF ( i := AScan( ::aWindows, { | o | o:handle == h } ) ) > 0
      ADel( ::aWindows, i )
      ASize( ::aWindows, Len( ::aWindows ) - 1 )
   ENDIF
   RETURN Nil

UTILITY STATIC function HWindow_FindWindow( hWndTitle) ; local Self AS CLASS HWindow := QSelf() AS CLASS HWindow
   LOCAL cType := VALTYPE( hWndTitle ), i

   IF cType <> "C"
      i := AScan( ::aWindows, { | o | PtrtoUlong( o:handle ) == PtrtoUlong( hWndTitle ) } )
   ELSE
      i := AScan( ::aWindows, { | o | VALTYPE( o:Title ) = "C" .AND. o:Title == hWndTitle } )
   ENDIF
   RETURN IIf( i == 0, Nil, ::aWindows[ i ] )

UTILITY STATIC function HWindow_GetMain() ; local Self AS CLASS HWindow := QSelf() AS CLASS HWindow



   RETURN IIf( Len( ::aWindows ) > 0,               IIf( ::aWindows[ 1 ]:Type == 1,  ::aWindows[ 1 ],                   IIf( Len( ::aWindows ) > 1, ::aWindows[ 2 ], Nil ) ), Nil )



_HB_CLASS HMainWindow ; UTILITY FUNCTION HMainWindow(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HMainWindow" , {HWindow():classh} ) ) ; ;


















_HB_MEMBER { aMessages} ; IIF( !.F., s_oClass:AddMultiClsData(, {  { 273, 20, 3, 5, 274,  1024 + 1000, 289, 16, 2, 22, 6, 83 },  {  { | o, w, l | onCommand( o, w, l ) },         { | o, w | onEraseBk( o, w ) },               { | o | onMove( o ) },                        { | o, w, l | onSize( o, w, l ) },            { | o, w, l | onSysCommand( o, w, l ) },      { | o, w, l | onNotifyIcon( o, w, l ) },      { | o, w, l | onEnterIdle( o, w, l ) },       { | o | onCloseQuery( o ) },                  { | o | onDestroy( o ) },                     { | o, w | onEndSession( o, w ) },            { | o, w, l | onActivate( o, w, l ) },        { | o, w, l | onHelp( o, w, l ) }             }  }, nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "aMessages" }, .F. ), )

   _HB_MEMBER { nMenuPos} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nMenuPos" }, .F., .F. ), )
   _HB_MEMBER { bMdiMenu} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bMdiMenu" }, .F., .F. ), )
   _HB_MEMBER { oNotifyIcon, bNotify, oNotifyMenu} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oNotifyIcon" , "bNotify" , "oNotifyMenu" }, .F., .F. ), )
   _HB_MEMBER { lTray} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lTray" }, .F., .F. ), )



   _HB_MEMBER New( lType, oIcon, clr, nStyle, x, y, width, height, cTitle, cMenu, nPos,    oFont, bInit, bExit, bSize, bPaint, bGfocus, bLfocus, bOther,  cAppName, oBmp, cHelp, nHelpId, bCloseQuery, bRefresh, bMdiMenu); IIF( .F., s_oClass:ModMethod( "New", @HMainWindow_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HMainWindow_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Activate( lShow, lMaximized, lMinimized, lCentered, bActivate); IIF( .F., s_oClass:ModMethod( "Activate", @HMainWindow_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @HMainWindow_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER onEvent( msg, wParam, lParam); IIF( .F., s_oClass:ModMethod( "onEvent", @HMainWindow_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onEvent", @HMainWindow_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitTray( oNotifyIcon, bNotify, oNotifyMenu, cTooltip, cMens1, cMens2, nIconIndex); IIF( .F., s_oClass:ModMethod( "InitTray", @HMainWindow_InitTray(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitTray", @HMainWindow_InitTray(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER GetMdiActive(); IIF( .F., s_oClass:ModInline( "GetMdiActive", {|Self | Self, ::FindWindow( IIF( ::GetMain() <> Nil, SendMessage( ::GetMain():handle, 553, 0, 0 ) , Nil ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetMdiActive", {|Self | Self, ::FindWindow( IIF( ::GetMain() <> Nil, SendMessage( ::GetMain():handle, 553, 0, 0 ) , Nil ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HMainWindow ;



UTILITY STATIC function HMainWindow_New( lType, oIcon, clr, nStyle, x, y, width, height, cTitle, cMenu, nPos,    oFont, bInit, bExit, bSize, bPaint, bGfocus, bLfocus, bOther,  cAppName, oBmp, cHelp, nHelpId, bCloseQuery, bRefresh, bMdiMenu) ; local Self AS CLASS HMainWindow := QSelf() AS CLASS HMainWindow



   ::HWindow:New( oIcon, clr, nStyle, x, y, width, height, cTitle, cMenu, oFont,  bInit, bExit, bSize, bPaint, bGfocus, bLfocus, bOther,   cAppName, oBmp, cHelp, nHelpId, bCloseQuery, bRefresh )
   ::Type := lType

   IF lType == 2


      ::nMenuPos := IIF( nPos = Nil, -1, nPos )
      ::bMdiMenu := bMdiMenu
      ::Style := nStyle
      ::tColor := clr
      ::oBmp := oBmp
       clr:= nil


      ::handle := Hwg_InitMdiWindow( Self, ::szAppName, cTitle, cMenu,   IIf( oIcon <> Nil, oIcon:handle, Nil ), ,  nStyle, ::nLeft, ::nTop, ::nWidth, ::nHeight )

      IF cHelp <> NIL
         SetHelpFileName( cHelp )
      ENDIF




      ::Screen := HMdiChildWindow():New(, ::tcolor, 1073741824 + 16777216 + 128 + 134217728, 0, 0, ::nWidth * 1, ::nheight * 1 - GETSYSTEMMETRICS( 51 ) - GETSYSTEMMETRICS( 51 ) ,  -1 ,,,,,::bSize ,,,,,,::oBmp,,,,,, )
      ::Screen:Type    := 3

      ::oDefaultParent := Self

   ELSEIF lType == 1

      clr := nil


      ::handle := Hwg_InitMainWindow( Self, ::szAppName, cTitle, cMenu,  IIf( oIcon <> Nil, oIcon:handle, Nil ),  IIf( oBmp <> Nil, - 1, clr ), nStyle, ::nLeft, ::nTop, ::nWidth, ::nHeight )

      IF cHelp <> NIL
         SetHelpFileName( cHelp )
      ENDIF

   ENDIF
   ::rect := GetWindowRect( ::handle )





   RETURN Self

UTILITY STATIC function HMainWindow_Activate( lShow, lMaximized, lMinimized, lCentered, bActivate) ; local Self AS CLASS HMainWindow := QSelf() AS CLASS HMainWindow
   LOCAL oWndClient, handle, lres

   lMaximized := IIf( lMaximized == nil, .F., lMaximized ) ;
   lMinimized := IIf( lMinimized == nil, .F., lMinimized ) ;
   lCentered  := ( ! lMaximized .AND. ! EMPTY( lCentered ) .AND. lCentered ) .OR. Hwg_BitAND( ::Style, 2048 ) <> 0
   lShow := IIf( lShow == nil, .T., lShow ) ;
   CreateGetList( Self )
   AEVAL( ::aControls, { | o | o:lInit := .F. } )

   IF ::Type == 2


      oWndClient := HWindow():New( ,,, ::style, ::title,, ::bInit, ::bDestroy, ::bSize,  ::bPaint, ::bGetFocus, ::bLostFocus, ::bOther, ::obmp )

      handle := Hwg_InitClientWindow( oWndClient, ::nMenuPos, ::nLeft, ::nTop, ::nWidth, ::nHeight  )
      ::oClient := HWindow():aWindows[ 2 ]











      IF ::Screen <> Nil
         ::Screen:lExitOnEsc := .F.

         ::Screen:Activate( .T., .T. )
      ENDIF

      oWndClient:handle := handle

      SENDMESSAGE( ::Handle, 5, 0, MAKELPARAM( ::nWidth, ::nHeight ) )

      InitControls( Self )
      IF ::bInit <> Nil
         lres := Eval( ::bInit, Self )
         IF ValType( lres ) = "L" .AND. ! lres
            SENDMESSAGE( ::handle, 2, 0, 0 )
            RETURN Nil
         ENDIF
      ENDIF
      IF ::Screen <> Nil
         ::Screen:lBmpCenter := ::lBmpCenter
         ::Screen:Maximize()

         SetWindowPos( ::Screen:Handle, 1, 0, 0, 0, 0, 0x0010 + 0x0002 + 0x0001 + 0x0004 + 0x0200 + 0x0020 )
         ::Screen:Restore()
      ENDIF
      IF lMaximized
         ::Maximize()
      ELSEIF lMinimized
         ::Minimize()
      ELSEIF lCentered
         ::Center()
      ENDIF

      IF ( bActivate  <> NIL )
         Eval( bActivate, Self )
      ENDIF
       AddToolTip( ::handle, ::handle, "" )
      Hwg_ActivateMdiWindow( ( lShow == Nil .OR. lShow ), ::hAccel, lMaximized, lMinimized )

   ELSEIF ::Type == 1

      IF ::bInit <> Nil
         lres := Eval( ::bInit, Self )
         IF ValType( lres ) = "L" .AND. ! lres
            SENDMESSAGE( ::handle, 2, 0, 0 )
            RETURN Nil
         ENDIF
      ENDIF
      IF lMaximized
         ::maximize()
      ELSEIF lMinimized
         ::minimize()
      ELSEIF lCentered
         ::center()
      ENDIF

      IF ( bActivate  <> NIL )
         Eval( bActivate, Self )
      ENDIF

      AddToolTip( ::handle, ::handle, "" )
      Hwg_ActivateMainWindow( ( lShow == Nil .OR. lShow ), ::hAccel, lMaximized, lMinimized )

   ENDIF

   RETURN Nil

UTILITY STATIC function HMainWindow_onEvent( msg, wParam, lParam) ; local Self AS CLASS HMainWindow := QSelf() AS CLASS HMainWindow
   Local i, xPos, yPos, oMdi, aCoors
   LOCAL nFocus := If( Hb_IsNumeric( ::nFocus ), ::nFocus, 0 )



   IF msg = 288

      RETURN onSysCommand( Self, 61696, LoWord( wParam ) )
   ENDIF

   IF msg = 528
      IF wParam = 513 .AND. !EMPTY( ::GetMdiActive() )
         oMdi := ::GetMdiActive()
         IF oMdi:lModal
            xPos := LoWord( lParam )
            yPos := HiWord( lParam )
            aCoors := ScreenToClient( ::handle, GetWindowRect( oMdi:handle ) )
            IF ( ! PtInRect( aCoors, { xPos, yPos } ) )
               MSGBEEP()
               FOR i = 1 to 6
                  FlashWindow( oMdi:Handle, 1 )
                  Sleep( 60 )
               NEXT

               SetWindowPos( oMdi:Handle, 0, 0, 0, 0, 0,  0x0002 + 0x0001 +  0x0200 + 0x0020)
               ::lSuspendMsgsHandling := .T.
               RETURN 0
            ENDIF
         ENDIF
      ENDIF
   ELSEIF msg = 7 .AND. nFocus > 0
      SETFOCUS( nFocus )
   ENDIF

   IF ( i := Ascan( ::aMessages[1],msg ) ) <> 0 .AND.  ( !::lSuspendMsgsHandling .OR. msg = 20 .OR. msg = 5 )
      Return Eval( ::aMessages[2,i], Self, wParam, lParam )
   ELSE
      IF msg == 276 .OR. msg == 277 .OR. msg == 522
         IF ::nScrollBars <> -1
             ::ScrollHV( Self,msg,wParam,lParam )
         ENDIF
         onTrackScroll( Self, msg, wParam, lParam )
      ENDIF
      RETURN ::HWindow:onEvent( msg, wParam, lParam )
   ENDIF

   RETURN - 1

UTILITY STATIC function HMainWindow_InitTray( oNotifyIcon, bNotify, oNotifyMenu, cTooltip, cMens1, cMens2, nIconIndex) ; local Self AS CLASS HMainWindow := QSelf() AS CLASS HMainWindow
   if cMens1=nil
      cMens1:=""
   endif

   if cMens2=nil
      cMens2:=""
   endif

   if nIconIndex=nil

   endif

   ::bNotify     := bNotify
   ::oNotifyMenu := oNotifyMenu
   ::oNotifyIcon := oNotifyIcon
    ShellNotifyIcon( .T., ::handle, oNotifyIcon:handle, cTooltip, cMens1, cMens2, nIconIndex )
   ::lTray := .T.

   RETURN Nil


_HB_CLASS HMDIChildWindow ; UTILITY FUNCTION HMDIChildWindow(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HMDIChildWindow" , {HWindow():classh} ) ) ; ;
















_HB_MEMBER { aMessages} ; IIF( !.F., s_oClass:AddMultiClsData(, {  { 1, 273,20,3, 5, 134,  274, 289, 546, 2 },  {  { | o, w, l | ( (w) := (w) ), onMdiCreate( o, l ) },         { | o, w | onMdiCommand( o, w ) },          { | o, w | onEraseBk( o, w ) },             { | o | onMove( o ) },                    { | o, w, l | onSize( o, w, l ) },            { | o, w | onMdiNcActivate( o, w ) },       { | o, w, l | onSysCommand( o, w, l ) },          { | o, w, l | onEnterIdle( o, w, l ) },       { | o, w, l | onMdiActivate( o, w, l ) },      { | o | onDestroy( o ) }                  }  }, nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "aMessages" }, .F. ), )
   _HB_MEMBER { aRectSave} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aRectSave" }, .F., .F. ), )
   _HB_MEMBER { oWndParent} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oWndParent" }, .F., .F. ), )
   _HB_MEMBER { lMaximized} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lMaximized" }, .F., .F. ), )
   _HB_MEMBER { lSizeBox} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lSizeBox" }, .F., .F. ), )
   _HB_MEMBER { lResult} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lResult" }, .F., .F. ), )
   _HB_MEMBER { aChilds} ; IIF( !.F., s_oClass:AddMultiData(, {}, nScope + IIF( .F., 32, 0 ), { "aChilds" }, .F., .F. ), )
   _HB_MEMBER { hActive} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hActive" }, .F., .F. ), )

   _HB_MEMBER Activate( lShow, lMaximized, lMinimized, lCentered, bActivate, lModal); IIF( .F., s_oClass:ModMethod( "Activate", @HMDIChildWindow_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @HMDIChildWindow_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER onEvent( msg, wParam, lParam); IIF( .F., s_oClass:ModMethod( "onEvent", @HMDIChildWindow_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onEvent", @HMDIChildWindow_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetParent(oParent); IIF( .F., s_oClass:ModInline( "SetParent", {|Self,oParent | Self, ::oWndParent := oParent }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetParent", {|Self,oParent | Self, ::oWndParent := oParent }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HMDIChildWindow ;

UTILITY STATIC function HMDIChildWindow_Activate( lShow, lMaximized, lMinimized, lCentered, bActivate, lModal) ; local Self AS CLASS HMDIChildWindow := QSelf() AS CLASS HMDIChildWindow
   LOCAL l3d := .F.

   ( (lShow) := (lShow) )
   ( (lMaximized) := (lMaximized) )
   ( (lMinimized) := (lMinimized) )
   ( (lCentered) := (lCentered) )

   lShow := IIf( lShow == nil, .T., lShow ) ;
   lMinimized := !EMPTY( lMinimized ) .AND. lMinimized .AND. Hwg_BitAnd( ::style, 536870912 ) <> 0

   lMaximized := !EMPTY( lMaximized ) .AND. lMaximized .AND.  ( Hwg_BitAnd( ::style, 16777216 ) <> 0 .OR.  Hwg_BitAnd( ::style, 262144 ) <> 0 )
   lCentered  := ( ! lMaximized .AND. ! EMPTY( lCentered ) .AND. lCentered ) .OR. Hwg_BitAND( ::Style, 2048 ) <> 0
   ::lModal   := ! EMPTY( lModal ) .AND. lModal
   ::lChild   := ::lModal .OR. ::lChild .OR. ::minWidth  > -1 .OR. ::maxWidth  > -1 .OR. ::minHeight > -1 .OR. ::maxHeight > -1
   ::lSizeBox := Hwg_BitAnd( ::style, 262144 ) <> 0
   ::WindowState := IIF( lMinimized, 2, IIF( lMaximized, 3, IIF( lShow, 1, 0 ) ) )

   CreateGetList( Self )


   ::Type := 3
   ::rect := GetWindowRect( ::handle )

   ::GETMDIMAIN():WindowState := GetWindowPlacement( ::GETMDIMAIN():handle )
   ::oClient := HWindow():aWindows[ 2 ]
   IF lCentered
      ::nLeft := ( ::oClient:nWidth - ::nWidth ) / 2
      ::nTop  := ( ::oClient:nHeight - ::nHeight ) / 2
   ENDIF
   ::aRectSave := { ::nLeft, ::nTop, ::nwidth, ::nHeight }
   IF Hwg_BitAND( ::Style , 4 ) > 0

         ::Style -=  4
         l3d := .T.
    ENDIF

   ::Style := Hwg_BitOr( ::Style , 268435456 ) - IIF( ! lshow , 268435456 , 0 ) +  IIF( lMaximized .AND. ! ::lChild .AND. ! ::lModal , 16777216, 0 )
   ::handle := Hwg_CreateMdiChildWindow( Self )
   IF VALTYPE( ::TITLE ) = "N" .AND. ::title = - 1
      RETURN .T.
   ENDIF

   IF lCentered
      ::nLeft := ( ::oClient:nWidth - ::nWidth ) / 2
      ::nTop  := ( ::oClient:nHeight - ::nHeight ) / 2
   ENDIF











   IF l3D

      ::minWidth  := ::nWidth
      ::minHeight := ::nHeight
      ::maxWidth  := ::nWidth
      ::maxHeight := ::nHeight
   ENDIF


   IF lShow

      IF lMinimized  .OR. ::WindowState = 2
         ::Minimize()
      ELSEIF  ::WindowState = 3 .AND. ! ::IsMaximized()
         ::maximize()
      ENDIF


   ELSE
      SetWindowPos( ::handle, Nil, ::nLeft, ::nTop, ::nWidth, ::nHeight, 0x0008 + 0x0010 + 0x0004 )
   ENDIF


   ::RedefineScrollbars()









   IF ( ValType( ::nInitFocus ) = "O" .OR. ::nInitFocus > 0 )
      ::nInitFocus := IIf( ValType( ::nInitFocus ) = "O", ::nInitFocus:Handle, ::nInitFocus )
      SETFOCUS( ::nInitFocus )
      ::nFocus := ::nInitFocus
   ELSEIF PtrtoUlong( GETFOCUS() ) = PtrtoUlong( ::handle ) .AND. Len( ::acontrols ) > 0

      ::nFocus := ASCAN( ::aControls,{|o| Hwg_BitaND( HWG_GETWINDOWSTYLE( o:handle ), 65536 ) <> 0 .AND.  Hwg_BitaND( HWG_GETWINDOWSTYLE( o:handle ), 134217728 ) = 0 } )
      IF ::nFocus > 0
         SETFOCUS( ::acontrols[ ::nFocus ]:handle )
         ::nFocus := GetFocus()
      ENDIF
   ENDIF

   IF bActivate <> NIL
      Eval( bActivate, Self )
   ENDIF


   RETURN Nil

UTILITY STATIC function HMDIChildWindow_onEvent( msg, wParam, lParam) ; local Self AS CLASS HMDIChildWindow := QSelf() AS CLASS HMDIChildWindow
   LOCAL i, oCtrl
   LOCAL nFocus

   nFocus := If( Hb_IsNumeric( ::nFocus ), ::nFocus, 0 )



   IF msg = 36
      IF ::minWidth  > -1 .OR. ::maxWidth  > -1 .OR. ::minHeight > -1 .OR. ::maxHeight > -1




         MINMAXWINDOW(::handle, lParam, IIF( ::minWidth  > -1, ::minWidth, Nil ), IIF( ::minHeight > -1, ::minHeight, Nil ), IIF( ::maxWidth  > -1, ::maxWidth, Nil ), IIF( ::maxHeight > -1, ::maxHeight, Nil ) )
         RETURN 0

      ENDIF
   ELSEIF msg = 534 .AND. ::lMaximized
      ::Maximize()
   ELSEIF msg = 7 .AND. nFocus <> 0
      SETFOCUS( nFocus )

   ELSEIF msg = 2 .AND. ::lModal .AND. ! SelfFocus( ::Screen:Handle, ::handle )
      IF ! EMPTY( ::hActive ) .AND. ! SelfFocus( ::hActive, ::Screen:Handle )
         PostMessage( nFocus, 7, 0, 0 )
         PostMessage( ::hActive , 7, 0, 0 )
      ENDIF
      ::GETMDIMAIN():lSuspendMsgsHandling := .F.
   ENDIF

   IF ( i := AScan( ::aMessages[ 1 ], msg ) ) <> 0
      RETURN Eval( ::aMessages[ 2, i ], Self, wParam, lParam )
   ELSE
      IF msg == 276 .OR. msg == 277 .OR. msg == 522
         IF ::nScrollBars <> -1
             ::ScrollHV( Self,msg,wParam,lParam )
         ENDIF
         onTrackScroll( Self, msg, wParam, lParam )
      ELSEIF msg = 78 .AND. !::lSuspendMsgsHandling
         IF ( oCtrl := ::FindControl( , GetFocus() ) ) <> Nil .AND. oCtrl:ClassName <> "HTAB"
            SendMessage( oCtrl:handle, msg, wParam, lParam )
         ENDIF
      ENDIF
      RETURN ::HWindow:onEvent( msg, wParam, lParam )
   ENDIF

   RETURN - 1


_HB_CLASS HChildWindow ; UTILITY FUNCTION HChildWindow(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HChildWindow" , {HWindow():classh} ) ) ; ;

   _HB_MEMBER { oNotifyMenu} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oNotifyMenu" }, .F., .F. ), )



   _HB_MEMBER New( oIcon, clr, nStyle, x, y, width, height, cTitle, cMenu, oFont,  bInit, bExit, bSize, bPaint, bGfocus, bLfocus, bOther,  cAppName, oBmp, cHelp, nHelpId, bRefresh); IIF( .F., s_oClass:ModMethod( "New", @HChildWindow_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HChildWindow_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Activate( lShow, lMaximized, lMinimized,lCentered, bActivate, lModal); IIF( .F., s_oClass:ModMethod( "Activate", @HChildWindow_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @HChildWindow_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER onEvent( msg, wParam, lParam); IIF( .F., s_oClass:ModMethod( "onEvent", @HChildWindow_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onEvent", @HChildWindow_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HChildWindow ;



UTILITY STATIC function HChildWindow_New( oIcon, clr, nStyle, x, y, width, height, cTitle, cMenu, oFont,  bInit, bExit, bSize, bPaint, bGfocus, bLfocus, bOther,  cAppName, oBmp, cHelp, nHelpId, bRefresh) ; local Self AS CLASS HChildWindow := QSelf() AS CLASS HChildWindow



   ::HWindow:New( oIcon, clr, nStyle, x, y, width, height, cTitle, cMenu, oFont,  bInit, bExit, bSize, bPaint, bGfocus, bLfocus, bOther,   cAppName, oBmp, cHelp, nHelpId,, bRefresh )
   ::oParent := HWindow():GetMain()
   ::Type := 4
   ::rect := GetWindowRect( ::handle )
   IF ( Valtype(::oParent) == "O" )


      ::handle := Hwg_InitChildWindow( Self, ::szAppName, cTitle, cMenu,  IIf( oIcon <> Nil, oIcon:handle, Nil ), IIf( oBmp <> Nil, - 1, clr ), nStyle, ::nLeft,  ::nTop, ::nWidth, ::nHeight, ::oParent:handle )
   ELSE
      MsgStop( "Create Main window first !", "HChildWindow():New()" )
      RETURN Nil
   ENDIF





   RETURN Self

UTILITY STATIC function HChildWindow_Activate( lShow, lMaximized, lMinimized,lCentered, bActivate, lModal) ; local Self AS CLASS HChildWindow := QSelf() AS CLASS HChildWindow
   LOCAL nReturn

   ( (lModal) := (lModal) )

   lShow := IIf( lShow == nil, .T., lShow ) ;
   lMinimized := !EMPTY( lMinimized ) .AND. lMinimized .AND. Hwg_BitAnd( ::style, 536870912 ) <> 0
   lMaximized := !EMPTY( lMaximized ) .AND. lMaximized .AND. Hwg_BitAnd( ::style, 16777216 ) <> 0

   ::Type := 4

   CreateGetList( Self )
   InitControls( SELF )
   InitObjects( Self, .T. )
   SENDMESSAGE( ::handle, 296, makelong(2,3), 0)
   IF ::bInit <> Nil

      IF Valtype( nReturn := Eval( ::bInit, Self ) ) <> "N"
         IF VALTYPE( nReturn ) == "L" .AND. ! nReturn
            ::Close()
            RETURN Nil
         ENDIF
      ENDIF
   ENDIF

   Hwg_ActivateChildWindow( lShow, ::handle, lMaximized, lMinimized )

   IF !EMPTY( lCentered ) .AND. lCentered
      IF  ! EMPTY( ::oParent )
        ::nLeft := (::oParent:nWidth - ::nWidth ) / 2
        ::nTop  := (::oParent:nHeight - ::nHeight) / 2
      ENDIF
   ENDIF


   SetWindowPos( ::Handle, 0, ::nLeft, ::nTop, 0, 0, 0x0001 + 0x0200 + 0x0020)
   IF ( bActivate  <> NIL )
      Eval( bActivate, Self )
   ENDIF

   IF ( ValType( ::nInitFocus ) = "O" .OR. ::nInitFocus > 0 )
      ::nInitFocus := IIf( ValType( ::nInitFocus ) = "O", ::nInitFocus:Handle, ::nInitFocus )
      SETFOCUS( ::nInitFocus )
      ::nFocus := ::nInitFocus
   ELSEIF PtrtoUlong( GETFOCUS() ) = PtrtoUlong( ::handle ) .AND. Len( ::acontrols ) > 0

      ::nFocus := ASCAN( ::aControls,{|o| Hwg_BitaND( HWG_GETWINDOWSTYLE( o:handle ), 65536 ) <> 0 .AND.  Hwg_BitaND( HWG_GETWINDOWSTYLE( o:handle ), 134217728 ) = 0 } )
      IF ::nFocus > 0
         SETFOCUS( ::acontrols[ ::nFocus ]:handle )
         ::nFocus := GetFocus()
      ENDIF
   ENDIF
   RETURN Nil


UTILITY STATIC function HChildWindow_onEvent( msg, wParam, lParam) ; local Self AS CLASS HChildWindow := QSelf() AS CLASS HChildWindow
   LOCAL i, oCtrl

   IF msg == 2
      RETURN onDestroy( Self )
   ELSEIF msg == 5
      RETURN onSize( Self, wParam, lParam )
   ELSEIF msg = 7 .AND. ::nFocus <> 0
      SETFOCUS( ::nFocus )
   ELSEIF ( i := AScan( HMainWindow():aMessages[ 1 ], msg ) ) <> 0
      RETURN Eval( HMainWindow():aMessages[ 2, i ], Self, wParam, lParam )
   ELSE
      IF msg == 276 .OR. msg == 277 .OR. msg == 522
         onTrackScroll( Self, msg, wParam, lParam )
      ELSEIF msg = 78 .AND. !::lSuspendMsgsHandling
         IF ( oCtrl := ::FindControl( wParam ) ) <> Nil .AND. oCtrl:className <> "HTAB"
            ::nFocus := oCtrl:handle
            SendMessage( oCtrl:handle, msg, wParam, lParam )
         ENDIF
      ENDIF
      RETURN ::HWindow:onEvent( msg, wParam, lParam )
   ENDIF

   RETURN - 1

FUNCTION ReleaseAllWindows( hWnd )
   LOCAL oItem

   FOR EACH oItem IN HWindow():aWindows
      IF oItem:oParent <> Nil .AND. PtrToUlong( oItem:oParent:handle ) == PtrToUlong( hWnd )
         SendMessage( oItem:handle, 16, 0, 0 )
      ENDIF
   NEXT
   IF PtrToUlong( HWindow():aWindows[ 1 ]:handle ) == PtrToUlong( hWnd )
      PostQuitMessage( 0 )
   ENDIF

   RETURN - 1



STATIC FUNCTION onCommand( oWnd, wParam, lParam )
   LOCAL iItem, iCont, aMenu, iParHigh, iParLow, nHandle, oChild, i

   ( (lParam) := (lParam) )

   IF wParam >= 501 .AND. wparam < 501 + 18 .AND. ! Empty( oWnd:Screen )
      IF wParam >= 501
         SetWindowPos( ownd:Screen:HANDLE, 1, 0, 0, 0, 0, 0x0008 + 0x0010 + 0x0002 + 0x0001 )
      ENDIF

   ENDIF
   IF wParam == 61536
      IF Len( HWindow():aWindows ) > 2 .AND. ( nHandle := SendMessage( HWindow():aWindows[ 2 ]:handle, 553, 0, 0 ) ) > 0

         oChild := oWnd:FindWindow( nHandle )
         IF oChild <> Nil
            IF ! oChild:Closable
               RETURN 0
            ELSEIF  ( Valtype(oChild:bDestroy) == "B" )
               oChild:lSuspendMsgsHandling := .T.
               i := Eval( oChild:bDestroy, oChild )
               oChild:lSuspendMsgsHandling := .F.
               i := IIf( Valtype(i) == "L", i, .T. )
               IF ! i
                  Return 0
               ENDIF
            ENDIF
         ENDIF
         SendMessage( HWindow():aWindows[ 2 ]:handle, 545, nHandle, 0 )
      ENDIF
   ELSEIF wParam == 61728
      IF Len( HWindow():aWindows ) > 2 .AND. ( nHandle := SendMessage( HWindow():aWindows[ 2 ]:handle, 553, 0, 0 ) ) > 0
         SendMessage( HWindow():aWindows[ 2 ]:handle, 547, nHandle, 0 )
      ENDIF
   ELSEIF wParam == 61488
      IF Len( HWindow():aWindows ) > 2 .AND. ( nHandle := SendMessage( HWindow():aWindows[ 2 ]:handle, 553, 0, 0 ) ) > 0
         SendMessage( HWindow():aWindows[ 2 ]:handle, 549, nHandle, 0 )
      ENDIF
   ELSEIF wParam > 501 .AND. wParam < 501 + 18
      IF oWnd:bMdiMenu <> Nil
         Eval( oWnd:bMdiMenu, HWindow():aWindows[ wParam - 501 + 2 ], wParam  )
      ENDIF
      nHandle := HWindow():aWindows[ wParam - 501 + 2 ]:handle
      SendMessage( HWindow():aWindows[ 2 ]:handle, 546, nHandle, 0 )
   ENDIF
   iParHigh := HIWORD( wParam )
   iParLow := LOWORD( wParam )

   IF oWnd:aEvents <> Nil .AND. !oWnd:lSuspendMsgsHandling  .AND.  ( iItem := AScan( oWnd:aEvents, { | a | a[ 1 ] == iParHigh.AND.a[ 2 ] == iParLow } ) ) > 0
      Eval( oWnd:aEvents[ iItem, 3 ], oWnd, iParLow )

   ELSEIF ValType( oWnd:menu ) == "A" .AND.  ( aMenu := Hwg_FindMenuItem( oWnd:menu, iParLow, @iCont ) ) <> Nil
      IF Hwg_BitAnd( aMenu[ 1, iCont, 4 ], 2 ) > 0
         CheckMenuItem( , aMenu[ 1, iCont, 3 ], ! IsCheckedMenuItem( , aMenu[ 1, iCont, 3 ] ) )
      ENDIF
      IF aMenu[ 1, iCont, 1 ] <> Nil
         Eval( aMenu[ 1, iCont, 1 ], iCont, iParLow )
      ENDIF


   ELSEIF oWnd:oPopup <> Nil .AND.  ( aMenu := Hwg_FindMenuItem( oWnd:oPopup:aMenu, wParam, @iCont ) ) <> Nil  .AND. aMenu[ 1, iCont, 1 ] <> Nil
      Eval( aMenu[ 1, iCont, 1 ], iCont, wParam )


   ELSEIF oWnd:oNotifyMenu <> Nil .AND.  ( aMenu := Hwg_FindMenuItem( oWnd:oNotifyMenu:aMenu, wParam, @iCont ) ) <> Nil  .AND. aMenu[ 1, iCont, 1 ] <> Nil
      Eval( aMenu[ 1, iCont, 1 ], iCont, wParam )

   ELSEIF  wParam <> 61536 .AND. wParam <> 61472 .AND. wParam <> 61488 .AND. wParam <> 61728 .AND. oWnd:Type = 2
















      RETURN IIF( ! Empty( oWnd:Screen ) , -1 , 0 )

   ENDIF

   RETURN 0

FUNCTION onMove( oWnd )
   LOCAL aControls := GetWindowRect( oWnd:handle )

   oWnd:nLeft := aControls[ 1 ]
   oWnd:nTop  := aControls[ 2 ]
   IF oWnd:type == 3  .AND. ! oWnd:lMaximized

        IF oWnd:nHeight > GETSYSTEMMETRICS( 4 ) + 6
           oWnd:aRectSave := { oWnd:nLeft, oWnd:nTop, oWnd:nWidth, oWnd:nHeight }
      ELSE
        oWnd:aRectSave[ 1 ] := oWnd:nLeft
        oWnd:aRectSave[ 2 ] := oWnd:nTop
      ENDIF
   ENDIF
   IF oWnd:isMinimized() .AND. !Empty( oWnd:Screen )
      SetWindowPos( oWnd:Screen:HANDLE, 1, 0, 0, 0, 0, 0x0008 + 0x0010 + 0x0200 + 0x0001 + 0x0002 )
   ENDIF
   RETURN - 1

STATIC FUNCTION onEraseBk( oWnd, wParam )
LOCAL aCoors,  oWndArea

  IF oWnd:oBmp <> Nil .AND. oWnd:type <> 2
       oWndArea := IIF( oWnd:type <> 1, oWnd:oClient, oWnd )
       IF oWnd:lBmpCenter
          CenterBitmap( wParam, oWndArea:handle, oWnd:oBmp:handle, , oWnd:nBmpClr )
       ELSE
          SpreadBitmap( wParam, oWndArea:handle, oWnd:oBmp:handle )
       ENDIF
       Return 1
  ELSEIF oWnd:type <> 2
      aCoors := GetClientRect( oWnd:handle )
      IF oWnd:brush <> Nil
         IF ValType( oWnd:brush ) <> "N"
            FillRect( wParam, aCoors[ 1 ], aCoors[ 2 ], aCoors[ 3 ] + 1, aCoors[ 4 ] + 1, oWnd:brush:handle )
            IF !Empty( oWnd:Screen ) .AND. SELFFOCUS( oWnd:handle, oWnd:Screen:Handle )

               SetWindowPos( oWnd:Handle, 1, 0, 0, 0, 0, 0x0008 + 0x0010 + 0x0002 + 0x0001 + 0x0004 + 0x0200 )
            ENDIF
            RETURN 1
         ENDIF
      ELSEIF oWnd:Type <> 1
         FillRect( wParam, aCoors[ 1 ], aCoors[ 2 ], aCoors[ 3 ] + 1, aCoors[ 4 ] + 1, 15 + 1 )
         RETURN 1
      ENDIF

   ENDIF
   RETURN - 1


STATIC FUNCTION onSysCommand( oWnd, wParam, lParam )
   Local i, ars, oChild, oCtrl

   IF wParam == 61536
      IF ( Valtype(oWnd:bDestroy) == "B" )
         oWnd:lSuspendMsgsHandling := .T.
         i := Eval( oWnd:bDestroy, oWnd )
         oWnd:lSuspendMsgsHandling := .F.
         i := IIf( ValType( i ) == "L", i, .T. )
         IF ! i
            RETURN 0
         ENDIF
         oWnd:bDestroy := Nil
      ENDIF
      IF __ObjHasMsg( oWnd, "ONOTIFYICON" ) .AND. oWnd:oNotifyIcon <> Nil
         ShellNotifyIcon( .F., oWnd:handle, oWnd:oNotifyIcon:handle )
      ENDIF
      IF __ObjHasMsg( oWnd, "HACCEL" ) .AND. oWnd:hAccel <> Nil
         DestroyAcceleratorTable( oWnd:hAccel )
      ENDIF
      RETURN - 1
   ENDIF

   oWnd:WindowState := GetWindowPlacement( oWnd:handle )
   IF wParam == 61472
      IF __ObjHasMsg( oWnd, "LTRAY" ) .AND. oWnd:lTray
         oWnd:Hide()
         RETURN 0
      ENDIF

      SetWindowPos( oWnd:Handle, 1, 0, 0, 0, 0, 0x0010 + 0x0002 + 0x0001 + 0x0004 + 0x0200 + 0x0020)


   ELSEIF ( wParam == 61488 .OR. wparam == 61490 ) .AND.  oWnd:type == 3 .AND. ( oWnd:lChild .OR. oWnd:lModal )
      IF oWnd:WindowState == 2
          SendMessage( oWnd:HANDLE, 274, 61728, 0 )
          SendMessage( oWnd:HANDLE, 274, 61488, 0 )
          RETURN 0
      ENDIF
      ars := aClone( oWnd:aRectSave )
      IF oWnd:lMaximized

           IF oWnd:lSizeBox
              HWG_SETWINDOWSTYLE( oWnd:handle ,HWG_GETWINDOWSTYLE( oWnd:handle ) + 262144 )
         ENDIF
         MoveWindow(oWnd:Handle, oWnd:aRectSave[ 1 ], oWnd:aRectSave[ 2 ], oWnd:aRectSave[ 3 ], oWnd:aRectSave[ 4 ] )


         MoveWindow(oWnd:Handle, oWnd:aRectSave[ 1 ] - ( oWnd:nLeft - oWnd:aRectSave[ 1 ] ),  oWnd:aRectSave[ 2 ] - ( oWnd:nTop - oWnd:aRectSave[ 2 ] ),  oWnd:aRectSave[ 3 ], oWnd:aRectSave[ 4 ] )
      ELSE

           IF oWnd:lSizeBox
              HWG_SETWINDOWSTYLE( oWnd:handle ,HWG_GETWINDOWSTYLE( oWnd:handle ) - 262144 )
           ENDIF
         MoveWindow( oWnd:handle, oWnd:oClient:nLeft, oWnd:oClient:nTop, oWnd:oClient:nWidth, oWnd:oClient:nHeight )
      ENDIF
      oWnd:aRectSave := aClone( ars )
      oWnd:lMaximized := ! oWnd:lMaximized
      RETURN 0
   ELSEIF  (wParam == 61488 .OR. wparam == 61490 )

   ELSEIF wParam == 61728 .OR. wParam == 61730

   ELSEIF wParam = 61504 .OR. wParam = 61520

      IF ! Empty( oWnd:lDisableCtrlTab ) .AND. oWnd:lDisableCtrlTab
          RETURN 0
      ENDIF
   ELSEIF wParam = 61696


      IF Len( HWindow():aWindows) > 2 .AND. ( ( oChild:=oWnd ):Type = 3 .OR. !EMPTY( oChild := oWnd:GetMdiActive() ) )
         IF ( oCtrl := FindAccelerator( oChild, lParam ) ) <> Nil
            oCtrl:SetFocus()
            sendMessage( oCtrl:handle, 261, lParam, 0 )
            RETURN - 2

         ENDIF
      ENDIF
   ELSEIF wParam = 61776

   ELSEIF wParam = 61589 .AND. ( oWnd:type == 3 .OR. ! Empty( oWnd := oWnd:GetMdiActive())) .AND. oWnd:lModal
      MSGBEEP()
      RETURN 0
   ENDIF

   RETURN - 1

STATIC FUNCTION onEndSession( oWnd, wParam )

   LOCAL i

   ( (wParam) := (wParam) )

   IF ( Valtype(oWnd:bDestroy) == "B" )
      i := Eval( oWnd:bDestroy, oWnd )
      i := IIf( ValType( i ) == "L", i, .T. )
      IF ! i
         RETURN 0
      ENDIF
   ENDIF

   RETURN - 1

STATIC FUNCTION onNotifyIcon( oWnd, wParam, lParam )
   LOCAL ar

   IF wParam == 1
      IF PtrtoUlong(lParam) == 513
         IF ( Valtype(oWnd:bNotify) == "B" )
            Eval( oWnd:bNotify )
         ENDIF
      ELSEIF PtrtoUlong(lParam) == 512







      ELSEIF PtrtoUlong(lParam) == 516
         IF oWnd:oNotifyMenu <> Nil
            ar := hwg_GetCursorPos()
            oWnd:oNotifyMenu:Show( oWnd, ar[ 1 ], ar[ 2 ] )
         ENDIF
      ENDIF
   ENDIF
   RETURN - 1

STATIC FUNCTION onMdiCreate( oWnd, lParam )
   LOCAL nReturn
   ( (lParam) := (lParam) )

   IF ( Valtype(oWnd:bSetForm) == "B" )
      EVAL( oWnd:bSetForm, oWnd )
   ENDIF
   IF ! EMPTY ( oWnd:oWndParent )
       oWnd:oParent := oWnd:oWndParent
   ENDIF
   IF ! oWnd:lClosable
      oWnd:Closable( .F. )
   ENDIF
   IF oWnd:oFont <> Nil
      SendMessage( oWnd:handle, 48, oWnd:oFont:handle, 0 )
   ENDIF
   InitControls( oWnd )
   InitObjects( oWnd, .T. )
   IF oWnd:bInit <> Nil
      IF Valtype( nReturn := Eval( oWnd:bInit, oWnd ) ) <> "N"
         IF VALTYPE( nReturn ) == "L" .AND. ! nReturn
            oWnd:Close()
            RETURN Nil
         ENDIF
      ENDIF
   ENDIF

   oWnd:nInitFocus := IIF(VALTYPE( oWnd:nInitFocus ) = "O", oWnd:nInitFocus:Handle, oWnd:nInitFocus )
   SENDMESSAGE( oWnd:handle, 296, makelong( 2, 3 ), 0 )
   SENDMESSAGE( oWnd:handle, 296, makelong( 2, 2 ), 0 )
   IF oWnd:WindowState > 0
      onMove( oWnd )
   ENDIF
   RETURN - 1

STATIC FUNCTION onMdiCommand( oWnd, wParam )
   LOCAL iParHigh, iParLow, iItem, aMenu, oCtrl

   IF wParam == 61536
      SendMessage( HWindow():aWindows[ 2 ]:handle, 545, oWnd:handle, 0 )
   ENDIF
   iParHigh := HIWORD( wParam )
   iParLow := LOWORD( wParam )
   IF ISWINDOWVISIBLE( oWnd:Handle )
      oCtrl := oWnd:FindControl( iParLow )
   ENDIF

   IF oWnd:aEvents <> Nil .AND. !oWnd:lSuspendMsgsHandling  .AND.  ( iItem := AScan( oWnd:aEvents, { | a | a[ 1 ] == iParHigh.AND.a[ 2 ] == iParLow } ) ) > 0
      IF PtrtouLong( GetParent( GetFocus() ) ) = PtrtouLong( oWnd:Handle )
         oWnd:nFocus := GetFocus()
      ENDIF
      Eval( oWnd:aEvents[ iItem, 3 ], oWnd, iParLow )


   ELSEIF __ObjHasMsg( oWnd ,"OPOPUP") .AND. oWnd:oPopup <> Nil .AND.  ( aMenu := Hwg_FindMenuItem( oWnd:oPopup:aMenu, wParam, @iItem ) ) <> Nil  .AND. aMenu[ 1, iItem, 1 ] <> Nil
          Eval( aMenu[ 1, iItem, 1 ],  wParam )
   ELSEIF iParHigh = 1

   ENDIF

   IF  oCtrl <> Nil .AND. Hwg_BitaND( HWG_GETWINDOWSTYLE( oCtrl:handle ), 65536 ) <> 0 .AND. GetFocus() == oCtrl:Handle
      oWnd:nFocus := oCtrl:handle
   ENDIF
   RETURN 0

STATIC FUNCTION onMdiNcActivate( oWnd, wParam )

   IF ! Empty( oWnd:Screen )
      IF wParam = 1 .AND. SelfFocus( oWnd:Screen:handle, oWnd:handle )
         SetWindowPos( oWnd:Screen:HANDLE, 1, 0, 0, 0, 0, 0x0010 + 0x0200 + 0x0001 + 0x0002 )
         RETURN 1
      ENDIF
      IF wParam == 1 .AND. ! SelfFocus( oWnd:Screen:Handle, oWnd:HANDLE )

         IF ( Valtype(oWnd:bSetForm) == "B" )
            EVAL( oWnd:bSetForm, oWnd )
         ENDIF

         IF  ! oWnd:lSuspendMsgsHandling .AND. oWnd:bGetFocus <> Nil .AND. ! Empty( GetFocus() ) .AND. oWnd:IsMaximized()
            oWnd:lSuspendMsgsHandling := .T.
            Eval( oWnd:bGetFocus, oWnd )
            oWnd:lSuspendMsgsHandling := .F.
          ENDIF
      ENDIF
   ENDIF
   RETURN - 1

Static Function onMdiActivate( oWnd,wParam, lParam )
   Local  lScreen := oWnd:Screen <> nil, aWndMain ,oWndDeact
   Local lConf

   If ValType( wParam ) == ValType( oWnd:Handle )
      lConf := wParam = oWnd:Handle
   Else
      lConf := .F.
   EndIf


   IF !Empty( wParam )
      oWndDeact := oWnd:FindWindow( wParam )
      IF oWnd:lChild .AND. oWnd:lmaximized .AND. oWnd:IsMaximized()
         oWnd:Restore()
      ENDIF
      IF oWndDeact <> Nil .AND. oWndDeact:lModal
         AADD( oWndDeact:aChilds, lParam )
         AADD( oWnd:aChilds, wParam )
         oWnd:lModal := .T.
      ELSEIF  oWndDeact <> Nil .AND. ! oWndDeact:lModal
         oWnd:hActive := wParam
      ENDIF
   ENDIF


   IF  lScreen .AND. ( Empty( lParam ) .OR.  SelfFocus( lParam, oWnd:Screen:Handle ) ) .AND. !lConf

      RETURN 0
   ELSEIF lConf
      IF  ! SelfFocus( oWnd:Screen:handle, wParam ) .AND. oWnd:bLostFocus <> Nil
         oWnd:lSuspendMsgsHandling := .T.



         Eval( oWnd:bLostFocus, oWnd )
         oWnd:lSuspendMsgsHandling := .F.
      ENDIF
      IF oWnd:lModal
         aWndMain := oWnd:GETMAIN():aWindows

         AEVAL( aWndMain,{| w | IIF( w:Type >= 3 .AND. PtrtoUlong( w:Handle ) <> PtrtoUlong( wParam ), EnableWindow( w:Handle, .T. ), ) })
      ENDIF
   ELSEIF SelfFocus( oWnd:Handle, lParam )
      IF ( Valtype(oWnd:bSetForm) == "B" )
         EVAL( oWnd:bSetForm, oWnd )
      ENDIF
      IF oWnd:lModal
         aWndMain := oWnd:GETMAIN():aWindows

         AEVAL( aWndMain,{| w | IIF( w:Type >= 3 .AND. PtrtoUlong( w:Handle ) <> PtrtoUlong( lParam ), EnableWindow( w:Handle, .F. ), ) })
         AEVAL( oWnd:aChilds,{| wH | EnableWindow( wH, .T. ) })
     ENDIF
      IF oWnd:bGetFocus <> Nil .AND. ! oWnd:lSuspendMsgsHandling .AND. ! oWnd:IsMaximized()
         oWnd:lSuspendMsgsHandling := .T.
         IF EMPTY( oWnd:nFocus )
             UpdateWindow( oWnd:Handle)
         ENDIF
         Eval( oWnd:bGetFocus, oWnd )
         oWnd:lSuspendMsgsHandling := .F.
      ENDIF
   ENDIF

   RETURN 0

STATIC FUNCTION onEnterIdle( oDlg, wParam, lParam )
   LOCAL oItem

   ( (oDlg) := (oDlg) )


   IF wParam == 0 .AND. ( oItem := ATail( HDialog():aModalDialogs ) ) <> Nil  .AND. oItem:handle == lParam .AND. ! oItem:lActivated
      oItem:lActivated := .T.
      IF oItem:bActivate <> Nil
         Eval( oItem:bActivate, oItem )
      ENDIF
   ENDIF
   RETURN 0


STATIC FUNCTION onCloseQuery( o )
   IF ValType( o:bCloseQuery ) = "B"
      IF Eval( o:bCloseQuery )
         ReleaseAllWindows( o:handle )
      END
   ELSE
      ReleaseAllWindows( o:handle )
   END

   RETURN - 1


STATIC FUNCTION onActivate( oWin, wParam, lParam )
   LOCAL iParLow := LOWORD( wParam ), iParHigh := HIWORD( wParam )

   ( (lParam) := (lParam) )

   IF ( iParLow = 1 .OR. iParLow = 2 ) .AND. IsWindowVisible( oWin:handle )

      IF  ( oWin:type = 3 .AND. PtrtoUlong( lParam ) = 0  ) .OR. ( oWin:type <> 3 .AND. iParHigh = 0 )
         IF oWin:bGetFocus <> Nil
            oWin:lSuspendMsgsHandling := .T.
            IF iParHigh > 0

            ENDIF
            Eval( oWin:bGetFocus, oWin, lParam )
            oWin:lSuspendMsgsHandling := .F.
         ENDIF
      ENDIF
   ELSEIF iParLow = 0

      IF  ( oWin:type = 3 .AND. PtrtoUlong( lParam ) <> 0 ).OR. ( oWin:type <> 3 .AND. iParHigh = 0 .AND. PtrtoUlong( lParam ) = 0 )
         IF  oWin:bLostFocus <> Nil
            oWin:lSuspendMsgsHandling := .T.
            Eval( oWin:bLostFocus, oWin, lParam )
            oWin:lSuspendMsgsHandling := .F.
         ENDIF
      ENDIF
   ENDIF
   RETURN 1

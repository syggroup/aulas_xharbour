#line 112 "d:\devel\xharbour_bcc73\include\hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 20 "source\hsayimg.prg"
_HB_CLASS HSayImage ; UTILITY FUNCTION HSayImage(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HSayImage" , {HControl():classh} ) ) ; ;

_HB_MEMBER { winclass} ; IIF( !.F., s_oClass:AddMultiClsData(, "STATIC", nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "winclass" }, .F. ), )
   _HB_MEMBER { oImage} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oImage" }, .F., .F. ), )
   _HB_MEMBER { bClick, bDblClick} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bClick" , "bDblClick" }, .F., .F. ), )


   _HB_MEMBER New( oWndParent, nId, nStyle, nLeft, nTop, nWidth, nHeight, bInit,  bSize, ctooltip, bClick, bDblClick); IIF( .F., s_oClass:ModMethod( "New", @HSayImage_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HSayImage_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Redefine( oWndParent, nId, bInit, bSize, ctooltip); IIF( .F., s_oClass:ModMethod( "Redefine", @HSayImage_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Redefine", @HSayImage_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Activate(); IIF( .F., s_oClass:ModMethod( "Activate", @HSayImage_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @HSayImage_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER END(); IIF( .F., s_oClass:ModInline( "END", {|Self | Self, ( ::HControl:END(), IIf( ::oImage <> Nil, ::oImage:Release(), ::oImage := Nil ), ::oImage := Nil ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "END", {|Self | Self, ( ::HControl:END(), IIf( ::oImage <> Nil, ::oImage:Release(), ::oImage := Nil ), ::oImage := Nil ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER onClick(); IIF( .F., s_oClass:ModMethod( "onClick", @HSayImage_onClick(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onClick", @HSayImage_onClick(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER onDblClick(); IIF( .F., s_oClass:ModMethod( "onDblClick", @HSayImage_onDblClick(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onDblClick", @HSayImage_onDblClick(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HSayImage ;


UTILITY STATIC function HSayImage_New( oWndParent, nId, nStyle, nLeft, nTop, nWidth, nHeight, bInit,  bSize, ctooltip, bClick, bDblClick) ; local Self AS CLASS HSayImage := QSelf() AS CLASS HSayImage

   nStyle := Hwg_BitOr( nStyle, IIF( ( Valtype(bClick) == "B" ) .OR. ( Valtype(bDblClick) == "B" ), 256 , 0 ) )


   ::HControl:New( oWndParent, nId, nStyle, nLeft, nTop,                IIf( nWidth <> Nil, nWidth, 0 ), IIf( nHeight <> Nil, nHeight, 0 ),,  bInit, bSize,, ctooltip )

   ::title   := ""

   ::bClick := bClick
   ::oParent:AddEvent( 0, Self, { || ::onClick() } )

   ::bDblClick := bDblClick
   ::oParent:AddEvent( 1, Self, { || ::onDblClick() } )

   RETURN Self

UTILITY STATIC function HSayImage_Redefine( oWndParent, nId, bInit, bSize, ctooltip) ; local Self AS CLASS HSayImage := QSelf() AS CLASS HSayImage

   ::HControl:New( oWndParent, nId, 0, 0, 0, 0, 0,, bInit, bSize,, ctooltip )

   RETURN Self

UTILITY STATIC function HSayImage_Activate() ; local Self AS CLASS HSayImage := QSelf() AS CLASS HSayImage

   IF ! Empty( ::oParent:handle )

      ::handle := CreateStatic( ::oParent:handle, ::id,  ::style, ::nLeft, ::nTop, ::nWidth, ::nHeight, ::extStyle )
      ::Init()
   ENDIF
   RETURN Nil

UTILITY STATIC function HSayImage_onClick() ; local Self AS CLASS HSayImage := QSelf() AS CLASS HSayImage
   IF ::bClick <> NIL
      ::oParent:lSuspendMsgsHandling := .T.
      Eval( ::bClick, Self, ::id )
      ::oParent:lSuspendMsgsHandling := .F.
   ENDIF
   RETURN Nil

UTILITY STATIC function HSayImage_onDblClick() ; local Self AS CLASS HSayImage := QSelf() AS CLASS HSayImage
   IF ::bDblClick <> NIL
      ::oParent:lSuspendMsgsHandling := .T.
      Eval( ::bDblClick, Self, ::id )
      ::oParent:lSuspendMsgsHandling := .F.
   ENDIF
   RETURN Nil





_HB_CLASS HSayBmp ; UTILITY FUNCTION HSayBmp(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HSayBmp" , {HSayImage():classh} ) ) ; ;

   _HB_MEMBER { nOffsetV} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nOffsetV" }, .F., .F. ), )
   _HB_MEMBER { nOffsetH} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nOffsetH" }, .F., .F. ), )
   _HB_MEMBER { nZoom} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nZoom" }, .F., .F. ), )
   _HB_MEMBER { nStretch} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nStretch" }, .F., .F. ), )
   _HB_MEMBER { lNAOTraduz} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lNAOTraduz" }, .F., .F. ), )


   _HB_MEMBER New( oWndParent, nId, nLeft, nTop, nWidth, nHeight, Image, lRes, bInit,  bSize, ctooltip, bClick, bDblClick, lTransp, nStretch, nStyle, lNAOTraduz); IIF( .F., s_oClass:ModMethod( "New", @HSayBmp_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HSayBmp_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Redefine( oWndParent, nId, xImage, lRes, bInit, bSize, ctooltip, lTransp, lNAOTraduz); IIF( .F., s_oClass:ModMethod( "Redefine", @HSayBmp_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Redefine", @HSayBmp_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Init(); IIF( .F., s_oClass:ModMethod( "Init", @HSayBmp_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Init", @HSayBmp_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Paint( lpdis); IIF( .F., s_oClass:ModMethod( "Paint", @HSayBmp_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Paint", @HSayBmp_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER ReplaceBitmap( Image, lRes); IIF( .F., s_oClass:ModMethod( "ReplaceBitmap", @HSayBmp_ReplaceBitmap(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ReplaceBitmap", @HSayBmp_ReplaceBitmap(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Refresh(); IIF( .F., s_oClass:ModInline( "Refresh", {|Self | Self, RedrawWindow( ::handle, 4 + 1 + 256 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Refresh", {|Self | Self, RedrawWindow( ::handle, 4 + 1 + 256 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HSayBmp ;


UTILITY STATIC function HSayBmp_New( oWndParent, nId, nLeft, nTop, nWidth, nHeight, Image, lRes, bInit,  bSize, ctooltip, bClick, bDblClick, lTransp, nStretch, nStyle, lNAOTraduz) ; local Self AS CLASS HSayBmp := QSelf() AS CLASS HSayBmp

   nStyle := IIF( nStyle = Nil, 0, nStyle )

   ::lNAOTraduz     := IIf( lNAOTraduz  == Nil, .F., lNAOTraduz  )


   IF ::lNAOTraduz
      ctooltip  := ctooltip
   Else
      ctooltip  := HWG_TRANSLATOR( ctooltip, "BITMAP" )
   Endif

   ::HSayImage:New( oWndParent, nId, 13 + nStyle, nLeft, nTop, nWidth, nHeight, bInit, bSize, ctooltip, bClick, bDblClick )

   ::bPaint := { | o, lpdis | o:Paint( lpdis ) }
   ::nStretch := IIf( nStretch = Nil, 0, nStretch )
   IF lTransp <> Nil .AND. lTransp
      ::BackStyle := 1
      ::extStyle +=  32
   ENDIF

   IF Image <> Nil .AND. ! Empty( Image )
      IF lRes == Nil ; lRes := .F. ; ENDIF



      ::oImage := IIf( lRes .OR. ValType( Image ) == "N",      HBitmap():AddResource( Image ),  IIf( ValType( Image ) == "C",      HBitmap():AddFile( Image ), Image ) )
      IF nWidth == Nil .OR. nHeight == Nil
         ::nWidth  := ::oImage:nWidth
         ::nHeight := ::oImage:nHeight
         ::nStretch = 2
      ENDIF
   ENDIF
   ::Activate()

   RETURN Self

UTILITY STATIC function HSayBmp_Redefine( oWndParent, nId, xImage, lRes, bInit, bSize, ctooltip, lTransp, lNAOTraduz) ; local Self AS CLASS HSayBmp := QSelf() AS CLASS HSayBmp

   ::lNAOTraduz     := IIf( lNAOTraduz  == Nil, .F., lNAOTraduz  )


   IF ::lNAOTraduz
      ctooltip  := ctooltip
   Else
      ctooltip  := HWG_TRANSLATOR( ctooltip, "BITMAP" )
   Endif

   ::HSayImage:Redefine( oWndParent, nId, bInit, bSize, ctooltip )
   ::bPaint := { | o, lpdis | o:Paint( lpdis ) }
   IF lTransp <> Nil .AND. lTransp
      ::BackStyle := 1
      ::extStyle +=  32
   ENDIF
   IF lRes == Nil ; lRes := .F. ; ENDIF



   ::oImage := IIf( lRes .OR. ValType( xImage ) == "N",      HBitmap():AddResource( xImage ),  IIf( ValType( xImage ) == "C",      HBitmap():AddFile( xImage ), xImage ) )
   RETURN Self

UTILITY STATIC function HSayBmp_Init() ; local Self AS CLASS HSayBmp := QSelf() AS CLASS HSayBmp

   IF !::lInit
      ::HSayImage:Init()
      IF ::oImage <> Nil .AND. !empty( ::oImage:Handle )
         SendMessage( ::handle,370, 0, ::oImage:handle )
      ENDIF
   ENDIF
Return Nil

UTILITY STATIC function HSayBmp_Paint( lpdis) ; local Self AS CLASS HSayBmp := QSelf() AS CLASS HSayBmp
   LOCAL drawInfo := GetDrawItemInfo( lpdis )

   IF ::oImage <> Nil .AND. !empty( ::oImage:Handle )
      IF ::nZoom == Nil
         IF ::BackStyle = 1
            IF ::nStretch = 1

               DrawTransparentBitmap( drawInfo[ 3 ], ::oImage:handle, drawInfo[ 4 ] + ::nOffsetH,  drawInfo[ 5 ] + ::nOffsetV,, )
ELSEIF ::nStretch = 2

   DrawTransparentBitmap( drawInfo[ 3 ], ::oImage:handle, drawInfo[ 4 ] + ::nOffsetH,  drawInfo[ 5 ] + ::nOffsetV,, ::nWidth + 1, ::nHeight + 1 )
ELSE

   DrawTransparentBitmap( drawInfo[ 3 ], ::oImage:handle, drawInfo[ 4 ] + ::nOffsetH,  drawInfo[ 5 ] + ::nOffsetV,, drawInfo[ 6 ] - drawInfo[ 4 ] + 1, drawInfo[ 7 ] - drawInfo[ 5 ] + 1  )
ENDIF
ELSE
   IF ::nStretch = 1

      DrawBitmap( drawInfo[ 3 ], ::oImage:handle,, drawInfo[ 4 ] + ::nOffsetH,  drawInfo[ 5 ] + ::nOffsetV )
ELSEIF ::nStretch = 2

   DrawBitmap( drawInfo[ 3 ], ::oImage:handle,, drawInfo[ 4 ] + ::nOffsetH,  drawInfo[ 5 ] + ::nOffsetV, ::nWidth + 1, ::nHeight + 1 )
ELSE

   DrawBitmap( drawInfo[ 3 ], ::oImage:handle,, drawInfo[ 4 ] + ::nOffsetH,  drawInfo[ 5 ] + ::nOffsetV, drawInfo[ 6 ] - drawInfo[ 4 ] + 1, drawInfo[ 7 ] - drawInfo[ 5 ] + 1 )
ENDIF
ENDIF
ELSE

   DrawBitmap( drawInfo[ 3 ], ::oImage:handle,, drawInfo[ 4 ] + ::nOffsetH,  drawInfo[ 5 ] + ::nOffsetV, ::oImage:nWidth * ::nZoom, ::oImage:nHeight * ::nZoom )
ENDIF
ENDIF

RETURN Nil

UTILITY STATIC function HSayBmp_ReplaceBitmap( Image, lRes) ; local Self AS CLASS HSayBmp := QSelf() AS CLASS HSayBmp

   IF ::oImage <> Nil
      ::oImage:Release()
   ENDIF
   IF lRes == Nil ; lRes := .F. ; ENDIF



   ::oImage := IIf( lRes .OR. ValType( Image ) == "N",      HBitmap():AddResource( Image ),  IIf( ValType( Image ) == "C",      HBitmap():AddFile( Image ), Image ) )

   RETURN Nil




_HB_CLASS HSayIcon ; UTILITY FUNCTION HSayIcon(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HSayIcon" , {HSayImage():classh} ) ) ; ;


   _HB_MEMBER New( oWndParent, nId, nLeft, nTop, nWidth, nHeight, Image, lRes, bInit,  bSize, ctooltip, lOEM, bClick, bDblClick); IIF( .F., s_oClass:ModMethod( "New", @HSayIcon_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HSayIcon_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Redefine( oWndParent, nId, xImage, lRes, bInit, bSize, ctooltip); IIF( .F., s_oClass:ModMethod( "Redefine", @HSayIcon_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Redefine", @HSayIcon_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Init(); IIF( .F., s_oClass:ModMethod( "Init", @HSayIcon_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Init", @HSayIcon_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER REFRESH(); IIF( .F., s_oClass:ModInline( "REFRESH", {|Self | Self, SendMessage( ::handle, 370, 1, ::oImage:handle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "REFRESH", {|Self | Self, SendMessage( ::handle, 370, 1, ::oImage:handle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HSayIcon ;


UTILITY STATIC function HSayIcon_New( oWndParent, nId, nLeft, nTop, nWidth, nHeight, Image, lRes, bInit,  bSize, ctooltip, lOEM, bClick, bDblClick) ; local Self AS CLASS HSayIcon := QSelf() AS CLASS HSayIcon

   ::HSayImage:New( oWndParent, nId, 3, nLeft, nTop, nWidth, nHeight, bInit, bSize, ctooltip, bClick, bDblClick )

   IF lRes == Nil ; lRes := .F. ; ENDIF
   IF lOEM == Nil ; lOEM := .F. ; ENDIF
   IF ::oImage == nil



      ::oImage := IIf( lRes .OR. ValType( Image ) == "N",   HIcon():AddResource( Image,,,, lOEM ),   IIf( ValType( Image ) == "C",     HIcon():AddFile( Image ), Image ) )
   ENDIF
   ::Activate()

   RETURN Self

UTILITY STATIC function HSayIcon_Redefine( oWndParent, nId, xImage, lRes, bInit, bSize, ctooltip) ; local Self AS CLASS HSayIcon := QSelf() AS CLASS HSayIcon

   ::HSayImage:Redefine( oWndParent, nId, bInit, bSize, ctooltip )

   IF lRes == Nil ; lRes := .F. ; ENDIF
   IF ::oImage == nil



      ::oImage := IIf( lRes .OR. ValType( xImage ) == "N",    HIcon():AddResource( xImage ),  IIf( ValType( xImage ) == "C",    HIcon():AddFile( xImage ), xImage ) )
   ENDIF
   RETURN Self

UTILITY STATIC function HSayIcon_Init() ; local Self AS CLASS HSayIcon := QSelf() AS CLASS HSayIcon

   IF ! ::lInit
      ::HSayImage:Init()
      SendMessage( ::handle, 370, 1, ::oImage:handle )
   ENDIF
   RETURN Nil

#line 112 "d:\devel\xharbour_bcc7\include\hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 22 "source\barcode.prg"
_HB_CLASS HWG_Barcode ; UTILITY FUNCTION HWG_Barcode(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HWG_Barcode" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { hDC} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hDC" }, .F., .F. ), )
   _HB_MEMBER { cText} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cText" }, .F., .F. ), )
   _HB_MEMBER { nTop} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nTop" }, .F., .F. ), )
   _HB_MEMBER { nLeft} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nLeft" }, .F., .F. ), )
   _HB_MEMBER { nWidth} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nWidth" }, .F., .F. ), )
   _HB_MEMBER { nHeight} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nHeight" }, .F., .F. ), )
   _HB_MEMBER { nColText} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nColText" }, .F., .F. ), )
   _HB_MEMBER { nColPane} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nColPane" }, .F., .F. ), )
   _HB_MEMBER { lHorizontal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lHorizontal" }, .F., .F. ), )
   _HB_MEMBER { lTransparent} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lTransparent" }, .F., .F. ), )
   _HB_MEMBER { nPinWidth} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nPinWidth" }, .F., .F. ), )
   _HB_MEMBER { nBCodeType} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nBCodeType" }, .F., .F. ), )



















   _HB_MEMBER New( hDC, cText, nTop, nLeft, nWidth, nHeight, nBCodeType,  nColText, nColPane, lHorz, lTransparent,  nPinWidth) AS CLASS HWG_Barcode; IIF( .F., s_oClass:ModMethod( "New", @HWG_Barcode_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HWG_Barcode_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER ShowBarcode(); IIF( .F., s_oClass:ModMethod( "ShowBarcode", @HWG_Barcode_ShowBarcode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ShowBarcode", @HWG_Barcode_ShowBarcode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CreateBarcode( cCode); IIF( .F., s_oClass:ModMethod( "CreateBarcode", @HWG_Barcode_CreateBarcode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateBarcode", @HWG_Barcode_CreateBarcode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitCode39( lCheck); IIF( .F., s_oClass:ModMethod( "InitCode39", @HWG_Barcode_InitCode39(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitCode39", @HWG_Barcode_InitCode39(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitCode128( cMode); IIF( .F., s_oClass:ModMethod( "InitCode128", @HWG_Barcode_InitCode128(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitCode128", @HWG_Barcode_InitCode128(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitEAN13(); IIF( .F., s_oClass:ModMethod( "InitEAN13", @HWG_Barcode_InitEAN13(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitEAN13", @HWG_Barcode_InitEAN13(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitUPC( nLen); IIF( .F., s_oClass:ModMethod( "InitUPC", @HWG_Barcode_InitUPC(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitUPC", @HWG_Barcode_InitUPC(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitE13BL( nLen); IIF( .F., s_oClass:ModMethod( "InitE13BL", @HWG_Barcode_InitE13BL(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitE13BL", @HWG_Barcode_InitE13BL(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitCodabar(); IIF( .F., s_oClass:ModMethod( "InitCodabar", @HWG_Barcode_InitCodabar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitCodabar", @HWG_Barcode_InitCodabar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitSub5(); IIF( .F., s_oClass:ModMethod( "InitSub5", @HWG_Barcode_InitSub5(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitSub5", @HWG_Barcode_InitSub5(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitIndustrial25( lCheck); IIF( .F., s_oClass:ModMethod( "InitIndustrial25", @HWG_Barcode_InitIndustrial25(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitIndustrial25", @HWG_Barcode_InitIndustrial25(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitInterleave25( lMode); IIF( .F., s_oClass:ModMethod( "InitInterleave25", @HWG_Barcode_InitInterleave25(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitInterleave25", @HWG_Barcode_InitInterleave25(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitMatrix25( lCheck); IIF( .F., s_oClass:ModMethod( "InitMatrix25", @HWG_Barcode_InitMatrix25(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitMatrix25", @HWG_Barcode_InitMatrix25(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HWG_Barcode ;







UTILITY STATIC function HWG_Barcode_New( hDC, cText, nTop, nLeft, nWidth, nHeight, nBCodeType,  nColText, nColPane, lHorz, lTransparent, nPinWidth) ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   nWidth := IIf( nWidth == nil, 200, nWidth ) ;
   nHeight := IIf( nHeight == nil, 20, nHeight ) ;

   nColText := IIf( nColText == nil, 0, nColText ) ;
   nColPane := IIf( nColPane == nil, RGB( 255, 255, 255 ), nColPane ) ;
   lHorz := IIf( lHorz == nil, .T., lHorz ) ;
   lTransparent := IIf( lTransparent == nil, .F., lTransparent ) ;
   nPinWidth := IIf( nPinWidth == nil, 1, nPinWidth ) ;




   ::hDC          := hDC
   ::cText        := cText
   ::nTop         := nTop
   ::nLeft        := nLeft
   ::nWidth       := nWidth
   ::nHeight      := nHeight
   ::nBCodeType   := nBCodeType
   ::nColText     := nColText
   ::nColPane     := nColPane
   ::lHorizontal  := lHorz
   ::lTransparent := lTransparent
   ::nPinWidth    := nPinWidth

   RETURN ( Self )






UTILITY STATIC function HWG_Barcode_ShowBarcode() ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   LOCAL cCode, cCode2

   DO CASE
   CASE ::nBCodeType = 1
      cCode := ::InitCode39( .F. )
   CASE ::nBCodeType = 2
      cCode := ::InitCode39( .T. )
   CASE ::nBCodeType = 3
      cCode := ::InitCode128( "" )
   CASE ::nBCodeType = 4
      cCode := ::InitCode128( "A" )
   CASE ::nBCodeType = 5
      cCode := ::InitCode128( "B" )
   CASE ::nBCodeType = 6
      cCode := ::InitCode128( "C" )
   CASE ::nBCodeType = 7
      cCode  := ::InitUPC( 7 )
      cCode2 := ::InitE13BL( 8 )
   CASE ::nBCodeType = 8
      cCode := ::InitEAN13()
   CASE ::nBCodeType = 9
      cCode  := ::InitUPC( 11 )
      cCode2 := ::InitE13BL( 12 )
   CASE ::nBCodeType = 10
      cCode  := ::InitCodabar()
   CASE ::nBCodeType = 11
      cCode  := ::InitSub5()
   CASE ::nBCodeType = 12
      cCode  := ::InitIndustrial25( .F. )
   CASE ::nBCodeType = 13
      cCode  := ::InitIndustrial25( .T. )
   CASE ::nBCodeType = 14
      cCode  := ::InitInterleave25( .F. )
   CASE ::nBCodeType = 15
      cCode  := ::InitInterleave25( .T. )
   CASE ::nBCodeType = 16
      cCode  := ::InitMatrix25( .F. )
   CASE ::nBCodeType = 17
      cCode  := ::InitMatrix25( .T. )
   OTHERWISE
      cCode := ::InitCode39( .T. )
   ENDCASE

   ::CreateBarcode( cCode )

   IF ::nBCodeType = 7 .OR. ::nBCodeType = 9
      ::CreateBarcode( cCode2 )
   ENDIF

   RETURN ( NIL )






UTILITY STATIC function HWG_Barcode_CreateBarcode( cCode) ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   LOCAL i, hPen, hOldPen, hBrush, hOldBrush

   LOCAL nX    := ::nTop
   LOCAL nY    := ::nLeft




   IF ::lTransparent = .F. .AND. ::nColPane <> RGB( 255, 255, 255 )

      IF ::lHorizontal = .F.
         RICH_Rectangle( ::hDC, nX, nY, nX + ::nHeight, nY + Min( Len( cCode ) * ::nPinWidth, ::nWidth ) )
      ELSE
         RICH_Rectangle( ::hDC, nX, nY, nX +  Min( Len( cCode ) * ::nPinWidth, ::nWidth ), nY +  ::nHeight )
      ENDIF

   ENDIF

   hPen      := Rich_CreatePen( , , ::nColText )
   hOldPen   := Rich_SelectObject( ::hDC, hPen )
   hBrush    := Rich_CreateSolidBrush( ::nColText )
   hOldBrush := Rich_SelectObject( ::hDC, hBrush )

   IIf( ::nPinWidth < 1, ::nPinWidth := 1, )

   FOR i := 1 TO Len( cCode )

      IF SubStr( cCode, i, 1 ) = "1"
         IF ::lHorizontal = .F.
            RICH_Rectangle( ::hDC, nX, nY, nX + ::nHeight, ( nY += ::nPinWidth ) )

         ELSE

            RICH_Rectangle( ::hDC, nX, nY, ( nX += ::nPinWidth ), nY + ::nHeight )
         ENDIF
      ELSE
         IF ::lHorizontal = .F.
            nY += ::nPinWidth
         ELSE
            nX += ::nPinWidth
         ENDIF
      ENDIF

   NEXT





















   Rich_SelectObject( ::hDC, hOldPen )
   DeleteObject( hPen )
   Rich_SelectObject( ::hDC, hOldBrush )
   DeleteObject( hBrush )

   RETURN ( NIL )






UTILITY STATIC function HWG_Barcode_InitCode39( lCheck) ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   LOCAL cCars   := "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%"











































   LOCAL aBarras := { "1110100010101110",  "1011100010101110",  "1110111000101010",  "1010001110101110",  "1110100011101010",  "1011100011101010",  "1010001011101110",  "1110100010111010",  "1011100010111010",  "1010001110111010",  "1110101000101110",  "1011101000101110",  "1110111010001010",  "1010111000101110",  "1110101110001010",  "1011101110001010",  "1010100011101110",  "1110101000111010",  "1011101000111010",  "1010111000111010",  "1110101010001110",  "1011101010001110",  "1110111010100010",  "1010111010001110",  "1110101110100010",  "1011101110100010",  "1010101110001110",  "1110101011100010",  "1011101011100010",  "1010111011100010",  "1110001010101110",  "1000111010101110",  "1110001110101010",  "1000101110101110",  "1110001011101010",  "1000111011101010",  "1000101011101110",  "1110001010111010",  "1000111010111010",  "1000101110111010",  "1000100010100010",  "1000100010100010",  "1000101000100010",  "1010001000100010" }

   LOCAL cCar, m, n
   LOCAL cBarra := ""
   LOCAL cCode  := ::cText
   LOCAL nCheck := 0

   lCheck := IIf( lCheck == nil, .F., lCheck ) ;

   cCode := Upper( cCode )

   IF Len( cCode ) > 32
      cCode := Left( cCode, 32 )
   ENDIF

   cCode := "*" + cCode + "*"

   FOR n := 1 TO Len( cCode )
      cCar := SubStr( cCode, n, 1 )
      m    := At( cCar, cCars )
      IF n > 0
         cBarra := cBarra + aBarras[ m ]
         nCheck += ( m - 1 )
      END
   NEXT

   IF lCheck = .T.
      cBarra += aBarras[ nCheck % 43 + 1 ]
   END

   RETURN ( cBarra )






UTILITY STATIC function HWG_Barcode_InitCode128( cMode) ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode


















   LOCAL aCode := { "212222", "222122", "222221", "121223", "121322", "131222",  "122213", "122312", "132212", "221213", "221312", "231212",  "112232", "122132", "122231", "113222", "123122", "123221",  "223211", "221132", "221231", "213212", "223112", "312131",  "311222", "321122", "321221", "312212", "322112", "322211",  "212123", "212321", "232121", "111323", "131123", "131321",  "112313", "132113", "132311", "211313", "231113", "231311",  "112133", "112331", "132131", "113123", "113321", "133121",  "313121", "211331", "231131", "213113", "213311", "213131",  "311123", "311321", "331121", "312113", "312311", "332111",  "314111", "221411", "431111", "111224", "111422", "121124",  "121421", "141122", "141221", "112214", "112412", "122114",  "122411", "142112", "142211", "241211", "221114", "213111",  "241112", "134111", "111242", "121142", "121241", "114212",  "124112", "124211", "411212", "421112", "421211", "212141",  "214121", "412121", "111143", "111341", "131141", "114113",  "114311", "411113", "411311", "113141", "114131", "311141",  "411131", "211412", "211214", "211232", "2331112" }

   LOCAL cBarra, cCar, cTemp, n, nCar
   LOCAL cCode  := ::cText
   LOCAL lCodeC := .F.
   LOCAL lCodeA := .F.
   LOCAL nSum   := 0
   LOCAL nCount := 0


   IF ValType( cCode ) <> "C"
      MsgInfo( "Barcode Code 128 requires a character value." )
      RETURN NIL
   ENDIF

   IF ! Empty( cMode )
      IF ValType( cMode ) = "C" .AND. Upper( cMode ) $ "ABC"
         cMode := Upper( cMode )
      ELSE
         MsgInfo( "Code 128 modes are A,B o C. Character values." )
      ENDIF
   ENDIF

   IF Empty( cMode )

      IF Str( Val( cCode ), Len( cCode ) ) = cCode
         lCodeC := .T.
         cTemp  := aCode[ 106 ]
         nSum   := 105
      ELSE
         FOR n := 1 TO Len( cCode )
            nCount += IF( Asc( SubStr( cCode, n, 1 ) ) > 31, 1, 0 )
         NEXT
         IF nCount < Len( cCode ) / 2
            lCodeA := .T.
            cTemp  := aCode[ 104 ]
            nSum   := 103
         ELSE
            cTemp := aCode[ 105 ]
            nSum  := 104
         ENDIF
      ENDIF
   ELSE
      IF cMode == "C"
         lCodeC := .T.
         cTemp  := aCode[ 106 ]
         nSum   := 105
      ELSEIF cMode == "A"
         lCodeA := .T.
         cTemp  := aCode[ 104 ]
         nSum   := 103
      ELSE
         cTemp := aCode[ 105 ]
         nSum  := 104
      ENDIF
   ENDIF


   nCount := 0

   FOR n := 1 TO Len( cCode )

      nCount ++
      cCar := SubStr( cCode, n, 1 )

      IF lCodeC
         IF Len( cCode ) = n
            cTemp += aCode[ 101 ]
            nCar := Asc( cCar ) - 31
         ELSE
            nCar := Val( SubStr( cCode, n, 2 ) ) + 1
            n ++
         ENDIF
      ELSEIF lCodeA
         IF cCar > "_"
            cTemp += aCode[ 101 ]
            nCar := Asc( cCar ) - 31
         ELSEIF cCar <= " "
            nCar := Asc( cCar ) + 64
         ELSE
            nCar := Asc( cCar ) - 31
         ENDIF
      ELSE
         IF cCar <= " "
            cTemp += aCode[ 102 ]
            nCar := Asc( cCar ) + 64
         ELSE
            nCar := Asc( cCar ) - 31
         ENDIF
      ENDIF

      nSum += ( nCar - 1 ) * nCount
      cTemp := cTemp + aCode[ nCar ]

   NEXT

   nSum  := nSum % 103 + 1
   cTemp := cTemp + aCode[ nSum ] + aCode[ 107 ]
   cBarra := ""

   FOR n := 1 TO Len( cTemp ) STEP 2
      cBarra += Replicate( "1", Val( SubStr( cTemp, n, 1 ) ) )
      cBarra += Replicate( "0", Val( SubStr( cTemp, n + 1, 1 ) ) )
   NEXT

   RETURN ( cBarra )






UTILITY STATIC function HWG_Barcode_InitEAN13() ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   LOCAL derecha := "1110010110011011011001000010101110010011101010000100010010010001110100"
   LOCAL izda1   := "0001101001100100100110111101010001101100010101111011101101101110001011"
   LOCAL izda2   := "0100111011001100110110100001001110101110010000101001000100010010010111"
   LOCAL primero := "ooooooooeoeeooeeoeooeeeooeooeeoeeooeoeeeoooeoeoeoeoeeooeeoeo"

   LOCAL l, s1, s2, control, n, cadena, Numero
   LOCAL Izda, Dcha, String, Mascara, k
   LOCAL cCode := ::cText

   k := Left( AllTrim( cCode ) + "000000000000", 12 )



   s1 := 0

   s2 := 0

   FOR n := 1 TO 6
      s1 := s1 + Val( SubStr( k, ( n * 2 ) - 1, 1 ) )
      s2 := s2 + Val( SubStr( k, ( n * 2 ), 1 ) )
   NEXT

   control := ( s2 * 3 ) + s1
   l := 10
   while control > l
      l := l + 10
   ENDDO

   control := l - control
   k := k + Str( control, 1, 0 )



   Dcha := SubStr( k, 8, 6 )
   Izda := SubStr( k, 2, 6 )
   Mascara := SubStr( primero, ( Val( SubStr( k, 1, 1 ) ) * 6 ) + 1, 6 )


   cadena := "101"


   FOR n := 1 TO 6
      Numero := Val( SubStr( Izda, n, 1 ) )
      IF SubStr( Mascara, n, 1 ) = "o"
         String := SubStr( izda1, Numero * 7 + 1, 7 )
      ELSE
         String := SubStr( izda2, Numero * 7 + 1, 7 )
      ENDIF
      cadena := cadena + String
   NEXT

   cadena := cadena + "01010"


   FOR n := 1 TO 6
      Numero := Val( SubStr( Dcha, n, 1 ) )
      String := SubStr( derecha, Numero * 7 + 1, 7 )
      cadena := cadena + String
   NEXT

   cadena := cadena + "101"

   RETURN ( cadena )






UTILITY STATIC function HWG_Barcode_InitUPC( nLen) ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   LOCAL derecha := "1110010110011011011001000010101110010011101010000100010010010001110100"
   LOCAL izda1   := "0001101001100100100110111101010001101100010101111011101101101110001011"

   LOCAL l, s1, s2, control, n, cadena, Numero
   LOCAL Izda, Dcha, k
   LOCAL cCode := ::cText


   k := Left( AllTrim( cCode ) + "000000000000", nLen )


   s1 := 0

   s2 := 0

   FOR n := 1 TO nLen STEP 2
      s1 := s1 + Val( SubStr( k, n, 1 ) )
      s2 := s2 + Val( SubStr( k, n + 1, 1 ) )
   NEXT

   control := ( s1 * 3 ) + s2
   l := 10
   while control > l
      l := l + 10
   ENDDO

   control := l - control
   k := k + Str( control, 1, 0 )
   nLen ++


   cadena := ""
   Dcha := Right( k, nLen / 2 )
   Izda := Left( k, nLen / 2 )


   cadena := "101"

   FOR n := 1 TO nLen / 2
      Numero := Val( SubStr( Izda, n, 1 ) )
      cadena += SubStr( izda1, Numero * 7 + 1, 7 )
   NEXT

   cadena := cadena + "01010"


   FOR n := n TO Len( k )
      Numero := Val( SubStr( Dcha, n, 1 ) )
      cadena += SubStr( derecha, Numero * 7 + 1, 7 )
   NEXT

   cadena := cadena + "101"

   RETURN ( cadena )






UTILITY STATIC function HWG_Barcode_InitE13BL( nLen) ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   nLen := Int( nLen / 2 )

   RETURN "101" + Replicate( "0", nLen * 7 ) + "01010" + Replicate( "0", nLen * 7 ) + "101"






UTILITY STATIC function HWG_Barcode_InitCodabar() ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode



   LOCAL cChar := "0123456789-$:/.+ABCDTN*E"





   LOCAL abar := { "101010001110", "101011100010", "101000101110", "111000101010",  "101110100010", "111010100010", "100010101110", "100010111010",  "100011101010", "111010001010", "101000111010", "101110001010",  "11101011101110", "11101110101110", "11101110111010", "10111011101110",  "10111000100010", "10001000101110", "10100011100010", "10111000100010",  "10001000101110", "10100010001110", "10100011100010" }

   LOCAL n, nCar
   LOCAL cBarra := ""
   LOCAL cCode := Upper( ::cText )

   FOR n := 1 TO Len( cCode )
      IF ( nCar := At( SubStr( cCode, n, 1 ), cChar ) ) > 0
         cBarra += abar[ nCar ]
      ENDIF
   NEXT

   RETURN ( cBarra )






UTILITY STATIC function HWG_Barcode_InitSub5() ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   LOCAL izda1   := "0001101001100100100110111101010001101100010101111011101101101110001011"
   LOCAL izda2   := "0100111011001100110110100001001110101110010000101001000100010010010111"
   LOCAL primero := "ooooooooeoeeooeeoeooeeeooeooeeoeeooeoeeeoooeoeoeoeoeeooeeoeo"


   LOCAL k, control, n, nCar
   LOCAL cCode   := ::cText
   LOCAL cBarras := "1011"

   k := Left( AllTrim( cCode ) + "00000", 5 )



   control := Right( Str( Val( SubStr( k, 1, 1 ) ) * 3 + Val( SubStr( k, 3, 1 ) ) * 3 +  Val( SubStr( k, 5, 1 ) ) * 3 + Val( SubStr( k, 2, 1 ) ) * 9 +  Val( SubStr( k, 4, 1 ) ) * 9, 5, 0 ), 1 )
   control := SubStr( primero, Val( control ) * 6 + 2, 5 )

   FOR n := 1 TO 5
      nCar := Val( SubStr( k, n, 1 ) )
      IF SubStr( control, n, 1 ) = "o"
         cBarras += SubStr( izda2, nCar * 7 + 1, 7 )
      ELSE
         cBarras += SubStr( izda1, nCar * 7 + 1, 7 )
      ENDIF
      IF n < 5
         cBarras += "01"
      ENDIF
   NEXT

   RETURN ( cBarras )






UTILITY STATIC function HWG_Barcode_InitIndustrial25( lCheck) ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   LOCAL n

   LOCAL aBar     := { "00110", "10001", "01001", "11000", "00101",  "10100", "01100", "00011", "10010", "01010" }
   LOCAL cInStart := "110"
   LOCAL cInStop  := "101"
   LOCAL cBar     := ""
   LOCAL cBarra   := ""
   LOCAL nCheck   := 0
   LOCAL cCode    := trans( ::cText, "@9" )

   lCheck := IIf( lCheck == nil, .F., lCheck ) ;

   IF lCheck
      FOR n := 1 TO Len( cCode ) STEP 2
         nCheck += Val( SubStr( cCode, n, 1 ) ) * 3 + Val( SubStr( cCode, n + 1, 1 ) )
      NEXT
      cCode += Right( Str( nCheck, 10, 0 ), 1 )
   ENDIF

   cBar := cInStart

   FOR n := 1 TO Len( cCode )
      cBar += aBar[ Val( SubStr( cCode, n, 1 ) ) + 1 ] + "0"
   NEXT

   cBar += cInStop

   FOR n := 1 TO Len( cBar )
      IF SubStr( cBar, n, 1 ) = "1"
         cBarra += "1110"
      ELSE
         cBarra += "10"
      ENDIF
   NEXT

   RETURN ( cBarra )






UTILITY STATIC function HWG_Barcode_InitInterleave25( lMode) ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   LOCAL n, m

   LOCAL aBar   := { "00110", "10001", "01001", "11000", "00101",  "10100", "01100", "00011", "10010", "01010" }
   LOCAL cStart := "0000"
   LOCAL cStop  := "100"
   LOCAL cBar   := ""
   LOCAL cIz
   LOCAL cBarra := ""
   LOCAL cDer
   LOCAL nLen
   LOCAL nCheck := 0
   LOCAL cCode  := trans( ::cText, "@9" )

   lMode := IIf( lMode == nil, .F., lMode ) ;

   nLen   := Len( cCode )
   IF ( nLen % 2 = 1 .AND. ! lMode )
      nLen ++
      cCode += "0"
   ENDIF
   IF lMode
      FOR n := 1 TO Len( cCode ) STEP 2
         nCheck += Val( SubStr( cCode, n, 1 ) ) * 3 + Val( SubStr( cCode, n + 1, 1 ) )
      NEXT
      cCode += Right( Str( nCheck, 10, 0 ), 1 )
   ENDIF

   cBarra := cStart


   FOR n := 1 TO nLen STEP 2
      cIz  := aBar[ Val( SubStr( cCode, n, 1 ) ) + 1 ]
      cDer := aBar[ Val( SubStr( cCode, n + 1, 1 ) ) + 1 ]
      FOR m := 1 TO 5
         cBarra += SubStr( cIz, m, 1 ) + SubStr( cDer, m, 1 )
      NEXT
   NEXT

   cBarra += cStop

   FOR n := 1 TO Len( cBarra ) STEP 2
      IF SubStr( cBarra, n, 1 ) = "1"
         cBar += "111"
      ELSE
         cBar += "1"
      ENDIF
      IF SubStr( cBarra, n + 1, 1 ) = "1"
         cBar += "000"
      ELSE
         cBar += "0"
      ENDIF
   NEXT

   RETURN ( cBar )






UTILITY STATIC function HWG_Barcode_InitMatrix25( lCheck) ; local Self AS CLASS HWG_Barcode := QSelf() AS CLASS HWG_Barcode

   LOCAL n

   LOCAL aBar   := { "00110", "10001", "01001", "11000", "00101",  "10100", "01100", "00011", "10010", "01010" }
   LOCAL cMtSt  := "10000"
   LOCAL cBar   := ""
   LOCAL cBarra := ""
   LOCAL nCheck := 0
   LOCAL cCode  := trans( ::cText, "@9" )

   lCheck := IIf( lCheck == nil, .F., lCheck ) ;

   IF lCheck
      FOR n := 1 TO Len( cCode ) STEP 2
         nCheck += Val( SubStr( cCode, n, 1 ) ) * 3 + Val( SubStr( cCode, n + 1, 1 ) )
      NEXT
      cCode += Right( Str( nCheck, 10, 0 ), 1 )
   ENDIF

   cBar := cMtSt

   FOR n := 1 TO Len( cCode )
      cBar += aBar[ Val( SubStr( cCode, n, 1 ) ) + 1 ] + "0"
   NEXT

   cBar += cMtSt

   FOR n := 1 TO Len( cBar ) STEP 2
      IF SubStr( cBar, n, 1 ) = "1"
         cBarra += "111"
      ELSE
         cBarra += "1"
      ENDIF
      IF SubStr( cBar, n + 1, 1 ) = "1"
         cBarra += "000"
      ELSE
         cBarra += "0"
      ENDIF
   NEXT

   RETURN ( cBarra )

#pragma BEGINDUMP

#include "hwingui.h"

HB_FUNC( RICH_RECTANGLE )
{
   hb_retl( Rectangle( (HDC) HB_PARHANDLE( 1 ),
                       hb_parni( 2 )      ,
                       hb_parni( 3 )      ,
                       hb_parni( 4 )      ,
                       hb_parni( 5 )
                       ) ) ;
}


HB_FUNC( RICH_CREATEPEN )
{
   HB_RETHANDLE( CreatePen( hb_parni( 1 ),   // pen style
                            hb_parni( 2 ),   // pen width
                            (COLORREF) hb_parnl( 3 )    // pen color
                           ) );
}


HB_FUNC( RICH_SELECTOBJECT )
{
   HB_RETHANDLE( SelectObject( (HDC) HB_PARHANDLE( 1 ), (HGDIOBJ) HB_PARHANDLE( 2 ) ) ) ;
}



HB_FUNC( RICH_CREATESOLIDBRUSH )
{
   HB_RETHANDLE( CreateSolidBrush( (COLORREF) hb_parnl( 1 ) ) ) ;    // brush color
}

#pragma ENDDUMP

#line 14 "source\procmisc\procscri.prg"
Memvar iscr

STATIC nLastError, numlin, scr_RetValue
STATIC lDebugInfo := .F.
STATIC lDebugger := .F.
STATIC lDebugRun := .F.






EXTERNAL __PP_STDRULES

FUNCTION OpenScript( fname, scrkod )
LOCAL han, stroka, scom, aScr, rejim := 0, i
LOCAL strbuf := Space(1024), poz := 1024+1
LOCAL aFormCode, aFormName

   scrkod := IIF( scrkod==Nil, "000", Upper(scrkod) )
   han := FOPEN( fname, 0 + 64 )
   IF han <> - 1
      while .T.
         stroka := RDSTR( han,@strbuf,@poz,1024 )
         IF LEN( stroka ) = 0
            EXIT
         ELSEIF rejim == 0 .AND. Left( stroka,1 ) == "#"
            IF Upper( LEFT( stroka, 7 ) ) == "#SCRIPT"
               scom := Upper( Ltrim( Substr( stroka,9 ) ) )
               IF scom == scrkod
                  aScr := RdScript( han, @strbuf, @poz,,fname+","+scrkod )
                  EXIT
               ENDIF
            ELSEIF LEFT( stroka, 6 ) == "#BLOCK"
               scom := Upper( Ltrim( Substr( stroka,8 ) ) )
               IF scom == scrkod
                  rejim     := - 1
                  aFormCode := {}
                  aFormName := {}
               ENDIF
            ENDIF
         ELSEIF rejim == -1 .AND. LEFT( stroka, 1 ) == "@"
            i := AT( " ", stroka )
            Aadd( aFormCode, SUBSTR( stroka, 2, i-2 ) )
            Aadd( aFormName, SUBSTR( stroka, i+1 ) )
         ELSEIF rejim == -1 .AND. LEFT( stroka, 9 ) == "#ENDBLOCK"

            i := WCHOICE( aFormName )



            IF i == 0
               FCLOSE( han )
               RETURN Nil
            ENDIF
            rejim  := 0
            scrkod := aFormCode[ i ]
         ENDIF
      ENDDO
      FCLOSE( han )
   ELSE

      MsgStop( fname + " can't be opened " )



      RETURN Nil
   ENDIF
RETURN aScr

FUNCTION RdScript( scrSource, strbuf, poz, lppNoInit, cTitle )
STATIC s_pp
LOCAL han
LOCAL rezArray := Iif( lDebugInfo, { "", {}, {} }, { "", {} } )

   IF lppNoInit == Nil
      lppNoInit := .F.
   ENDIF
   IF poz == Nil
      poz := 1
   ENDIF
   IF cTitle <> Nil
      rezArray[1] := cTitle
   ENDIF
   nLastError := 0
   IF scrSource == Nil
      han := Nil
      poz := 0
   ELSEIF VALTYPE( scrSource ) == "C"
      strbuf := SPACE( 1024 )
      poz    := 1024+1
      han    := FOPEN( scrSource, 0 + 64 )
   ELSE
      han := scrSource
   ENDIF
   IF han == Nil .OR. han <> - 1
      IF !lppNoInit .OR. s_pp == NIL
         s_pp := __pp_init()
      ENDIF
      IF VALTYPE( scrSource ) == "C"
         WndOut( "Compiling ..." )
         WndOut( "" )
      ENDIF
      numlin := 0
      IF !CompileScr( s_pp, han, @strbuf, @poz, rezArray, scrSource )
         rezArray := Nil
      ENDIF
      IF scrSource <> Nil .AND. VALTYPE( scrSource ) == "C"
         WndOut()
         FCLOSE( han )
      ENDIF
      IF !lppNoInit
         s_pp := NIL
      ENDIF
   ELSE

      MsgStop( "Can't open " + scrSource )





      nLastError := -1
      RETURN Nil
   ENDIF
RETURN rezArray

STATIC FUNCTION COMPILESCR( pp, han, strbuf, poz, rezArray, scrSource )
LOCAL scom, poz1, stroka, strfull := "", bOldError, i, tmpArray := {}
Local cLine, lDebug := ( Len( rezArray ) >= 3 )

   while .T.
      cLine := RDSTR( han, @strbuf, @poz, 1024 )
      IF LEN( cLine ) = 0
         EXIT
      ENDIF
      numlin ++
      IF Right( cLine,1 ) == ";"
         strfull += Left( cLine,Len(cLine)-1 )
         LOOP
      ELSE
         IF !Empty( strfull )
            cLine := strfull + cLine
         ENDIF
         strfull := ""
      ENDIF
      stroka := RTRIM( LTRIM( cLine ) )
      IF RIGHT( stroka, 1 ) == CHR( 26 )
         stroka := LEFT( stroka, LEN( stroka ) - 1 )
      ENDIF
      IF !EMPTY( stroka ) .AND. LEFT( stroka, 2 ) <> "//"

         IF Left( stroka,1 ) == "#"
            IF UPPER( Left( stroka,7 ) ) == "#ENDSCR"
               Return .T.
            ELSEIF UPPER( Left( stroka,6 ) ) == "#DEBUG"
               IF !lDebug .AND. Len( rezArray[2] ) == 0
                  lDebug := .T.
                  Aadd( rezArray, {} )
                  IF SUBSTR( stroka,7,3 ) == "GER"
                     AADD( rezArray[2], stroka )
                     AADD( tmpArray, "" )
                     Aadd( rezArray[3], Str( numlin,4 ) + ":" + cLine )
                  ENDIF
               ENDIF
               LOOP

            ELSE
               __pp_process( pp, stroka )
               LOOP

            ENDIF

         ELSE
            stroka := __pp_process( pp, stroka )

         ENDIF

         poz1 := AT( " ", stroka )
         scom := UPPER( SUBSTR( stroka, 1, IIF( poz1 <> 0, poz1 - 1, 999 ) ) )
         DO CASE
         CASE scom == "PRIVATE" .OR. scom == "PARAMETERS" .OR. scom == "LOCAL"

            IF LEN( rezArray[2] ) == 0 .OR. ( i := VALTYPE( ATAIL( rezArray[2] ) ) ) == "C"  .OR. i == "A"
               IF Left( scom,2 ) == "LO"
                  AADD( rezArray[2], " "+ALLTRIM( SUBSTR( stroka, 7 ) ) )
               ELSEIF Left( scom,2 ) == "PR"
                  AADD( rezArray[2], " "+ALLTRIM( SUBSTR( stroka, 9 ) ) )
               ELSE
                  AADD( rezArray[2], "/"+ALLTRIM( SUBSTR( stroka, 12 ) ) )
               ENDIF
               AADD( tmpArray, "" )
            ELSE
               nLastError := 1
               RETURN .F.
            ENDIF

         CASE ( scom == "DO" .AND. UPPER( SUBSTR( stroka, 4, 5 ) ) == "WHILE" )  .OR. scom == "WHILE"
            AADD( tmpArray, stroka )
            AADD( rezArray[2], .F. )
         CASE scom == "ENDDO"
            IF !Fou_Do( rezArray[2], tmpArray )
               nLastError := 2
               RETURN .F.
            ENDIF
         CASE scom == "EXIT"
            AADD( tmpArray, "EXIT" )
            AADD( rezArray[2], .F. )
         CASE scom == "LOOP"
            AADD( tmpArray, "LOOP" )
            AADD( rezArray[2], .F. )
         CASE scom == "IF"
            AADD( tmpArray, stroka )
            AADD( rezArray[2], .F. )
         CASE scom == "ELSEIF"
            IF !Fou_If( rezArray, tmpArray, .T. )
               nLastError := 3
               RETURN .F.
            ENDIF
            AADD( tmpArray, SUBSTR( stroka, 5 ) )
            AADD( rezArray[2], .F. )
         CASE scom == "ELSE"
            IF !Fou_If( rezArray, tmpArray, .T. )
               nLastError := 1
               RETURN .F.
            ENDIF
            AADD( tmpArray, "IF .T." )
            AADD( rezArray[2], .F. )
         CASE scom == "ENDIF"
            IF !Fou_If( rezArray, tmpArray, .F. )
               nLastError := 1
               RETURN .F.
            ENDIF
         CASE scom == "RETURN"
            bOldError := ERRORBLOCK( { | e | MacroError(1,e,stroka) } )
            BEGIN SEQUENCE
               AADD( rezArray[2], &( "{||EndScript("+Ltrim( Substr( stroka,7 ) )+")}" ) )
            RECOVER
               IF scrSource <> Nil .AND. VALTYPE( scrSource ) == "C"
                  WndOut()
                  FCLOSE( han )
               ENDIF
               ERRORBLOCK( bOldError )
               RETURN .F.
            end
            ERRORBLOCK( bOldError )
            AADD( tmpArray, "" )
         CASE scom == "FUNCTION"
            stroka := Ltrim( Substr( stroka,poz1+1 ) )
            poz1 := At( "(",stroka )
            scom := UPPER( LEFT( stroka, IIF( poz1 <> 0, poz1 - 1, 999 ) ) )
            AADD( rezArray[2], Iif( lDebug,{ scom,{},{} },{ scom,{} } ) )
            AADD( tmpArray, "" )
            IF !CompileScr( pp, han, @strbuf, @poz, rezArray[2,Len(rezArray[2])] )
               RETURN .F.
            ENDIF
         CASE scom == "#ENDSCRIPT" .OR. Left( scom,7 ) == "ENDFUNC"
            RETURN .T.
         OTHERWISE
            bOldError := ERRORBLOCK( { | e | MacroError(1,e,stroka) } )
            BEGIN SEQUENCE
               AADD( rezArray[2], &( "{||" + ALLTRIM( stroka ) + "}" ) )
            RECOVER
               IF scrSource <> Nil .AND. VALTYPE( scrSource ) == "C"
                  WndOut()
                  FCLOSE( han )
               ENDIF
               ERRORBLOCK( bOldError )
               RETURN .F.
            end
            ERRORBLOCK( bOldError )
            AADD( tmpArray, "" )
         ENDCASE
         IF lDebug .AND. Len( rezArray[3] ) < Len( rezArray[2] )
            Aadd( rezArray[3], Str( numlin,4 ) + ":" + cLine )
         ENDIF
      ENDIF
   ENDDO
RETURN .T.

STATIC FUNCTION MacroError( nm, e, stroka )
Local n, cTitle


   IF nm == 1

      stroka := ErrorMessage( e ) + Chr(10)+Chr(13) + "in" + Chr(10)+Chr(13) +  AllTrim(stroka)
      cTitle := "Script compiling error"
   ELSEIF nm == 2
      stroka := ErrorMessage( e )
      cTitle := "Script variables error"
   ELSEIF nm == 3
      n := 2
      WHILE !Empty( ProcName( n ) )
        stroka += Chr(13)+Chr(10) + "Called from " + ProcName( n ) + "(" + AllTrim( Str( ProcLine( n++ ) ) ) + ")"
      ENDDO
      stroka := ErrorMessage( e )+ Chr(10)+Chr(13) + stroka
      cTitle := "Script execution error"
   ENDIF
   stroka += Chr(13)+Chr(10) + Chr(13)+Chr(10) + "Continue ?"
   IF !msgYesNo( stroka, cTitle )
      EndWindow()
      __Quit()
   ENDIF














   BREAK
RETURN .T.

STATIC FUNCTION Fou_If( rezArray, tmpArray, prju )
LOCAL i, j, bOldError

   IF prju
      AADD( tmpArray, "JUMP" )
      AADD( rezArray[2], .F. )
      IF Len( rezArray ) >= 3
         Aadd( rezArray[3], Str( numlin,4 ) + ":JUMP" )
      ENDIF
   ENDIF
   j := LEN( rezArray[2] )
   FOR i := j TO 1 STEP - 1
      IF UPPER( LEFT( tmpArray[ i ], 2 ) ) == "IF"
         bOldError := ERRORBLOCK( { | e | MacroError(1,e,tmpArray[ i ]) } )
         BEGIN SEQUENCE

            rezArray[ 2,i ] := &( "{||IIF(" + ALLTRIM( SUBSTR( tmpArray[ i ], 4 ) ) +  ",.T.,iscr:=" + LTRIM( STR( j, 5 ) ) + ")}" )
         RECOVER
            ERRORBLOCK( bOldError )
            RETURN .F.
         end
         ERRORBLOCK( bOldError )
         tmpArray[ i ] := ""
         i --
         IF i > 0 .AND. tmpArray[ i ] == "JUMP"
            rezArray[ 2,i ] := &( "{||iscr:=" + LTRIM( STR( IIF( prju, j - 1, j ), 5 ) ) + "}" )
            tmpArray[ i ] := ""
         ENDIF
         RETURN .T.
      ENDIF
   NEXT
RETURN .F.

STATIC FUNCTION Fou_Do( rezArray, tmpArray )
LOCAL i, j, iloop := 0, iPos, bOldError

   j := LEN( rezArray )
   FOR i := j TO 1 STEP - 1
      IF !EMPTY( tmpArray[ i ] ) .AND. LEFT( tmpArray[ i ], 4 ) == "EXIT"
         rezArray[ i ] = &( "{||iscr:=" + LTRIM( STR( j + 1, 5 ) ) + "}" )
         tmpArray[ i ] = ""
      ENDIF
      IF !EMPTY( tmpArray[ i ] ) .AND. LEFT( tmpArray[ i ], 4 ) == "LOOP"
         iloop := i
      ENDIF


      IF !EMPTY( tmpArray[ i ] ) .AND.  ( UPPER( LEFT( tmpArray[ i ], 8 ) ) = "DO WHILE" .OR.  UPPER( LEFT( tmpArray[ i ], 5 ) ) = "WHILE" )
         bOldError := ERRORBLOCK( { | e | MacroError(1,e,tmpArray[ i ] ) } )
         BEGIN SEQUENCE


            rezArray[ i ] = &( "{||IIF(" + ALLTRIM( SUBSTR( tmpArray[ i ],  IIF( UPPER( LEFT( tmpArray[ i ],1 ) ) == "D",10,7 ) ) ) +  ",.T.,iscr:=" + LTRIM( STR( j + 1, 5 ) ) + ")}" )
         RECOVER
            ERRORBLOCK( bOldError )
            RETURN .F.
         end
         ERRORBLOCK( bOldError )
         tmpArray[ i ] = ""
         AADD( rezArray, &( "{||iscr:=" + LTRIM( STR( i - 1, 5 ) ) + "}" ) )
         AADD( tmpArray, "" )
         IF iloop > 0
            rezArray[ iloop ] = &( "{||iscr:=" + LTRIM( STR( i - 1, 5 ) ) + "}" )
            tmpArray[ iloop ] = ""
         ENDIF
         RETURN .T.
      ENDIF
   NEXT
RETURN .F.

FUNCTION DoScript( aScript, aParams )
LOCAL arlen, stroka, varName, varValue, lDebug, lParam, j, RetValue, lSetDebugger := .F.
MEMVAR iscr, bOldError, aScriptt
PRIVATE iscr := 1, bOldError

   scr_RetValue := Nil
   IF Type( "aScriptt" ) <> "A"
      Private aScriptt := aScript
   ENDIF
   IF aScript == Nil .OR. ( arlen := Len( aScript[2] ) ) == 0
      Return .T.
   ENDIF
   lDebug := ( Len( aScript ) >= 3 )
   while VALTYPE( aScript[ 2,iscr ] ) <> "B"
      IF VALTYPE( aScript[ 2,iscr ] ) == "C"
         IF Left( aScript[ 2,iscr ],1 ) == "#"
            IF !lDebugger
               lSetDebugger := .T.
               SetDebugger()
            ENDIF
         ELSE
            stroka := Substr( aScript[ 2,iscr ],2 )
            lParam := ( Left( aScript[ 2,iscr ],1 ) == "/" )
            bOldError := ERRORBLOCK( { | e | MacroError(2,e) } )
            BEGIN SEQUENCE
            j := 1
            while !EMPTY( varName := getNextVar( @stroka, @varValue ) )
               PRIVATE &varName
               IF varvalue <> Nil
                  &varName := &varValue
               ENDIF
               IF lParam .AND. aParams <> Nil .AND. Len(aParams) >= j
                  &varname = aParams[ j ]
               ENDIF
               j ++
            ENDDO
            RECOVER
               WndOut()
               ERRORBLOCK( bOldError )
               Return .F.
            end
            ERRORBLOCK( bOldError )
         ENDIF
      ENDIF
      iscr ++
   ENDDO
   IF lDebug
      bOldError := ERRORBLOCK( { | e | MacroError(3,e,aScript[3,iscr]) } )
   ELSE
      bOldError := ERRORBLOCK( { | e | MacroError(3,e,LTrim(Str(iscr))) } )
   ENDIF
   BEGIN SEQUENCE
      IF lDebug .AND. lDebugger
         while iscr > 0 .AND. iscr <= arlen

            IF lDebugger
               lDebugRun := .F.
               hwg_scrDebug( aScript,iscr )
               while !lDebugRun
                  hwg_ProcessMessage()
               ENDDO
            ENDIF

            EVAL( aScript[ 2,iscr ] )
            iscr ++
         ENDDO

         hwg_scrDebug( aScript,0 )
         IF lSetDebugger
            SetDebugger( .F. )
         ENDIF

      ELSE
         while iscr > 0 .AND. iscr <= arlen
            EVAL( aScript[ 2,iscr ] )
            iscr ++
         ENDDO
      ENDIF
   RECOVER
      WndOut()
      ERRORBLOCK( bOldError )

      IF lDebug .AND. lDebugger
         hwg_scrDebug( aScript,0 )
      ENDIF

      Return .F.
   end
   ERRORBLOCK( bOldError )
   WndOut()

   RetValue := scr_RetValue

RETURN RetValue

FUNCTION CallFunc( cProc, aParams, aScript )
Local i := 1
MEMVAR aScriptt

   IF aScript == Nil
      aScript := aScriptt
   ENDIF
   scr_RetValue := Nil
   cProc := Upper( cProc )
   while i <= Len(aScript[2]) .AND. VALTYPE( aScript[2,i] ) == "A"
      IF aScript[2,i,1] == cProc
         DoScript( aScript[2,i],aParams )
         EXIT
      ENDIF
      i ++
   ENDDO

RETURN scr_RetValue

FUNCTION EndScript( xRetValue )
   scr_RetValue := xRetValue
   iscr := -99
RETURN Nil

FUNCTION CompileErr( nLine )
   nLine := numlin
RETURN nLastError

FUNCTION Codeblock( string )
   IF Left( string,2 ) == "{|"
      Return &( string )
   ENDIF
RETURN &("{||"+string+"}")

FUNCTION SetDebugInfo( lDebug )

   lDebugInfo := Iif( lDebug==Nil, .T., lDebug )
RETURN .T.

FUNCTION SetDebugger( lDebug )

   lDebugger := Iif( lDebug==Nil, .T., lDebug )
RETURN .T.

FUNCTION SetDebugRun()

   lDebugRun := .T.
RETURN .T.




STATIC FUNCTION WndOut()
RETURN Nil

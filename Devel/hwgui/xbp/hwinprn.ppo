#line 112 "d:\devel\xharbour_bcc73\include\hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 23 "source\hwinprn.prg"
Static cPseudoChar := "ÄÍ³ºÚÉÕÖ¿»·¸ÀÈÓÔÙ¼½¾ÂËÑÒÁÊÏÐÃÌÆÇ´¹µ¶ÅÎ×Ø"


_HB_CLASS HWinPrn ; UTILITY FUNCTION HWinPrn(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HWinPrn" , {HObject():classh} ) ) ; ;

   _HB_MEMBER { nStdHeight} ; IIF( !.F., s_oClass:AddMultiClsData(, Nil, nScope + IIF( .F., 32, 0 ) + IIF( .T., 64, 0 ), { "nStdHeight" }, .F. ), )
   _HB_MEMBER { cPrinterName} ; IIF( !.F., s_oClass:AddMultiClsData(, Nil, nScope + IIF( .F., 32, 0 ) + IIF( .T., 64, 0 ), { "cPrinterName" }, .F. ), )
   _HB_MEMBER { oPrinter} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPrinter" }, .F., .F. ), )
   _HB_MEMBER { oFont} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFont" }, .F., .F. ), )
   _HB_MEMBER { nLineHeight, nLined} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nLineHeight" , "nLined" }, .F., .F. ), )
   _HB_MEMBER { nCharW} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nCharW" }, .F., .F. ), )
   _HB_MEMBER { x, y} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "x" , "y" }, .F., .F. ), )
   _HB_MEMBER { lElite} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lElite" }, .F., .F. ), )
   _HB_MEMBER { lCond} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lCond" }, .F., .F. ), )
   _HB_MEMBER { nLineInch} ; IIF( !.F., s_oClass:AddMultiData(, 6, nScope + IIF( .F., 32, 0 ), { "nLineInch" }, .F., .F. ), )
   _HB_MEMBER { lBold} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lBold" }, .F., .F. ), )
   _HB_MEMBER { lItalic} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lItalic" }, .F., .F. ), )
   _HB_MEMBER { lUnder} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lUnder" }, .F., .F. ), )
   _HB_MEMBER { lChanged} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lChanged" }, .F., .F. ), )

   _HB_MEMBER { cpFrom, cpTo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cpFrom" , "cpTo" }, .F., .F. ), )
   _HB_MEMBER { nTop} ; IIF( !.F., s_oClass:AddMultiData(, 5, nScope + IIF( .F., 32, 0 ), { "nTop" }, .F., .F. ), )
   _HB_MEMBER { nBottom} ; IIF( !.F., s_oClass:AddMultiData(, 5, nScope + IIF( .F., 32, 0 ), { "nBottom" }, .F., .F. ), )
   _HB_MEMBER { nLeft} ; IIF( !.F., s_oClass:AddMultiData(, 5, nScope + IIF( .F., 32, 0 ), { "nLeft" }, .F., .F. ), )
   _HB_MEMBER { nRight} ; IIF( !.F., s_oClass:AddMultiData(, 5, nScope + IIF( .F., 32, 0 ), { "nRight" }, .F., .F. ), )


   _HB_MEMBER New( cPrinter, cpFrom, cpTo, nFormType, nBin, lLandScape, nCopies); IIF( .F., s_oClass:ModMethod( "New", @HWinPrn_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HWinPrn_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER InitValues( lElite, lCond, nLineInch, lBold, lItalic, lUnder); IIF( .F., s_oClass:ModMethod( "InitValues", @HWinPrn_InitValues(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitValues", @HWinPrn_InitValues(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetMode( lElite, lCond, nLineInch, lBold, lItalic, lUnder); IIF( .F., s_oClass:ModMethod( "SetMode", @HWinPrn_SetMode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetMode", @HWinPrn_SetMode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER StartDoc( lPreview,cMetaName); IIF( .F., s_oClass:ModMethod( "StartDoc", @HWinPrn_StartDoc(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "StartDoc", @HWinPrn_StartDoc(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER NextPage(); IIF( .F., s_oClass:ModMethod( "NextPage", @HWinPrn_NextPage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "NextPage", @HWinPrn_NextPage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER PrintLine( cLine,lNewLine); IIF( .F., s_oClass:ModMethod( "PrintLine", @HWinPrn_PrintLine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PrintLine", @HWinPrn_PrintLine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER PrintText( cText); IIF( .F., s_oClass:ModMethod( "PrintText", @HWinPrn_PrintText(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PrintText", @HWinPrn_PrintText(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER PutCode( cLine); IIF( .F., s_oClass:ModMethod( "PutCode", @HWinPrn_PutCode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PutCode", @HWinPrn_PutCode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER EndDoc(); IIF( .F., s_oClass:ModMethod( "EndDoc", @HWinPrn_EndDoc(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "EndDoc", @HWinPrn_EndDoc(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER End(); IIF( .F., s_oClass:ModMethod( "End", @HWinPrn_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "End", @HWinPrn_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   nScope := 8 ; ( nScope )
      _HB_MEMBER { lDocStart} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lDocStart" }, .F., .F. ), )
      _HB_MEMBER { lPageStart} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lPageStart" }, .F., .F. ), )
      _HB_MEMBER { lFirstLine} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lFirstLine" }, .F., .F. ), )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HWinPrn ;

UTILITY STATIC function HWinPrn_New( cPrinter, cpFrom, cpTo, nFormType, nBin, lLandScape, nCopies) ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn

   ::oPrinter := HPrinter():New( Iif( cPrinter==Nil,"",cPrinter ),.F., nFormType, nBin, lLandScape, nCopies )
   IF ::oPrinter == Nil
      Return Nil
   ENDIF
   ::cpFrom := cpFrom
   ::cpTo   := cpTo

Return Self

UTILITY STATIC function HWinPrn_InitValues( lElite, lCond, nLineInch, lBold, lItalic, lUnder) ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn

   IF lElite <> Nil; ::lElite := lElite;  ENDIF
   IF lCond <> Nil; ::lCond := lCond;  ENDIF
   IF nLineInch <> Nil; ::nLineInch := nLineInch;  ENDIF
   IF lBold <> Nil; ::lBold := lBold;  ENDIF
   IF lItalic <> Nil; ::lItalic := lItalic;  ENDIF
   IF lUnder <> Nil; ::lUnder := lUnder;  ENDIF
   ::lChanged := .T.

Return Nil

UTILITY STATIC function HWinPrn_SetMode( lElite, lCond, nLineInch, lBold, lItalic, lUnder) ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn



Local cFont := "Lucida Console"

Local aKoef := { 1, 1.22, 1.71, 2 }
Local nMode := 0, oFont, nWidth, nPWidth

   ::InitValues( lElite, lCond, nLineInch, lBold, lItalic, lUnder  )

   IF ::lPageStart

      IF ::nStdHeight == Nil .OR. ::cPrinterName <> ::oPrinter:cPrinterName
         ::nStdHeight := 4
         ::cPrinterName := ::oPrinter:cPrinterName
         nPWidth := ::oPrinter:nWidth / ::oPrinter:nHRes - 10
         IF nPWidth > 210 .OR. nPWidth < 190
            nPWidth := 200
         ENDIF



         oFont := ::oPrinter:AddFont( cFont, ::nStdHeight * ::oPrinter:nVRes )

         ::oPrinter:SetFont( oFont )
         nWidth := ::oPrinter:GetTextWidth( Replicate( "A",80 ) ) / ::oPrinter:nHRes
         IF nWidth > nPWidth+2 .OR. nWidth < nPWidth-15
            ::nStdHeight := ::nStdHeight * ( nPWidth / nWidth )
         ENDIF
         oFont:Release()
      ENDIF

      IF ::lElite; nMode++; ENDIF
      IF ::lCond; nMode += 2; ENDIF

      ::nLineHeight := ( ::nStdHeight / aKoef[nMode+1] ) * ::oPrinter:nVRes
      ::nLined := ( 25.4 * ::oPrinter:nVRes ) / ::nLineInch - ::nLineHeight







      oFont := ::oPrinter:AddFont( "Lucida Console", ::nLineHeight, ::lBold, ::lItalic, ::lUnder, 204 )


      IF ::oFont <> Nil
         ::oFont:Release()
      ENDIF
      ::oFont := oFont

      ::oPrinter:SetFont( ::oFont )
      ::nCharW := ::oPrinter:GetTextWidth( "ABCDEFGHIJ" ) / 10
      ::lChanged := .F.

   ENDIF

Return Nil

UTILITY STATIC function HWinPrn_StartDoc( lPreview,cMetaName) ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn

   ::lDocStart := .T.
   ::oPrinter:StartDoc( lPreview,cMetaName )
   ::NextPage()

Return Nil

UTILITY STATIC function HWinPrn_NextPage() ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn

   IF !::lDocStart
      Return Nil
   ENDIF
   IF ::lPageStart
      ::oPrinter:EndPage()
   ENDIF

   ::lPageStart := .T.
   ::oPrinter:StartPage()

   IF ::oFont == Nil
      ::SetMode()
   ELSE
      ::oPrinter:SetFont( ::oFont )
   ENDIF

   ::y := ::nTop * ::oPrinter:nVRes - ::nLineHeight - ::nLined
   ::lFirstLine := .T.

Return Nil

UTILITY STATIC function HWinPrn_PrintLine( cLine,lNewLine) ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn
Local i, i0, j, slen, c

   IF !::lDocStart
      ::StartDoc()
   ENDIF

   IF ::y + 2 * ( ::nLineHeight + ::nLined ) > ::oPrinter:nHeight
      ::NextPage()
   ENDIF
   ::x := ::nLeft * ::oPrinter:nHRes
   IF ::lFirstLine
      ::lFirstLine := .F.
   ELSEIF lNewLine == Nil .OR. lNewLine
      ::y += ::nLineHeight + ::nLined
   ENDIF

   IF cLine <> Nil .AND. !Empty( cLine )
      slen := Len( cLine )
      i := 1
      i0 := 0
      while i <= slen
         IF ( c := Substr( cLine,i,1 ) ) < " "
            IF i0 <> 0
               ::PrintText( Substr(cLine,i0,i-i0 ) )
               i0 := 0
            ENDIF
            i += ::PutCode( Substr( cLine,i ) )
            LOOP
         ELSEIF ( j := At( c,cPseudoChar ) ) <> 0
            IF i0 <> 0
               ::PrintText( Substr(cLine,i0,i-i0 ) )
               i0 := 0
            ENDIF
            IF j < 3
               i0 := i
               while i <= slen .AND. Substr( cLine,i,1 ) == c
                  i ++
               ENDDO
               ::oPrinter:Line( ::x, ::y+(::nLineHeight/2), ::x + (i-i0)*::nCharW, ::y+(::nLineHeight/2) )
               ::x += (i-i0) * ::nCharW
               i0 := 0
               LOOP
            ELSE
               IF j < 5
                  ::oPrinter:Line( ::x+(::nCharW/2),::y, ::x+(::nCharW/2), ::y+::nLineHeight+::nLined )
               ELSEIF j < 9
                  ::oPrinter:Line( ::x+(::nCharW/2),::y+(::nLineHeight/2), ::x+::nCharW, ::y+(::nLineHeight/2) )
                  ::oPrinter:Line( ::x+(::nCharW/2),::y+(::nLineHeight/2), ::x+(::nCharW/2), ::y+::nLineHeight+::nLined )
               ELSEIF j < 13
                  ::oPrinter:Line( ::x,::y+(::nLineHeight/2), ::x+(::nCharW/2), ::y+(::nLineHeight/2) )
                  ::oPrinter:Line( ::x+(::nCharW/2),::y+(::nLineHeight/2), ::x+(::nCharW/2), ::y+::nLineHeight+::nLined )
               ELSEIF j < 17
                  ::oPrinter:Line( ::x+(::nCharW/2),::y+(::nLineHeight/2), ::x+::nCharW, ::y+(::nLineHeight/2) )
                  ::oPrinter:Line( ::x+(::nCharW/2),::y, ::x+(::nCharW/2), ::y+(::nLineHeight/2) )
               ELSEIF j < 21
                  ::oPrinter:Line( ::x,::y+(::nLineHeight/2), ::x+(::nCharW/2), ::y+(::nLineHeight/2) )
                  ::oPrinter:Line( ::x+(::nCharW/2),::y, ::x+(::nCharW/2), ::y+(::nLineHeight/2) )
               ELSEIF j < 25
                  ::oPrinter:Line( ::x,::y+(::nLineHeight/2), ::x+::nCharW, ::y+(::nLineHeight/2) )
                  ::oPrinter:Line( ::x+(::nCharW/2),::y+(::nLineHeight/2), ::x+(::nCharW/2), ::y+::nLineHeight+::nLined )
               ELSEIF j < 29
                  ::oPrinter:Line( ::x,::y+(::nLineHeight/2), ::x+::nCharW, ::y+(::nLineHeight/2) )
                  ::oPrinter:Line( ::x+(::nCharW/2),::y, ::x+(::nCharW/2), ::y+(::nLineHeight/2) )
               ELSEIF j < 33
                  ::oPrinter:Line( ::x+(::nCharW/2),::y+(::nLineHeight/2), ::x+::nCharW, ::y+(::nLineHeight/2) )
                  ::oPrinter:Line( ::x+(::nCharW/2),::y, ::x+(::nCharW/2), ::y+::nLineHeight+::nLined )
               ELSEIF j < 37
                  ::oPrinter:Line( ::x,::y+(::nLineHeight/2), ::x+(::nCharW/2), ::y+(::nLineHeight/2) )
                  ::oPrinter:Line( ::x+(::nCharW/2),::y, ::x+(::nCharW/2), ::y+::nLineHeight+::nLined )
               ELSE
                  ::oPrinter:Line( ::x,::y+(::nLineHeight/2), ::x+::nCharW, ::y+(::nLineHeight/2) )
                  ::oPrinter:Line( ::x+(::nCharW/2),::y, ::x+(::nCharW/2), ::y+::nLineHeight+::nLined )
               ENDIF
               ::x += ::nCharW
            ENDIF
         ELSE
            IF i0 == 0
               i0 := i
            ENDIF
         ENDIF
         i ++
      ENDDO
      IF i0 <> 0
         ::PrintText( Substr(cLine,i0,i-i0 ) )
      ENDIF
   ENDIF

Return Nil

UTILITY STATIC function HWinPrn_PrintText( cText) ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn

   IF ::lChanged
      ::SetMode()
   ENDIF

   ::oPrinter:Say( Iif( ::cpFrom<>::cpTo, hb_Translate( cText,::cpFrom,::cpTo ), cText ),  ::x, ::y, ::oPrinter:nWidth, ::y+::nLineHeight+::nLined )
   ::x += ( ::nCharW * Len( cText ) )

Return Nil

UTILITY STATIC function HWinPrn_PutCode( cLine) ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn













Static aCodes := {    { Chr(27)+"@",.F.,.F.,6,.F.,.F.,.F. },   { Chr(27)+"M",.T.,,,,, },   { Chr(15),,.T.,,,, },       { Chr(18),,.F.,,,, },       { Chr(27)+"0",,,8,,, },     { Chr(27)+"2",,,6,,, },     { Chr(27)+"-1",,,,,,.T. },  { Chr(27)+"-0",,,,,,.F. },  { Chr(27)+"4",,,,,.T., },   { Chr(27)+"5",,,,,.F., },   { Chr(27)+"G",,,,,.T., },   { Chr(27)+"H",,,,.F.,, }    }
Local i, sLen := Len( aCodes ), c := Left( cLine,1 )

   FOR i := 1 TO sLen
      IF Left(aCodes[i,1],1) == c .AND. At( aCodes[i,1],Left(cLine,3 ) ) == 1
         ::InitValues( aCodes[i,2], aCodes[i,3], aCodes[i,4], aCodes[i,5], aCodes[i,6], aCodes[i,7]  )
         Return Len( aCodes[i,1] )
      ENDIF
   NEXT

Return 1

UTILITY STATIC function HWinPrn_EndDoc() ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn

   IF ::lPageStart
      ::oPrinter:EndPage()
      ::lPageStart := .F.
   ENDIF
   IF ::lDocStart
      ::oPrinter:EndDoc()
      ::lDocStart := .F.
      IF __ObjHasMsg( ::oPrinter,"PREVIEW" ) .AND. ::oPrinter:lPreview
         ::oPrinter:Preview()
      ENDIF
   ENDIF

Return Nil

UTILITY STATIC function HWinPrn_End() ; local Self AS CLASS HWinPrn := QSelf() AS CLASS HWinPrn

   ::EndDoc()
   ::oFont:Release()
   ::oPrinter:End()
Return Nil

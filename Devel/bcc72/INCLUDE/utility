// utility standard header
#ifndef _UTILITY_
#define _UTILITY_
#pragma option push -b -a -pc -Vx- -Ve- -w-inl -w-aus -w-sig
#include <iosfwd>
#include <xremoveref>

_STD_BEGIN
		// TEMPLATE FUNCTION swap (from <algorithm>)
template<class _Ty> inline
	void swap(_Ty& _Left, _Ty& _Right)
	{	// exchange values stored at _Left and _Right
	if (&_Left != &_Right)
		{	// different, worth swapping
		_Ty _Tmp = _Left;

		_Left = _Right;
		_Right = _Tmp;
		}
	}

		// TEMPLATE FUNCTION _Swap_adl
template<class _Ty> inline
	void _Swap_adl(_Ty& _Left, _Ty& _Right)
	{	// exchange values stored at _Left and _Right, using ADL
	swap(_Left, _Right);
	}


		// TEMPLATE STRUCT pair
template<class _Ty1,
	class _Ty2> struct pair
	{	// store a pair of values
	typedef pair<_Ty1, _Ty2> _Myt;
	typedef _Ty1 first_type;
	typedef _Ty2 second_type;

	pair()
		: first(_Ty1()), second(_Ty2())
		{	// construct from defaults
		}

	pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	// construct from specified values
		}

	template<class _Other1,
		class _Other2>
		pair(const pair<_Other1, _Other2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	// construct from compatible pair
		}

	void swap(_Myt& _Right)
		{	// exchange contents with _Right
		if (this != &_Right)
			{	// different, worth swapping
			_STD swap(first, _Right.first);
			_STD swap(second, _Right.second);
			}
		}

	_Ty1 first;	// the first stored value
	_Ty2 second;	// the second stored value
	};

		// pair TEMPLATE OPERATORS
template<class _Ty1,
	class _Ty2> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
	{	// swap _Left and _Right pairs
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator==(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	// test for pair equality
	return (_Left.first == _Right.first && _Left.second == _Right.second);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator!=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	// test for pair inequality
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator<(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	// test if _Left < _Right for pairs
	return (_Left.first < _Right.first ||
		(!(_Right.first < _Left.first) && _Left.second < _Right.second));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator>(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	// test if _Left > _Right for pairs
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator<=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	// test if _Left <= _Right for pairs
	return (!(_Right < _Left));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator>=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	// test if _Left >= _Right for pairs
	return (!(_Left < _Right));
	}

template<class _Ty1,
	class _Ty2> inline
	pair<_Ty1, _Ty2> make_pair(_Ty1 _Val1, _Ty2 _Val2)
	{	// return pair composed from arguments
	return (pair<_Ty1, _Ty2>(_Val1, _Val2));
	}

 #if _HAS_NAMESPACE
		// TEMPLATE OPERATORS
	namespace rel_ops
		{	// nested namespace to hide relational operators from std
template<class _Ty> inline
	bool operator!=(const _Ty& _Left, const _Ty& _Right)
	{	// test for inequality, in terms of equality
	return (!(_Left == _Right));
	}

template<class _Ty> inline
	bool operator>(const _Ty& _Left, const _Ty& _Right)
	{	// test if _Left > _Right, in terms of operator<
	return (_Right < _Left);
	}

template<class _Ty> inline
	bool operator<=(const _Ty& _Left, const _Ty& _Right)
	{	// test if _Left <= _Right, in terms of operator<
	return (!(_Right < _Left));
	}

template<class _Ty> inline
	bool operator>=(const _Ty& _Left, const _Ty& _Right)
	{	// test if _Left >= _Right, in terms of operator<
	return (!(_Left < _Right));
	}
		}
 #endif /* _HAS_NAMESPACE */

#if defined (__CODEGEARC__)
#if 0
	// TEMPLATE CLASS identity
template<class _Ty>
	struct identity
	{	// map _Ty to type unchanged
	typedef _Ty type;

	_Ty operator()(const _Ty& _Left) const	// traditional STL identity
		{	// apply identity operator to operand
		return (_Left);
		}
	};

	// TEMPLATE FUNCTION forward
template<class _Ty> inline
	_Ty&& forward(typename identity<_Ty>::type&& _Arg)
	{	// forward _Arg, given explicitly specified type parameter
	return (_Arg);
	}

	// TEMPLATE FUNCTION move
template<class _Ty> inline
	typename remove_reference<_Ty>::type&&
		move(_Ty&& _Arg)
	{	// forward _Arg as moveable
	return (_Arg);
	}
#else
#if 1  // from xtr1common
namespace tr1 {
	// TEMPLATE _Remove_reference
template<class _Ty>
	struct _Remove_reference
	{	// remove reference
	typedef _Ty _Type;
	};

template<class _Ty>
	struct _Remove_reference<_Ty&>
	{	// remove reference
	typedef _Ty _Type;
	};

 #if _HAS_RVALUE_REFERENCES
template<class _Ty>
	struct _Remove_reference<_Ty&&>
	{	// remove rvalue reference
	typedef _Ty _Type;
	};
 #endif /* _HAS_RVALUE_REFERENCES */

	// TEMPLATE _Remove_rvalue_reference
template<class _Ty>
	struct _Remove_rvalue_reference
	{	// remove rvalue reference
	typedef _Ty _Type;
	};

 #if _HAS_RVALUE_REFERENCES
template<class _Ty>
	struct _Remove_rvalue_reference<_Ty&&>
	{	// remove rvalue reference
	typedef _Ty _Type;
	};
 #endif /* _HAS_RVALUE_REFERENCES */
} // namespace tr1
#endif

	// TEMPLATE CLASS identity
template<class _Ty>
	struct identity
	{	// map _Ty to type unchanged
	typedef _Ty type;

	const _Ty& operator()(const _Ty& _Left) const
		{	// apply identity operator to operand
		return (_Left);
		}
	};
 #if _HAS_RVALUE_REFERENCES
	// TEMPLATE FUNCTION forward

 #if _HAS_NEW_RVALUE_REFERENCES
template<class _Ty> inline
	_Ty&& forward(typename identity<_Ty>::type& _Arg)
	{	// forward _Arg, given explicitly specified type parameter
	return ((_Ty&&)_Arg);
	}

 #else /* _HAS_NEW_RVALUE_REFERENCES */
template<class _Ty> inline
	_Ty&& forward(typename identity<_Ty>::type&& _Arg)
	{	// forward _Arg, given explicitly specified type parameter
	return (_Arg);
	}
 #endif /* _HAS_NEW_RVALUE_REFERENCES */

	// TEMPLATE FUNCTION move

 #if _HAS_NEW_RVALUE_REFERENCES
template<class _Ty> inline
	typename tr1::_Remove_reference<_Ty>::_Type&&
		move(_Ty&& _Arg)
	{	// forward _Arg as movable
	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
	}

 #else /* _HAS_NEW_RVALUE_REFERENCES */
template<class _Ty> inline
	typename tr1::_Remove_reference<_Ty>::_Type&&
		move(_Ty&& _Arg)
	{	// forward _Arg as moveable
	return (_Arg);
	}
 #endif /* _HAS_NEW_RVALUE_REFERENCES */

	// TEMPLATE FUNCTION _Move

 #if _HAS_NEW_RVALUE_REFERENCES
template<class _Ty> inline
	typename tr1::_Remove_reference<_Ty>::_Type&&
		_Move(_Ty&& _Arg)
	{	// forward _Arg as movable
	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
	}

 #else /* _HAS_NEW_RVALUE_REFERENCES */
template<class _Ty> inline
	typename tr1::_Remove_reference<_Ty>::_Type&&
		_Move(_Ty&& _Arg)
	{	// forward _Arg as moveable
	return (_Arg);
	}
 #endif /* _HAS_NEW_RVALUE_REFERENCES */

 #else /* _HAS_RVALUE_REFERENCES */
	// TEMPLATE FUNCTION _Move
template<class _Ty> inline
	const _Ty& _Move(const _Ty& _Arg)
	{	// forward _Arg as copyable
	return (_Arg);
	}
 #endif /* _HAS_RVALUE_REFERENCES */
#endif // if 0
#endif

_STD_END
#pragma option pop
#endif /* _UTILITY_ */


/*
 * Copyright (c) 1992-2006 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V5.01:1422 +rval */
